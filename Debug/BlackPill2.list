
BlackPill2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000994c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ae8  08009aec  08009aec  00019aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c5d4  0800c5d4  00022170  2**0
                  CONTENTS
  4 .ARM          00000008  0800c5d4  0800c5d4  0001c5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c5dc  0800c5dc  00022170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c5dc  0800c5dc  0001c5dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c5e0  0800c5e0  0001c5e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002170  20000000  0800c5e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ed8c  20002170  0800e754  00022170  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20010efc  0800e754  00030efc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00022170  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022239  00000000  00000000  000221a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004abb  00000000  00000000  000443d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001bc8  00000000  00000000  00048e98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a18  00000000  00000000  0004aa60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00006e7a  00000000  00000000  0004c478  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018b58  00000000  00000000  000532f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a531b  00000000  00000000  0006be4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000e9  00000000  00000000  00111165  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007354  00000000  00000000  00111250  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    000023c5  00000000  00000000  001185a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20002170 	.word	0x20002170
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ad4 	.word	0x08009ad4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20002174 	.word	0x20002174
 80001dc:	08009ad4 	.word	0x08009ad4

080001e0 <arm_bitreversal_32>:
 80001e0:	1c4b      	adds	r3, r1, #1
 80001e2:	2b01      	cmp	r3, #1
 80001e4:	bf98      	it	ls
 80001e6:	4770      	bxls	lr
 80001e8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001ec:	1c91      	adds	r1, r2, #2
 80001ee:	089b      	lsrs	r3, r3, #2

080001f0 <arm_bitreversal_32_0>:
 80001f0:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001f4:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001f8:	880a      	ldrh	r2, [r1, #0]
 80001fa:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001fe:	4480      	add	r8, r0
 8000200:	4481      	add	r9, r0
 8000202:	4402      	add	r2, r0
 8000204:	4484      	add	ip, r0
 8000206:	f8d9 7000 	ldr.w	r7, [r9]
 800020a:	f8d8 6000 	ldr.w	r6, [r8]
 800020e:	6815      	ldr	r5, [r2, #0]
 8000210:	f8dc 4000 	ldr.w	r4, [ip]
 8000214:	f8c9 6000 	str.w	r6, [r9]
 8000218:	f8c8 7000 	str.w	r7, [r8]
 800021c:	f8cc 5000 	str.w	r5, [ip]
 8000220:	6014      	str	r4, [r2, #0]
 8000222:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8000226:	f8d8 6004 	ldr.w	r6, [r8, #4]
 800022a:	6855      	ldr	r5, [r2, #4]
 800022c:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000230:	f8c9 6004 	str.w	r6, [r9, #4]
 8000234:	f8c8 7004 	str.w	r7, [r8, #4]
 8000238:	f8cc 5004 	str.w	r5, [ip, #4]
 800023c:	6054      	str	r4, [r2, #4]
 800023e:	3108      	adds	r1, #8
 8000240:	3b01      	subs	r3, #1
 8000242:	d1d5      	bne.n	80001f0 <arm_bitreversal_32_0>
 8000244:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000248:	4770      	bx	lr

0800024a <arm_bitreversal_16>:
 800024a:	1c4b      	adds	r3, r1, #1
 800024c:	2b01      	cmp	r3, #1
 800024e:	bf98      	it	ls
 8000250:	4770      	bxls	lr
 8000252:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000256:	1c91      	adds	r1, r2, #2
 8000258:	089b      	lsrs	r3, r3, #2

0800025a <arm_bitreversal_16_0>:
 800025a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800025e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000262:	880a      	ldrh	r2, [r1, #0]
 8000264:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000268:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 800026c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000270:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 8000274:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000278:	f8d9 7000 	ldr.w	r7, [r9]
 800027c:	f8d8 6000 	ldr.w	r6, [r8]
 8000280:	6815      	ldr	r5, [r2, #0]
 8000282:	f8dc 4000 	ldr.w	r4, [ip]
 8000286:	f8c9 6000 	str.w	r6, [r9]
 800028a:	f8c8 7000 	str.w	r7, [r8]
 800028e:	f8cc 5000 	str.w	r5, [ip]
 8000292:	6014      	str	r4, [r2, #0]
 8000294:	3108      	adds	r1, #8
 8000296:	3b01      	subs	r3, #1
 8000298:	d1df      	bne.n	800025a <arm_bitreversal_16_0>
 800029a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2f>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a44:	bf24      	itt	cs
 8000a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4e:	d90d      	bls.n	8000a6c <__aeabi_d2f+0x30>
 8000a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a64:	bf08      	it	eq
 8000a66:	f020 0001 	biceq.w	r0, r0, #1
 8000a6a:	4770      	bx	lr
 8000a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a70:	d121      	bne.n	8000ab6 <__aeabi_d2f+0x7a>
 8000a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a76:	bfbc      	itt	lt
 8000a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a7c:	4770      	bxlt	lr
 8000a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a86:	f1c2 0218 	rsb	r2, r2, #24
 8000a8a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a92:	fa20 f002 	lsr.w	r0, r0, r2
 8000a96:	bf18      	it	ne
 8000a98:	f040 0001 	orrne.w	r0, r0, #1
 8000a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa8:	ea40 000c 	orr.w	r0, r0, ip
 8000aac:	fa23 f302 	lsr.w	r3, r3, r2
 8000ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab4:	e7cc      	b.n	8000a50 <__aeabi_d2f+0x14>
 8000ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aba:	d107      	bne.n	8000acc <__aeabi_d2f+0x90>
 8000abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ac0:	bf1e      	ittt	ne
 8000ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aca:	4770      	bxne	lr
 8000acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000af0:	f000 b972 	b.w	8000dd8 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9e08      	ldr	r6, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	4688      	mov	r8, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d14b      	bne.n	8000bb2 <__udivmoddi4+0xa6>
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	4615      	mov	r5, r2
 8000b1e:	d967      	bls.n	8000bf0 <__udivmoddi4+0xe4>
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	b14a      	cbz	r2, 8000b3a <__udivmoddi4+0x2e>
 8000b26:	f1c2 0720 	rsb	r7, r2, #32
 8000b2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b32:	4095      	lsls	r5, r2
 8000b34:	ea47 0803 	orr.w	r8, r7, r3
 8000b38:	4094      	lsls	r4, r2
 8000b3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b3e:	0c23      	lsrs	r3, r4, #16
 8000b40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b44:	fa1f fc85 	uxth.w	ip, r5
 8000b48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b50:	fb07 f10c 	mul.w	r1, r7, ip
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d909      	bls.n	8000b6c <__udivmoddi4+0x60>
 8000b58:	18eb      	adds	r3, r5, r3
 8000b5a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b5e:	f080 811b 	bcs.w	8000d98 <__udivmoddi4+0x28c>
 8000b62:	4299      	cmp	r1, r3
 8000b64:	f240 8118 	bls.w	8000d98 <__udivmoddi4+0x28c>
 8000b68:	3f02      	subs	r7, #2
 8000b6a:	442b      	add	r3, r5
 8000b6c:	1a5b      	subs	r3, r3, r1
 8000b6e:	b2a4      	uxth	r4, r4
 8000b70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b80:	45a4      	cmp	ip, r4
 8000b82:	d909      	bls.n	8000b98 <__udivmoddi4+0x8c>
 8000b84:	192c      	adds	r4, r5, r4
 8000b86:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b8a:	f080 8107 	bcs.w	8000d9c <__udivmoddi4+0x290>
 8000b8e:	45a4      	cmp	ip, r4
 8000b90:	f240 8104 	bls.w	8000d9c <__udivmoddi4+0x290>
 8000b94:	3802      	subs	r0, #2
 8000b96:	442c      	add	r4, r5
 8000b98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b9c:	eba4 040c 	sub.w	r4, r4, ip
 8000ba0:	2700      	movs	r7, #0
 8000ba2:	b11e      	cbz	r6, 8000bac <__udivmoddi4+0xa0>
 8000ba4:	40d4      	lsrs	r4, r2
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bac:	4639      	mov	r1, r7
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d909      	bls.n	8000bca <__udivmoddi4+0xbe>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	f000 80eb 	beq.w	8000d92 <__udivmoddi4+0x286>
 8000bbc:	2700      	movs	r7, #0
 8000bbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000bc2:	4638      	mov	r0, r7
 8000bc4:	4639      	mov	r1, r7
 8000bc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bca:	fab3 f783 	clz	r7, r3
 8000bce:	2f00      	cmp	r7, #0
 8000bd0:	d147      	bne.n	8000c62 <__udivmoddi4+0x156>
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d302      	bcc.n	8000bdc <__udivmoddi4+0xd0>
 8000bd6:	4282      	cmp	r2, r0
 8000bd8:	f200 80fa 	bhi.w	8000dd0 <__udivmoddi4+0x2c4>
 8000bdc:	1a84      	subs	r4, r0, r2
 8000bde:	eb61 0303 	sbc.w	r3, r1, r3
 8000be2:	2001      	movs	r0, #1
 8000be4:	4698      	mov	r8, r3
 8000be6:	2e00      	cmp	r6, #0
 8000be8:	d0e0      	beq.n	8000bac <__udivmoddi4+0xa0>
 8000bea:	e9c6 4800 	strd	r4, r8, [r6]
 8000bee:	e7dd      	b.n	8000bac <__udivmoddi4+0xa0>
 8000bf0:	b902      	cbnz	r2, 8000bf4 <__udivmoddi4+0xe8>
 8000bf2:	deff      	udf	#255	; 0xff
 8000bf4:	fab2 f282 	clz	r2, r2
 8000bf8:	2a00      	cmp	r2, #0
 8000bfa:	f040 808f 	bne.w	8000d1c <__udivmoddi4+0x210>
 8000bfe:	1b49      	subs	r1, r1, r5
 8000c00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c04:	fa1f f885 	uxth.w	r8, r5
 8000c08:	2701      	movs	r7, #1
 8000c0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c18:	fb08 f10c 	mul.w	r1, r8, ip
 8000c1c:	4299      	cmp	r1, r3
 8000c1e:	d907      	bls.n	8000c30 <__udivmoddi4+0x124>
 8000c20:	18eb      	adds	r3, r5, r3
 8000c22:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x122>
 8000c28:	4299      	cmp	r1, r3
 8000c2a:	f200 80cd 	bhi.w	8000dc8 <__udivmoddi4+0x2bc>
 8000c2e:	4684      	mov	ip, r0
 8000c30:	1a59      	subs	r1, r3, r1
 8000c32:	b2a3      	uxth	r3, r4
 8000c34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c40:	fb08 f800 	mul.w	r8, r8, r0
 8000c44:	45a0      	cmp	r8, r4
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0x14c>
 8000c48:	192c      	adds	r4, r5, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0x14a>
 8000c50:	45a0      	cmp	r8, r4
 8000c52:	f200 80b6 	bhi.w	8000dc2 <__udivmoddi4+0x2b6>
 8000c56:	4618      	mov	r0, r3
 8000c58:	eba4 0408 	sub.w	r4, r4, r8
 8000c5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c60:	e79f      	b.n	8000ba2 <__udivmoddi4+0x96>
 8000c62:	f1c7 0c20 	rsb	ip, r7, #32
 8000c66:	40bb      	lsls	r3, r7
 8000c68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c70:	fa01 f407 	lsl.w	r4, r1, r7
 8000c74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c80:	4325      	orrs	r5, r4
 8000c82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c86:	0c2c      	lsrs	r4, r5, #16
 8000c88:	fb08 3319 	mls	r3, r8, r9, r3
 8000c8c:	fa1f fa8e 	uxth.w	sl, lr
 8000c90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c94:	fb09 f40a 	mul.w	r4, r9, sl
 8000c98:	429c      	cmp	r4, r3
 8000c9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000ca2:	d90b      	bls.n	8000cbc <__udivmoddi4+0x1b0>
 8000ca4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ca8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000cac:	f080 8087 	bcs.w	8000dbe <__udivmoddi4+0x2b2>
 8000cb0:	429c      	cmp	r4, r3
 8000cb2:	f240 8084 	bls.w	8000dbe <__udivmoddi4+0x2b2>
 8000cb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cba:	4473      	add	r3, lr
 8000cbc:	1b1b      	subs	r3, r3, r4
 8000cbe:	b2ad      	uxth	r5, r5
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ccc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cd0:	45a2      	cmp	sl, r4
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x1da>
 8000cd4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cdc:	d26b      	bcs.n	8000db6 <__udivmoddi4+0x2aa>
 8000cde:	45a2      	cmp	sl, r4
 8000ce0:	d969      	bls.n	8000db6 <__udivmoddi4+0x2aa>
 8000ce2:	3802      	subs	r0, #2
 8000ce4:	4474      	add	r4, lr
 8000ce6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cea:	fba0 8902 	umull	r8, r9, r0, r2
 8000cee:	eba4 040a 	sub.w	r4, r4, sl
 8000cf2:	454c      	cmp	r4, r9
 8000cf4:	46c2      	mov	sl, r8
 8000cf6:	464b      	mov	r3, r9
 8000cf8:	d354      	bcc.n	8000da4 <__udivmoddi4+0x298>
 8000cfa:	d051      	beq.n	8000da0 <__udivmoddi4+0x294>
 8000cfc:	2e00      	cmp	r6, #0
 8000cfe:	d069      	beq.n	8000dd4 <__udivmoddi4+0x2c8>
 8000d00:	ebb1 050a 	subs.w	r5, r1, sl
 8000d04:	eb64 0403 	sbc.w	r4, r4, r3
 8000d08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d0c:	40fd      	lsrs	r5, r7
 8000d0e:	40fc      	lsrs	r4, r7
 8000d10:	ea4c 0505 	orr.w	r5, ip, r5
 8000d14:	e9c6 5400 	strd	r5, r4, [r6]
 8000d18:	2700      	movs	r7, #0
 8000d1a:	e747      	b.n	8000bac <__udivmoddi4+0xa0>
 8000d1c:	f1c2 0320 	rsb	r3, r2, #32
 8000d20:	fa20 f703 	lsr.w	r7, r0, r3
 8000d24:	4095      	lsls	r5, r2
 8000d26:	fa01 f002 	lsl.w	r0, r1, r2
 8000d2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d32:	4338      	orrs	r0, r7
 8000d34:	0c01      	lsrs	r1, r0, #16
 8000d36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d3a:	fa1f f885 	uxth.w	r8, r5
 8000d3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d46:	fb07 f308 	mul.w	r3, r7, r8
 8000d4a:	428b      	cmp	r3, r1
 8000d4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d50:	d907      	bls.n	8000d62 <__udivmoddi4+0x256>
 8000d52:	1869      	adds	r1, r5, r1
 8000d54:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d58:	d22f      	bcs.n	8000dba <__udivmoddi4+0x2ae>
 8000d5a:	428b      	cmp	r3, r1
 8000d5c:	d92d      	bls.n	8000dba <__udivmoddi4+0x2ae>
 8000d5e:	3f02      	subs	r7, #2
 8000d60:	4429      	add	r1, r5
 8000d62:	1acb      	subs	r3, r1, r3
 8000d64:	b281      	uxth	r1, r0
 8000d66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d72:	fb00 f308 	mul.w	r3, r0, r8
 8000d76:	428b      	cmp	r3, r1
 8000d78:	d907      	bls.n	8000d8a <__udivmoddi4+0x27e>
 8000d7a:	1869      	adds	r1, r5, r1
 8000d7c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d80:	d217      	bcs.n	8000db2 <__udivmoddi4+0x2a6>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d915      	bls.n	8000db2 <__udivmoddi4+0x2a6>
 8000d86:	3802      	subs	r0, #2
 8000d88:	4429      	add	r1, r5
 8000d8a:	1ac9      	subs	r1, r1, r3
 8000d8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d90:	e73b      	b.n	8000c0a <__udivmoddi4+0xfe>
 8000d92:	4637      	mov	r7, r6
 8000d94:	4630      	mov	r0, r6
 8000d96:	e709      	b.n	8000bac <__udivmoddi4+0xa0>
 8000d98:	4607      	mov	r7, r0
 8000d9a:	e6e7      	b.n	8000b6c <__udivmoddi4+0x60>
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	e6fb      	b.n	8000b98 <__udivmoddi4+0x8c>
 8000da0:	4541      	cmp	r1, r8
 8000da2:	d2ab      	bcs.n	8000cfc <__udivmoddi4+0x1f0>
 8000da4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000da8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dac:	3801      	subs	r0, #1
 8000dae:	4613      	mov	r3, r2
 8000db0:	e7a4      	b.n	8000cfc <__udivmoddi4+0x1f0>
 8000db2:	4660      	mov	r0, ip
 8000db4:	e7e9      	b.n	8000d8a <__udivmoddi4+0x27e>
 8000db6:	4618      	mov	r0, r3
 8000db8:	e795      	b.n	8000ce6 <__udivmoddi4+0x1da>
 8000dba:	4667      	mov	r7, ip
 8000dbc:	e7d1      	b.n	8000d62 <__udivmoddi4+0x256>
 8000dbe:	4681      	mov	r9, r0
 8000dc0:	e77c      	b.n	8000cbc <__udivmoddi4+0x1b0>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	442c      	add	r4, r5
 8000dc6:	e747      	b.n	8000c58 <__udivmoddi4+0x14c>
 8000dc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dcc:	442b      	add	r3, r5
 8000dce:	e72f      	b.n	8000c30 <__udivmoddi4+0x124>
 8000dd0:	4638      	mov	r0, r7
 8000dd2:	e708      	b.n	8000be6 <__udivmoddi4+0xda>
 8000dd4:	4637      	mov	r7, r6
 8000dd6:	e6e9      	b.n	8000bac <__udivmoddi4+0xa0>

08000dd8 <__aeabi_idiv0>:
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop

08000ddc <audioProcessor>:
uint8_t   row_indices[IQ_BLOCK_SIZE];
uint16_t  row_colors[IQ_BLOCK_SIZE];


void audioProcessor(audio_data_t *src, uint16_t sz)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	807b      	strh	r3, [r7, #2]
	if ( fftTaskToNotify )
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <audioProcessor+0x44>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d012      	beq.n	8000e16 <audioProcessor+0x3a>
	{
		arm_copy_q15(src, fftSamples, sz);
 8000df0:	887b      	ldrh	r3, [r7, #2]
 8000df2:	461a      	mov	r2, r3
 8000df4:	490b      	ldr	r1, [pc, #44]	; (8000e24 <audioProcessor+0x48>)
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f007 fdb8 	bl	800896c <arm_copy_q15>
		BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
		/* Notify the task that the FFT samples are complete. */
		vTaskNotifyGiveFromISR( fftTaskToNotify, &xHigherPriorityTaskWoken );
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <audioProcessor+0x44>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f107 020c 	add.w	r2, r7, #12
 8000e08:	4611      	mov	r1, r2
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f007 f8a2 	bl	8007f54 <vTaskNotifyGiveFromISR>
		fftTaskToNotify = NULL;
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <audioProcessor+0x44>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
	}
}
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20002590 	.word	0x20002590
 8000e24:	2000218c 	.word	0x2000218c

08000e28 <prepareFFTData>:


void prepareFFTData(AudioSample_t * const src, const uint16_t blockSize)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b08a      	sub	sp, #40	; 0x28
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	460b      	mov	r3, r1
 8000e32:	817b      	strh	r3, [r7, #10]
	uint32_t maxIndex;	/* Index in Output array where max value is */
	float32_t maxValue;

	for ( int i = 0; i < IQ_BLOCK_SIZE; i++ )
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
 8000e38:	e01d      	b.n	8000e76 <prepareFFTData+0x4e>
	{
		i_buffer[2 * i + 0] = (float32_t)src[i].l; // real part
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	68fa      	ldr	r2, [r7, #12]
 8000e40:	4413      	add	r3, r2
 8000e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e46:	b21a      	sxth	r2, r3
 8000e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	ee07 2a90 	vmov	s15, r2
 8000e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e54:	4a33      	ldr	r2, [pc, #204]	; (8000f24 <prepareFFTData+0xfc>)
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	edc3 7a00 	vstr	s15, [r3]
		i_buffer[2 * i + 1] = 0; // imaginary part
 8000e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	3301      	adds	r3, #1
 8000e64:	4a2f      	ldr	r2, [pc, #188]	; (8000f24 <prepareFFTData+0xfc>)
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	4413      	add	r3, r2
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
	for ( int i = 0; i < IQ_BLOCK_SIZE; i++ )
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	3301      	adds	r3, #1
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
 8000e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e78:	2bff      	cmp	r3, #255	; 0xff
 8000e7a:	ddde      	ble.n	8000e3a <prepareFFTData+0x12>
	}

    /* Process the data through the CFFT/CIFFT module */
	//arm_cfft_radix4_f32(&S, i_buffer);

	arm_cfft_f32(&arm_cfft_sR_f32_len256, i_buffer, 0, 1);	// Do FFT
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	2200      	movs	r2, #0
 8000e80:	4928      	ldr	r1, [pc, #160]	; (8000f24 <prepareFFTData+0xfc>)
 8000e82:	4829      	ldr	r0, [pc, #164]	; (8000f28 <prepareFFTData+0x100>)
 8000e84:	f008 f94a 	bl	800911c <arm_cfft_f32>

	/* Process the data through the Complex Magniture Module for calculating the magnitude at each bin */
	arm_cmplx_mag_f32(i_buffer, fft_buffer, IQ_BLOCK_SIZE);
 8000e88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e8c:	4927      	ldr	r1, [pc, #156]	; (8000f2c <prepareFFTData+0x104>)
 8000e8e:	4825      	ldr	r0, [pc, #148]	; (8000f24 <prepareFFTData+0xfc>)
 8000e90:	f008 f9be 	bl	8009210 <arm_cmplx_mag_f32>

	/* Calculates maxValue and returns corresponding value */
	arm_max_f32(fft_buffer, IQ_BLOCK_SIZE / 2, &maxValue, &maxIndex);
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	f107 0210 	add.w	r2, r7, #16
 8000e9c:	2180      	movs	r1, #128	; 0x80
 8000e9e:	4823      	ldr	r0, [pc, #140]	; (8000f2c <prepareFFTData+0x104>)
 8000ea0:	f007 fda6 	bl	80089f0 <arm_max_f32>

	for ( int i = 0; i < IQ_BLOCK_SIZE; i++ )
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
 8000ea8:	e035      	b.n	8000f16 <prepareFFTData+0xee>
	{
		float32_t val = (fft_buffer[i] / 150000.0);
 8000eaa:	4a20      	ldr	r2, [pc, #128]	; (8000f2c <prepareFFTData+0x104>)
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	ed93 7a00 	vldr	s14, [r3]
 8000eb6:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8000f30 <prepareFFTData+0x108>
 8000eba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ebe:	edc7 7a07 	vstr	s15, [r7, #28]
		val = (val > 1.0) ? 1.0 : val;  // clip if needed
 8000ec2:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ec6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000eca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed2:	dd02      	ble.n	8000eda <prepareFFTData+0xb2>
 8000ed4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8000ed8:	e000      	b.n	8000edc <prepareFFTData+0xb4>
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	61fb      	str	r3, [r7, #28]
		uint8_t j = val * (NUMBER_WATERFALL_COLOURS - 1);
 8000ede:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ee2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000f34 <prepareFFTData+0x10c>
 8000ee6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000eea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000eee:	edc7 7a01 	vstr	s15, [r7, #4]
 8000ef2:	793b      	ldrb	r3, [r7, #4]
 8000ef4:	76fb      	strb	r3, [r7, #27]
		row_indices[i] = j;//(fft_buffer[i] / maxValue) * (NUMBER_WATERFALL_COLOURS - 1);
 8000ef6:	4a10      	ldr	r2, [pc, #64]	; (8000f38 <prepareFFTData+0x110>)
 8000ef8:	6a3b      	ldr	r3, [r7, #32]
 8000efa:	4413      	add	r3, r2
 8000efc:	7efa      	ldrb	r2, [r7, #27]
 8000efe:	701a      	strb	r2, [r3, #0]
		row_colors[i] = waterfall_rainbow[j];//waterfall_blue[j];
 8000f00:	7efb      	ldrb	r3, [r7, #27]
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <prepareFFTData+0x114>)
 8000f04:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <prepareFFTData+0x118>)
 8000f0a:	6a3b      	ldr	r3, [r7, #32]
 8000f0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for ( int i = 0; i < IQ_BLOCK_SIZE; i++ )
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	3301      	adds	r3, #1
 8000f14:	623b      	str	r3, [r7, #32]
 8000f16:	6a3b      	ldr	r3, [r7, #32]
 8000f18:	2bff      	cmp	r3, #255	; 0xff
 8000f1a:	ddc6      	ble.n	8000eaa <prepareFFTData+0x82>
	}
}
 8000f1c:	bf00      	nop
 8000f1e:	3728      	adds	r7, #40	; 0x28
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20008450 	.word	0x20008450
 8000f28:	0800b9ec 	.word	0x0800b9ec
 8000f2c:	20008050 	.word	0x20008050
 8000f30:	48127c00 	.word	0x48127c00
 8000f34:	427c0000 	.word	0x427c0000
 8000f38:	20007f50 	.word	0x20007f50
 8000f3c:	08009b98 	.word	0x08009b98
 8000f40:	20007550 	.word	0x20007550

08000f44 <DMA2_Stream0_TransferComplete>:




void DMA2_Stream0_TransferComplete(DMA_HandleTypeDef *DmaHandle)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	uint16_t *backBuffer = currentFramebuffer == framebuffer1 ? framebuffer2 : framebuffer1;
 8000f4c:	4b08      	ldr	r3, [pc, #32]	; (8000f70 <DMA2_Stream0_TransferComplete+0x2c>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a08      	ldr	r2, [pc, #32]	; (8000f74 <DMA2_Stream0_TransferComplete+0x30>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <DMA2_Stream0_TransferComplete+0x16>
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <DMA2_Stream0_TransferComplete+0x34>)
 8000f58:	e000      	b.n	8000f5c <DMA2_Stream0_TransferComplete+0x18>
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <DMA2_Stream0_TransferComplete+0x30>)
 8000f5c:	60fb      	str	r3, [r7, #12]
	currentFramebuffer = backBuffer;
 8000f5e:	4a04      	ldr	r2, [pc, #16]	; (8000f70 <DMA2_Stream0_TransferComplete+0x2c>)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr
 8000f70:	2000207c 	.word	0x2000207c
 8000f74:	2000d550 	.word	0x2000d550
 8000f78:	2000a050 	.word	0x2000a050

08000f7c <update>:



void update()
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
	fftTaskToNotify = xTaskGetCurrentTaskHandle();
 8000f82:	f006 ff8f 	bl	8007ea4 <xTaskGetCurrentTaskHandle>
 8000f86:	4602      	mov	r2, r0
 8000f88:	4b52      	ldr	r3, [pc, #328]	; (80010d4 <update+0x158>)
 8000f8a:	601a      	str	r2, [r3, #0]
	uint32_t ulNotificationValue = ulTaskNotifyTake( pdTRUE, pdMS_TO_TICKS( 1 ) );
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	2001      	movs	r0, #1
 8000f90:	f006 ff98 	bl	8007ec4 <ulTaskNotifyTake>
 8000f94:	60b8      	str	r0, [r7, #8]
	if ( ulNotificationValue != 1 ) return;
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	f040 8096 	bne.w	80010ca <update+0x14e>

	prepareFFTData((AudioSample_t*)fftSamples, IQ_BUFSZ);
 8000f9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000fa2:	484d      	ldr	r0, [pc, #308]	; (80010d8 <update+0x15c>)
 8000fa4:	f7ff ff40 	bl	8000e28 <prepareFFTData>
	uint16_t *backBuffer = currentFramebuffer == framebuffer1 ? framebuffer2 : framebuffer1;
 8000fa8:	4b4c      	ldr	r3, [pc, #304]	; (80010dc <update+0x160>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a4c      	ldr	r2, [pc, #304]	; (80010e0 <update+0x164>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <update+0x3a>
 8000fb2:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <update+0x168>)
 8000fb4:	e000      	b.n	8000fb8 <update+0x3c>
 8000fb6:	4b4a      	ldr	r3, [pc, #296]	; (80010e0 <update+0x164>)
 8000fb8:	607b      	str	r3, [r7, #4]
//		}
//		backBuffer[i] = color;
//	}

//	// zoom
	for ( int i = 0; i < WATERFALL_WIDTH / 4; i++ )
 8000fba:	2300      	movs	r3, #0
 8000fbc:	617b      	str	r3, [r7, #20]
 8000fbe:	e020      	b.n	8001002 <update+0x86>
	{
		backBuffer[i * 4 + 0] = row_colors[i];
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4947      	ldr	r1, [pc, #284]	; (80010e8 <update+0x16c>)
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000fd2:	801a      	strh	r2, [r3, #0]
		backBuffer[i * 4 + 1] = row_colors[i];
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	3302      	adds	r3, #2
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	4413      	add	r3, r2
 8000fde:	4942      	ldr	r1, [pc, #264]	; (80010e8 <update+0x16c>)
 8000fe0:	697a      	ldr	r2, [r7, #20]
 8000fe2:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000fe6:	801a      	strh	r2, [r3, #0]
		backBuffer[i * 4 + 2] = row_colors[i];
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	00db      	lsls	r3, r3, #3
 8000fec:	3304      	adds	r3, #4
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	4413      	add	r3, r2
 8000ff2:	493d      	ldr	r1, [pc, #244]	; (80010e8 <update+0x16c>)
 8000ff4:	697a      	ldr	r2, [r7, #20]
 8000ff6:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8000ffa:	801a      	strh	r2, [r3, #0]
	for ( int i = 0; i < WATERFALL_WIDTH / 4; i++ )
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2b1f      	cmp	r3, #31
 8001006:	dddb      	ble.n	8000fc0 <update+0x44>
	}

	HAL_DMA_Start_IT(&hdma_memtomem_dma2_stream0, (uint32_t)currentFramebuffer, (uint32_t)&backBuffer[WATERFALL_WIDTH], WATERFALL_WIDTH * (WATERFALL_HEIGHT - 1));
 8001008:	4b34      	ldr	r3, [pc, #208]	; (80010dc <update+0x160>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001014:	461a      	mov	r2, r3
 8001016:	f44f 53d0 	mov.w	r3, #6656	; 0x1a00
 800101a:	4834      	ldr	r0, [pc, #208]	; (80010ec <update+0x170>)
 800101c:	f002 fce6 	bl	80039ec <HAL_DMA_Start_IT>

	arm_copy_q7((q7_t *)row_indices, (q7_t *)localRowIndices, IQ_BLOCK_SIZE);
 8001020:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001024:	4932      	ldr	r1, [pc, #200]	; (80010f0 <update+0x174>)
 8001026:	4833      	ldr	r0, [pc, #204]	; (80010f4 <update+0x178>)
 8001028:	f007 fcc6 	bl	80089b8 <arm_copy_q7>
//		{
//			row_bars[ j * WATERFALL_WIDTH + i ] = (BAR_HEIGHT - len - j) < 0 ? LCD_COLOR_WHITE : 0x0;
//		}
//	}

	for ( int i = 0; i < WATERFALL_WIDTH / 4; i++ )
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	e038      	b.n	80010a4 <update+0x128>
	{
		uint8_t len = (localRowIndices[i] >> 2);
 8001032:	4a2f      	ldr	r2, [pc, #188]	; (80010f0 <update+0x174>)
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	4413      	add	r3, r2
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	089b      	lsrs	r3, r3, #2
 800103c:	70fb      	strb	r3, [r7, #3]
		for ( int j = 0; j < BAR_HEIGHT; j++ )
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	e029      	b.n	8001098 <update+0x11c>
		{
			row_bars[ j * WATERFALL_WIDTH + i * 4 + 0 ] = (BAR_HEIGHT - len - j) < 0 ? LCD_COLOR_WHITE : 0x0;
 8001044:	78fb      	ldrb	r3, [r7, #3]
 8001046:	f1c3 0214 	rsb	r2, r3, #20
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	da02      	bge.n	8001058 <update+0xdc>
 8001052:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001056:	e000      	b.n	800105a <update+0xde>
 8001058:	2100      	movs	r1, #0
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	015a      	lsls	r2, r3, #5
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	4413      	add	r3, r2
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	4a24      	ldr	r2, [pc, #144]	; (80010f8 <update+0x17c>)
 8001066:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			row_bars[ j * WATERFALL_WIDTH + i * 4 + 1 ] = (BAR_HEIGHT - len - j) < 0 ? LCD_COLOR_WHITE : 0x0;
 800106a:	78fb      	ldrb	r3, [r7, #3]
 800106c:	f1c3 0214 	rsb	r2, r3, #20
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	2b00      	cmp	r3, #0
 8001076:	da02      	bge.n	800107e <update+0x102>
 8001078:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800107c:	e000      	b.n	8001080 <update+0x104>
 800107e:	2100      	movs	r1, #0
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	015a      	lsls	r2, r3, #5
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	4413      	add	r3, r2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	3301      	adds	r3, #1
 800108c:	4a1a      	ldr	r2, [pc, #104]	; (80010f8 <update+0x17c>)
 800108e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for ( int j = 0; j < BAR_HEIGHT; j++ )
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	3301      	adds	r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	2b13      	cmp	r3, #19
 800109c:	ddd2      	ble.n	8001044 <update+0xc8>
	for ( int i = 0; i < WATERFALL_WIDTH / 4; i++ )
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	3301      	adds	r3, #1
 80010a2:	613b      	str	r3, [r7, #16]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	2b1f      	cmp	r3, #31
 80010a8:	ddc3      	ble.n	8001032 <update+0xb6>
		}
	}


	while (currentFramebuffer != backBuffer) osDelay(1);
 80010aa:	e002      	b.n	80010b2 <update+0x136>
 80010ac:	2001      	movs	r0, #1
 80010ae:	f006 f982 	bl	80073b6 <osDelay>
 80010b2:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <update+0x160>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	429a      	cmp	r2, r3
 80010ba:	d1f7      	bne.n	80010ac <update+0x130>
	renderingRequested = 1;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	; (80010fc <update+0x180>)
 80010be:	2201      	movs	r2, #1
 80010c0:	701a      	strb	r2, [r3, #0]
    osDelay(10);
 80010c2:	200a      	movs	r0, #10
 80010c4:	f006 f977 	bl	80073b6 <osDelay>
 80010c8:	e000      	b.n	80010cc <update+0x150>
	if ( ulNotificationValue != 1 ) return;
 80010ca:	bf00      	nop
}
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20002590 	.word	0x20002590
 80010d8:	2000218c 	.word	0x2000218c
 80010dc:	2000207c 	.word	0x2000207c
 80010e0:	2000d550 	.word	0x2000d550
 80010e4:	2000a050 	.word	0x2000a050
 80010e8:	20007550 	.word	0x20007550
 80010ec:	20010bb8 	.word	0x20010bb8
 80010f0:	20010a50 	.word	0x20010a50
 80010f4:	20007f50 	.word	0x20007f50
 80010f8:	20008c50 	.word	0x20008c50
 80010fc:	2000258c 	.word	0x2000258c

08001100 <render>:


void render()
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af02      	add	r7, sp, #8
    BSP_LCD_FillBuffer( F_OFFS_X + DW * 0, F_OFFS_Y, DW, DH, (uint8_t*) dig[10]);
 8001106:	4b31      	ldr	r3, [pc, #196]	; (80011cc <render+0xcc>)
 8001108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110a:	9300      	str	r3, [sp, #0]
 800110c:	2319      	movs	r3, #25
 800110e:	220f      	movs	r2, #15
 8001110:	2105      	movs	r1, #5
 8001112:	2023      	movs	r0, #35	; 0x23
 8001114:	f001 fa48 	bl	80025a8 <BSP_LCD_FillBuffer>
    BSP_LCD_FillBuffer( F_OFFS_X + DW * 1, F_OFFS_Y, DW, DH, (uint8_t*) dig[1]);
 8001118:	4b2c      	ldr	r3, [pc, #176]	; (80011cc <render+0xcc>)
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	9300      	str	r3, [sp, #0]
 800111e:	2319      	movs	r3, #25
 8001120:	220f      	movs	r2, #15
 8001122:	2105      	movs	r1, #5
 8001124:	2032      	movs	r0, #50	; 0x32
 8001126:	f001 fa3f 	bl	80025a8 <BSP_LCD_FillBuffer>
    BSP_LCD_FillBuffer( F_OFFS_X + DW * 2, F_OFFS_Y, DW, DH, (uint8_t*) dig[2]);
 800112a:	4b28      	ldr	r3, [pc, #160]	; (80011cc <render+0xcc>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	9300      	str	r3, [sp, #0]
 8001130:	2319      	movs	r3, #25
 8001132:	220f      	movs	r2, #15
 8001134:	2105      	movs	r1, #5
 8001136:	2041      	movs	r0, #65	; 0x41
 8001138:	f001 fa36 	bl	80025a8 <BSP_LCD_FillBuffer>
    BSP_LCD_FillBuffer( F_OFFS_X + DW * 3, F_OFFS_Y, DW, DH, (uint8_t*) dig[3]);
 800113c:	4b23      	ldr	r3, [pc, #140]	; (80011cc <render+0xcc>)
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2319      	movs	r3, #25
 8001144:	220f      	movs	r2, #15
 8001146:	2105      	movs	r1, #5
 8001148:	2050      	movs	r0, #80	; 0x50
 800114a:	f001 fa2d 	bl	80025a8 <BSP_LCD_FillBuffer>
    BSP_LCD_FillBuffer( F_OFFS_X + DW * 4, F_OFFS_Y, DW, DH, (uint8_t*) dig[4]);
 800114e:	4b1f      	ldr	r3, [pc, #124]	; (80011cc <render+0xcc>)
 8001150:	691b      	ldr	r3, [r3, #16]
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2319      	movs	r3, #25
 8001156:	220f      	movs	r2, #15
 8001158:	2105      	movs	r1, #5
 800115a:	205f      	movs	r0, #95	; 0x5f
 800115c:	f001 fa24 	bl	80025a8 <BSP_LCD_FillBuffer>
    BSP_LCD_FillBuffer( F_OFFS_X + DW * 5, F_OFFS_Y, DW, DH, (uint8_t*) dig[5]);
 8001160:	4b1a      	ldr	r3, [pc, #104]	; (80011cc <render+0xcc>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	2319      	movs	r3, #25
 8001168:	220f      	movs	r2, #15
 800116a:	2105      	movs	r1, #5
 800116c:	206e      	movs	r0, #110	; 0x6e
 800116e:	f001 fa1b 	bl	80025a8 <BSP_LCD_FillBuffer>
    BSP_LCD_FillBuffer( F_OFFS_X + DW * 6, F_OFFS_Y, DW, DH, (uint8_t*) dig[6]);
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <render+0xcc>)
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2319      	movs	r3, #25
 800117a:	220f      	movs	r2, #15
 800117c:	2105      	movs	r1, #5
 800117e:	207d      	movs	r0, #125	; 0x7d
 8001180:	f001 fa12 	bl	80025a8 <BSP_LCD_FillBuffer>
    BSP_LCD_FillBuffer( F_OFFS_X + DW * 7, F_OFFS_Y, DW, DH, (uint8_t*) dig[0]);
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <render+0xcc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2319      	movs	r3, #25
 800118c:	220f      	movs	r2, #15
 800118e:	2105      	movs	r1, #5
 8001190:	208c      	movs	r0, #140	; 0x8c
 8001192:	f001 fa09 	bl	80025a8 <BSP_LCD_FillBuffer>

    if ( renderingRequested )
 8001196:	4b0e      	ldr	r3, [pc, #56]	; (80011d0 <render+0xd0>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d013      	beq.n	80011c6 <render+0xc6>
    {
    	BSP_LCD_FillBuffer(4, 47, WATERFALL_WIDTH, BAR_HEIGHT, (uint8_t*) row_bars);
 800119e:	4b0d      	ldr	r3, [pc, #52]	; (80011d4 <render+0xd4>)
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2314      	movs	r3, #20
 80011a4:	2280      	movs	r2, #128	; 0x80
 80011a6:	212f      	movs	r1, #47	; 0x2f
 80011a8:	2004      	movs	r0, #4
 80011aa:	f001 f9fd 	bl	80025a8 <BSP_LCD_FillBuffer>
    	BSP_LCD_FillBuffer(4, 70, WATERFALL_WIDTH, WATERFALL_HEIGHT, (uint8_t*) currentFramebuffer);
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <render+0xd8>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2335      	movs	r3, #53	; 0x35
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	2146      	movs	r1, #70	; 0x46
 80011ba:	2004      	movs	r0, #4
 80011bc:	f001 f9f4 	bl	80025a8 <BSP_LCD_FillBuffer>
    	renderingRequested = 0;
 80011c0:	4b03      	ldr	r3, [pc, #12]	; (80011d0 <render+0xd0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	701a      	strb	r2, [r3, #0]
    }
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20002050 	.word	0x20002050
 80011d0:	2000258c 	.word	0x2000258c
 80011d4:	20008c50 	.word	0x20008c50
 80011d8:	2000207c 	.word	0x2000207c

080011dc <init>:


void init()
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	W25qxx_Init();
 80011e0:	f002 f91e 	bl	8003420 <W25qxx_Init>

	renderingRequested = 0;
 80011e4:	4b0f      	ldr	r3, [pc, #60]	; (8001224 <init+0x48>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	701a      	strb	r2, [r3, #0]

	BSP_LCD_Init();
 80011ea:	f001 f88d 	bl	8002308 <BSP_LCD_Init>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f001 f8f6 	bl	80023e0 <BSP_LCD_Clear>
    BSP_LCD_SetFont(&Font24);
 80011f4:	480c      	ldr	r0, [pc, #48]	; (8001228 <init+0x4c>)
 80011f6:	f001 f8e3 	bl	80023c0 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80011fa:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80011fe:	f001 f8bf 	bl	8002380 <BSP_LCD_SetTextColor>
    BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8001202:	2000      	movs	r0, #0
 8001204:	f001 f8cc 	bl	80023a0 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001208:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800120c:	f001 f8b8 	bl	8002380 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect(3, 69, WATERFALL_WIDTH+2, WATERFALL_HEIGHT+2);
 8001210:	2337      	movs	r3, #55	; 0x37
 8001212:	2282      	movs	r2, #130	; 0x82
 8001214:	2145      	movs	r1, #69	; 0x45
 8001216:	2003      	movs	r0, #3
 8001218:	f001 f990 	bl	800253c <BSP_LCD_DrawRect>

    wm8731_init();
 800121c:	f000 f836 	bl	800128c <wm8731_init>
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	2000258c 	.word	0x2000258c
 8001228:	200020a4 	.word	0x200020a4

0800122c <HAL_I2SEx_TxRxCpltCallback>:
static uint8_t aaccData[1] = {0b00000001};



void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
	arm_copy_q15(&RX_BUFFER[IQ_BUFSZ], &TX_BUFFER[0], IQ_BUFSZ);
 8001234:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001238:	4906      	ldr	r1, [pc, #24]	; (8001254 <HAL_I2SEx_TxRxCpltCallback+0x28>)
 800123a:	4807      	ldr	r0, [pc, #28]	; (8001258 <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 800123c:	f007 fb96 	bl	800896c <arm_copy_q15>
	audioProcessor(&RX_BUFFER[IQ_BUFSZ], IQ_BUFSZ);
 8001240:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001244:	4804      	ldr	r0, [pc, #16]	; (8001258 <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 8001246:	f7ff fdc9 	bl	8000ddc <audioProcessor>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20002d94 	.word	0x20002d94
 8001258:	20002994 	.word	0x20002994

0800125c <HAL_I2SEx_TxRxHalfCpltCallback>:


void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	arm_copy_q15(&RX_BUFFER[0], &TX_BUFFER[IQ_BUFSZ], IQ_BUFSZ);
 8001264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001268:	4906      	ldr	r1, [pc, #24]	; (8001284 <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 800126a:	4807      	ldr	r0, [pc, #28]	; (8001288 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 800126c:	f007 fb7e 	bl	800896c <arm_copy_q15>
	audioProcessor(&RX_BUFFER[0], IQ_BUFSZ);
 8001270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001274:	4804      	ldr	r0, [pc, #16]	; (8001288 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 8001276:	f7ff fdb1 	bl	8000ddc <audioProcessor>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20003194 	.word	0x20003194
 8001288:	20002594 	.word	0x20002594

0800128c <wm8731_init>:


void wm8731_init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af04      	add	r7, sp, #16
	// reset
	HAL_I2C_Mem_Write(&hi2c1, DevAddr, resetAddr, 1, (uint8_t*)resetData, 1, 1000);
 8001292:	4b74      	ldr	r3, [pc, #464]	; (8001464 <wm8731_init+0x1d8>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b299      	uxth	r1, r3
 8001298:	4b73      	ldr	r3, [pc, #460]	; (8001468 <wm8731_init+0x1dc>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	b29a      	uxth	r2, r3
 800129e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012a2:	9302      	str	r3, [sp, #8]
 80012a4:	2301      	movs	r3, #1
 80012a6:	9301      	str	r3, [sp, #4]
 80012a8:	4b70      	ldr	r3, [pc, #448]	; (800146c <wm8731_init+0x1e0>)
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	4870      	ldr	r0, [pc, #448]	; (8001470 <wm8731_init+0x1e4>)
 80012b0:	f003 f984 	bl	80045bc <HAL_I2C_Mem_Write>

	// power reduction register
	// turn everything on
	HAL_I2C_Mem_Write(&hi2c1, DevAddr, pdccAddr, 1, (uint8_t*)pdccData, 1, 1000);
 80012b4:	4b6b      	ldr	r3, [pc, #428]	; (8001464 <wm8731_init+0x1d8>)
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	b299      	uxth	r1, r3
 80012ba:	4b6e      	ldr	r3, [pc, #440]	; (8001474 <wm8731_init+0x1e8>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	b29a      	uxth	r2, r3
 80012c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012c4:	9302      	str	r3, [sp, #8]
 80012c6:	2301      	movs	r3, #1
 80012c8:	9301      	str	r3, [sp, #4]
 80012ca:	4b6b      	ldr	r3, [pc, #428]	; (8001478 <wm8731_init+0x1ec>)
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2301      	movs	r3, #1
 80012d0:	4867      	ldr	r0, [pc, #412]	; (8001470 <wm8731_init+0x1e4>)
 80012d2:	f003 f973 	bl	80045bc <HAL_I2C_Mem_Write>

	// Digital Audio Interface Format
	// 48kHz 16bit I2S Master Mode
	HAL_I2C_Mem_Write(&hi2c1,DevAddr, daifAddr, 1, (uint8_t*)daifData, 1, 1000);
 80012d6:	4b63      	ldr	r3, [pc, #396]	; (8001464 <wm8731_init+0x1d8>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	b299      	uxth	r1, r3
 80012dc:	4b67      	ldr	r3, [pc, #412]	; (800147c <wm8731_init+0x1f0>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	b29a      	uxth	r2, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	2301      	movs	r3, #1
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	4b64      	ldr	r3, [pc, #400]	; (8001480 <wm8731_init+0x1f4>)
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	485f      	ldr	r0, [pc, #380]	; (8001470 <wm8731_init+0x1e4>)
 80012f4:	f003 f962 	bl	80045bc <HAL_I2C_Mem_Write>

	// left in setup register
	linVolData[0] = 40;
 80012f8:	4b62      	ldr	r3, [pc, #392]	; (8001484 <wm8731_init+0x1f8>)
 80012fa:	2228      	movs	r2, #40	; 0x28
 80012fc:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,DevAddr, linVolAddr, 1, (uint8_t*)linVolData, 1, 1000);
 80012fe:	4b59      	ldr	r3, [pc, #356]	; (8001464 <wm8731_init+0x1d8>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	b299      	uxth	r1, r3
 8001304:	4b60      	ldr	r3, [pc, #384]	; (8001488 <wm8731_init+0x1fc>)
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	b29a      	uxth	r2, r3
 800130a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	2301      	movs	r3, #1
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <wm8731_init+0x1f8>)
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2301      	movs	r3, #1
 800131a:	4855      	ldr	r0, [pc, #340]	; (8001470 <wm8731_init+0x1e4>)
 800131c:	f003 f94e 	bl	80045bc <HAL_I2C_Mem_Write>

	// right in setup register
	rinVolData[0] = 40;
 8001320:	4b5a      	ldr	r3, [pc, #360]	; (800148c <wm8731_init+0x200>)
 8001322:	2228      	movs	r2, #40	; 0x28
 8001324:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,DevAddr, rinVolAddr, 1, (uint8_t*)rinVolData, 1, 1000);
 8001326:	4b4f      	ldr	r3, [pc, #316]	; (8001464 <wm8731_init+0x1d8>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	b299      	uxth	r1, r3
 800132c:	4b58      	ldr	r3, [pc, #352]	; (8001490 <wm8731_init+0x204>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	b29a      	uxth	r2, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	4b53      	ldr	r3, [pc, #332]	; (800148c <wm8731_init+0x200>)
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	484b      	ldr	r0, [pc, #300]	; (8001470 <wm8731_init+0x1e4>)
 8001344:	f003 f93a 	bl	80045bc <HAL_I2C_Mem_Write>

	// left headphone setup register
	lhpVolData[0] = 120;
 8001348:	4b52      	ldr	r3, [pc, #328]	; (8001494 <wm8731_init+0x208>)
 800134a:	2278      	movs	r2, #120	; 0x78
 800134c:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,DevAddr, lhpVolAddr, 1, (uint8_t*)lhpVolData, 1, 1000);
 800134e:	4b45      	ldr	r3, [pc, #276]	; (8001464 <wm8731_init+0x1d8>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b299      	uxth	r1, r3
 8001354:	4b50      	ldr	r3, [pc, #320]	; (8001498 <wm8731_init+0x20c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	b29a      	uxth	r2, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	9302      	str	r3, [sp, #8]
 8001360:	2301      	movs	r3, #1
 8001362:	9301      	str	r3, [sp, #4]
 8001364:	4b4b      	ldr	r3, [pc, #300]	; (8001494 <wm8731_init+0x208>)
 8001366:	9300      	str	r3, [sp, #0]
 8001368:	2301      	movs	r3, #1
 800136a:	4841      	ldr	r0, [pc, #260]	; (8001470 <wm8731_init+0x1e4>)
 800136c:	f003 f926 	bl	80045bc <HAL_I2C_Mem_Write>

	// right headphone setup register
	rhpVolData[0] = 120;
 8001370:	4b4a      	ldr	r3, [pc, #296]	; (800149c <wm8731_init+0x210>)
 8001372:	2278      	movs	r2, #120	; 0x78
 8001374:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,DevAddr, rhpVolAddr, 1, (uint8_t*)rhpVolData, 1, 1000);
 8001376:	4b3b      	ldr	r3, [pc, #236]	; (8001464 <wm8731_init+0x1d8>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	b299      	uxth	r1, r3
 800137c:	4b48      	ldr	r3, [pc, #288]	; (80014a0 <wm8731_init+0x214>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b29a      	uxth	r2, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001386:	9302      	str	r3, [sp, #8]
 8001388:	2301      	movs	r3, #1
 800138a:	9301      	str	r3, [sp, #4]
 800138c:	4b43      	ldr	r3, [pc, #268]	; (800149c <wm8731_init+0x210>)
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2301      	movs	r3, #1
 8001392:	4837      	ldr	r0, [pc, #220]	; (8001470 <wm8731_init+0x1e4>)
 8001394:	f003 f912 	bl	80045bc <HAL_I2C_Mem_Write>

	// digital audio path configuration
	//dapcData[0] = ADCHPD;
	HAL_I2C_Mem_Write(&hi2c1, DevAddr, dapcAddr, 1, (uint8_t*)dapcData, 1, 1000);
 8001398:	4b32      	ldr	r3, [pc, #200]	; (8001464 <wm8731_init+0x1d8>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b299      	uxth	r1, r3
 800139e:	4b41      	ldr	r3, [pc, #260]	; (80014a4 <wm8731_init+0x218>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	b29a      	uxth	r2, r3
 80013a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	2301      	movs	r3, #1
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <wm8731_init+0x21c>)
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2301      	movs	r3, #1
 80013b4:	482e      	ldr	r0, [pc, #184]	; (8001470 <wm8731_init+0x1e4>)
 80013b6:	f003 f901 	bl	80045bc <HAL_I2C_Mem_Write>

	// analog audio path configuration
	//aapcData[0] = (uint8_t)((SIDEATT << 6)|(SIDETONE << 5)|(DACSEL << 4)|(BYPASS << 3)|(INSEL << 2)|(MUTEMIC << 1)|(MICBOOST << 0));
	HAL_I2C_Mem_Write(&hi2c1, DevAddr, aapcAddr, 1, (uint8_t*)aapcData, 1, 1000);
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <wm8731_init+0x1d8>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	b299      	uxth	r1, r3
 80013c0:	4b3a      	ldr	r3, [pc, #232]	; (80014ac <wm8731_init+0x220>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	2301      	movs	r3, #1
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	4b37      	ldr	r3, [pc, #220]	; (80014b0 <wm8731_init+0x224>)
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2301      	movs	r3, #1
 80013d6:	4826      	ldr	r0, [pc, #152]	; (8001470 <wm8731_init+0x1e4>)
 80013d8:	f003 f8f0 	bl	80045bc <HAL_I2C_Mem_Write>

	// sampling
	HAL_I2C_Mem_Write(&hi2c1, DevAddr, sampAddr, 1, (uint8_t*)sampData, 1, 1000);
 80013dc:	4b21      	ldr	r3, [pc, #132]	; (8001464 <wm8731_init+0x1d8>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	b299      	uxth	r1, r3
 80013e2:	4b34      	ldr	r3, [pc, #208]	; (80014b4 <wm8731_init+0x228>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ec:	9302      	str	r3, [sp, #8]
 80013ee:	2301      	movs	r3, #1
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	4b31      	ldr	r3, [pc, #196]	; (80014b8 <wm8731_init+0x22c>)
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	2301      	movs	r3, #1
 80013f8:	481d      	ldr	r0, [pc, #116]	; (8001470 <wm8731_init+0x1e4>)
 80013fa:	f003 f8df 	bl	80045bc <HAL_I2C_Mem_Write>

	// LININ, CLKOUT power down
	pdccData[0] = 0x41;
 80013fe:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <wm8731_init+0x1ec>)
 8001400:	2241      	movs	r2, #65	; 0x41
 8001402:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, DevAddr, pdccAddr, 1, (uint8_t*)pdccData, 1, 1000);
 8001404:	4b17      	ldr	r3, [pc, #92]	; (8001464 <wm8731_init+0x1d8>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	b299      	uxth	r1, r3
 800140a:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <wm8731_init+0x1e8>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	b29a      	uxth	r2, r3
 8001410:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2301      	movs	r3, #1
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <wm8731_init+0x1ec>)
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2301      	movs	r3, #1
 8001420:	4813      	ldr	r0, [pc, #76]	; (8001470 <wm8731_init+0x1e4>)
 8001422:	f003 f8cb 	bl	80045bc <HAL_I2C_Mem_Write>

	// codec enable
	HAL_I2C_Mem_Write(&hi2c1, DevAddr, aaccAddr, 1, (uint8_t*)aaccData, 1, 1000);
 8001426:	4b0f      	ldr	r3, [pc, #60]	; (8001464 <wm8731_init+0x1d8>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	b299      	uxth	r1, r3
 800142c:	4b23      	ldr	r3, [pc, #140]	; (80014bc <wm8731_init+0x230>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	b29a      	uxth	r2, r3
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	9302      	str	r3, [sp, #8]
 8001438:	2301      	movs	r3, #1
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <wm8731_init+0x234>)
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2301      	movs	r3, #1
 8001442:	480b      	ldr	r0, [pc, #44]	; (8001470 <wm8731_init+0x1e4>)
 8001444:	f003 f8ba 	bl	80045bc <HAL_I2C_Mem_Write>

    osDelay(1);
 8001448:	2001      	movs	r0, #1
 800144a:	f005 ffb4 	bl	80073b6 <osDelay>
	HAL_I2SEx_TransmitReceive_DMA(&hi2s3, (uint16_t*)TX_BUFFER, (uint16_t*)RX_BUFFER, BUFF_LEN);
 800144e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001452:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <wm8731_init+0x238>)
 8001454:	491c      	ldr	r1, [pc, #112]	; (80014c8 <wm8731_init+0x23c>)
 8001456:	481d      	ldr	r0, [pc, #116]	; (80014cc <wm8731_init+0x240>)
 8001458:	f003 fe0c 	bl	8005074 <HAL_I2SEx_TransmitReceive_DMA>
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20002080 	.word	0x20002080
 8001468:	20002081 	.word	0x20002081
 800146c:	20003594 	.word	0x20003594
 8001470:	20010c58 	.word	0x20010c58
 8001474:	20002082 	.word	0x20002082
 8001478:	20003598 	.word	0x20003598
 800147c:	20002083 	.word	0x20002083
 8001480:	20002084 	.word	0x20002084
 8001484:	20002088 	.word	0x20002088
 8001488:	20003599 	.word	0x20003599
 800148c:	2000208c 	.word	0x2000208c
 8001490:	20002089 	.word	0x20002089
 8001494:	20002090 	.word	0x20002090
 8001498:	2000208d 	.word	0x2000208d
 800149c:	20002094 	.word	0x20002094
 80014a0:	20002091 	.word	0x20002091
 80014a4:	2000209d 	.word	0x2000209d
 80014a8:	2000359c 	.word	0x2000359c
 80014ac:	20002099 	.word	0x20002099
 80014b0:	2000209c 	.word	0x2000209c
 80014b4:	20002095 	.word	0x20002095
 80014b8:	20002098 	.word	0x20002098
 80014bc:	2000209e 	.word	0x2000209e
 80014c0:	200020a0 	.word	0x200020a0
 80014c4:	20002594 	.word	0x20002594
 80014c8:	20002d94 	.word	0x20002d94
 80014cc:	20010e48 	.word	0x20010e48

080014d0 <LcdWrite8>:
#endif

//-----------------------------------------------------------------------------
extern inline void LcdWrite8(uint8_t d8);
inline void LcdWrite8(uint8_t d8)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  SPIX->DR = d8;
 80014da:	4a07      	ldr	r2, [pc, #28]	; (80014f8 <LcdWrite8+0x28>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 80014e0:	2002      	movs	r0, #2
 80014e2:	f000 f997 	bl	8001814 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 80014e6:	bf00      	nop
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <LcdWrite8+0x2c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1fb      	bne.n	80014e8 <LcdWrite8+0x18>
}
 80014f0:	bf00      	nop
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40003800 	.word	0x40003800
 80014fc:	4207011c 	.word	0x4207011c

08001500 <LcdCmdWrite8>:
}

//-----------------------------------------------------------------------------
extern inline void LcdCmdWrite8(uint8_t cmd8);
inline void LcdCmdWrite8(uint8_t cmd8)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  LCD_RS_CMD;
 800150a:	4b0a      	ldr	r3, [pc, #40]	; (8001534 <LcdCmdWrite8+0x34>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]
  SPIX->DR = cmd8;
 8001510:	4a09      	ldr	r2, [pc, #36]	; (8001538 <LcdCmdWrite8+0x38>)
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	60d3      	str	r3, [r2, #12]
  LCD_IO_Delay(2);
 8001516:	2002      	movs	r0, #2
 8001518:	f000 f97c 	bl	8001814 <LCD_IO_Delay>
  while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 800151c:	bf00      	nop
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <LcdCmdWrite8+0x3c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1fb      	bne.n	800151e <LcdCmdWrite8+0x1e>
  LCD_RS_DATA;
 8001526:	4b03      	ldr	r3, [pc, #12]	; (8001534 <LcdCmdWrite8+0x34>)
 8001528:	2201      	movs	r2, #1
 800152a:	601a      	str	r2, [r3, #0]
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	424082b8 	.word	0x424082b8
 8001538:	40003800 	.word	0x40003800
 800153c:	4207011c 	.word	0x4207011c

08001540 <WaitForDmaEnd>:
#ifndef osFeature_Semaphore
/* no FreeRtos */

extern inline void WaitForDmaEnd(void);
inline void WaitForDmaEnd(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  while(LCD_IO_DmaTransferStatus);
 8001544:	bf00      	nop
 8001546:	4b04      	ldr	r3, [pc, #16]	; (8001558 <WaitForDmaEnd+0x18>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1fb      	bne.n	8001546 <WaitForDmaEnd+0x6>
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr
 8001558:	200035a0 	.word	0x200035a0

0800155c <DMA1_Stream4_IRQHandler>:
                          DMAX_IFCR_CDMEIF(LCD_DMA_TX) | \
                          DMAX_IFCR_CFEIF(LCD_DMA_TX)  ; }

//-----------------------------------------------------------------------------
void DMAX_STREAMX_IRQHANDLER(LCD_DMA_TX)(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  if(DMAX_ISR(LCD_DMA_TX) & DMAX_ISR_TCIF(LCD_DMA_TX))
 8001560:	4b1c      	ldr	r3, [pc, #112]	; (80015d4 <DMA1_Stream4_IRQHandler+0x78>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0320 	and.w	r3, r3, #32
 8001568:	2b00      	cmp	r3, #0
 800156a:	d02e      	beq.n	80015ca <DMA1_Stream4_IRQHandler+0x6e>
  {
    DMAX_IFCR(LCD_DMA_TX) = DMAX_IFCR_CTCIF(LCD_DMA_TX);
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <DMA1_Stream4_IRQHandler+0x78>)
 800156e:	2220      	movs	r2, #32
 8001570:	60da      	str	r2, [r3, #12]
    DMAX_STREAMX(LCD_DMA_TX)->CR = 0;
 8001572:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <DMA1_Stream4_IRQHandler+0x7c>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
    while(DMAX_STREAMX(LCD_DMA_TX)->CR & DMA_SxCR_EN);
 8001578:	bf00      	nop
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <DMA1_Stream4_IRQHandler+0x7c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1f9      	bne.n	800157a <DMA1_Stream4_IRQHandler+0x1e>
    BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 0;
 8001586:	4b15      	ldr	r3, [pc, #84]	; (80015dc <DMA1_Stream4_IRQHandler+0x80>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
    while(BITBAND_ACCESS(SPIX->SR, SPI_SR_BSY_Pos));
 800158c:	bf00      	nop
 800158e:	4b14      	ldr	r3, [pc, #80]	; (80015e0 <DMA1_Stream4_IRQHandler+0x84>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1fb      	bne.n	800158e <DMA1_Stream4_IRQHandler+0x32>
    SPIX->CR1 &= ~SPI_CR1_SPE;
 8001596:	4b13      	ldr	r3, [pc, #76]	; (80015e4 <DMA1_Stream4_IRQHandler+0x88>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a12      	ldr	r2, [pc, #72]	; (80015e4 <DMA1_Stream4_IRQHandler+0x88>)
 800159c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015a0:	6013      	str	r3, [r2, #0]
    LCD_IO_Delay(2 ^ LCD_SPI_SPD_WRITE);
 80015a2:	2002      	movs	r0, #2
 80015a4:	f000 f936 	bl	8001814 <LCD_IO_Delay>
    SPIX->CR1 |= SPI_CR1_SPE;
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <DMA1_Stream4_IRQHandler+0x88>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <DMA1_Stream4_IRQHandler+0x88>)
 80015ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015b2:	6013      	str	r3, [r2, #0]

    if(LCD_IO_DmaTransferStatus == 1) /* last transfer end ? */
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <DMA1_Stream4_IRQHandler+0x8c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d102      	bne.n	80015c2 <DMA1_Stream4_IRQHandler+0x66>
      LCD_CS_OFF;
 80015bc:	4b0b      	ldr	r3, [pc, #44]	; (80015ec <DMA1_Stream4_IRQHandler+0x90>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]

    #ifndef osFeature_Semaphore
    /* no FreeRtos */
    LCD_IO_DmaTransferStatus = 0;
 80015c2:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <DMA1_Stream4_IRQHandler+0x8c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
    osSemaphoreRelease(spiDmaBinSemHandle);
    #endif // #else osFeature_Semaphore
  }
  else
    DMAX_IFCRALL_LCD_DMA_TX;
}
 80015c8:	e002      	b.n	80015d0 <DMA1_Stream4_IRQHandler+0x74>
    DMAX_IFCRALL_LCD_DMA_TX;
 80015ca:	4b02      	ldr	r3, [pc, #8]	; (80015d4 <DMA1_Stream4_IRQHandler+0x78>)
 80015cc:	223d      	movs	r2, #61	; 0x3d
 80015ce:	60da      	str	r2, [r3, #12]
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40026000 	.word	0x40026000
 80015d8:	40026070 	.word	0x40026070
 80015dc:	42070084 	.word	0x42070084
 80015e0:	4207011c 	.word	0x4207011c
 80015e4:	40003800 	.word	0x40003800
 80015e8:	200035a0 	.word	0x200035a0
 80015ec:	424002a0 	.word	0x424002a0

080015f0 <LCD_IO_WriteMultiData>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData(void * pData, uint32_t Size, uint32_t dmacr)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b085      	sub	sp, #20
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	60b9      	str	r1, [r7, #8]
 80015fa:	607a      	str	r2, [r7, #4]
  DMAX_IFCRALL_LCD_DMA_TX;
 80015fc:	4b19      	ldr	r3, [pc, #100]	; (8001664 <LCD_IO_WriteMultiData+0x74>)
 80015fe:	223d      	movs	r2, #61	; 0x3d
 8001600:	60da      	str	r2, [r3, #12]
  SPIX->CR1 &= ~SPI_CR1_SPE;           /* SPI stop */
 8001602:	4b19      	ldr	r3, [pc, #100]	; (8001668 <LCD_IO_WriteMultiData+0x78>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a18      	ldr	r2, [pc, #96]	; (8001668 <LCD_IO_WriteMultiData+0x78>)
 8001608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800160c:	6013      	str	r3, [r2, #0]
  DMAX_STREAMX(LCD_DMA_TX)->CR = 0;    /* DMA stop */
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <LCD_IO_WriteMultiData+0x7c>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
  while(DMAX_STREAMX(LCD_DMA_TX)->CR & DMA_SxCR_EN);
 8001614:	bf00      	nop
 8001616:	4b15      	ldr	r3, [pc, #84]	; (800166c <LCD_IO_WriteMultiData+0x7c>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f9      	bne.n	8001616 <LCD_IO_WriteMultiData+0x26>
  DMAX_STREAMX(LCD_DMA_TX)->M0AR = (uint32_t)pData;
 8001622:	4a12      	ldr	r2, [pc, #72]	; (800166c <LCD_IO_WriteMultiData+0x7c>)
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	60d3      	str	r3, [r2, #12]
  DMAX_STREAMX(LCD_DMA_TX)->PAR = (uint32_t)&SPIX->DR;
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <LCD_IO_WriteMultiData+0x7c>)
 800162a:	4a11      	ldr	r2, [pc, #68]	; (8001670 <LCD_IO_WriteMultiData+0x80>)
 800162c:	609a      	str	r2, [r3, #8]
  DMAX_STREAMX(LCD_DMA_TX)->NDTR = Size;
 800162e:	4a0f      	ldr	r2, [pc, #60]	; (800166c <LCD_IO_WriteMultiData+0x7c>)
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	6053      	str	r3, [r2, #4]
  DMAX_STREAMX(LCD_DMA_TX)->CR = dmacr;
 8001634:	4a0d      	ldr	r2, [pc, #52]	; (800166c <LCD_IO_WriteMultiData+0x7c>)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6013      	str	r3, [r2, #0]
  DMAX_STREAMX(LCD_DMA_TX)->CR |= DMA_SxCR_EN;
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <LCD_IO_WriteMultiData+0x7c>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a0b      	ldr	r2, [pc, #44]	; (800166c <LCD_IO_WriteMultiData+0x7c>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6013      	str	r3, [r2, #0]
  BITBAND_ACCESS(SPIX->CR2, SPI_CR2_TXDMAEN_Pos) = 1;
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <LCD_IO_WriteMultiData+0x84>)
 8001648:	2201      	movs	r2, #1
 800164a:	601a      	str	r2, [r3, #0]
  SPIX->CR1 |= SPI_CR1_SPE;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <LCD_IO_WriteMultiData+0x78>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a05      	ldr	r2, [pc, #20]	; (8001668 <LCD_IO_WriteMultiData+0x78>)
 8001652:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001656:	6013      	str	r3, [r2, #0]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	40026000 	.word	0x40026000
 8001668:	40003800 	.word	0x40003800
 800166c:	40026070 	.word	0x40026070
 8001670:	4000380c 	.word	0x4000380c
 8001674:	42070084 	.word	0x42070084

08001678 <LCD_IO_WriteMultiData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData8(uint8_t * pData, uint32_t Size, uint32_t dinc)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b086      	sub	sp, #24
 800167c:	af00      	add	r7, sp, #0
 800167e:	60f8      	str	r0, [r7, #12]
 8001680:	60b9      	str	r1, [r7, #8]
 8001682:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint8_t d8s;
  if(!dinc)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10a      	bne.n	80016a0 <LCD_IO_WriteMultiData8+0x28>
  {
    d8s = *pData;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	781a      	ldrb	r2, [r3, #0]
 800168e:	4b21      	ldr	r3, [pc, #132]	; (8001714 <LCD_IO_WriteMultiData8+0x9c>)
 8001690:	701a      	strb	r2, [r3, #0]
    pData = &d8s;
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <LCD_IO_WriteMultiData8+0x9c>)
 8001694:	60fb      	str	r3, [r7, #12]
    dmacr = DMAX_STREAMX(LCD_DMA_TX)->CR = DMA_SxCR_TCIE |
 8001696:	4a20      	ldr	r2, [pc, #128]	; (8001718 <LCD_IO_WriteMultiData8+0xa0>)
 8001698:	4b20      	ldr	r3, [pc, #128]	; (800171c <LCD_IO_WriteMultiData8+0xa4>)
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	e031      	b.n	8001704 <LCD_IO_WriteMultiData8+0x8c>
            (0 << DMA_SxCR_MINC_Pos) | (0b01 << DMA_SxCR_DIR_Pos) |
            (DMACHN(LCD_DMA_TX) << DMA_SxCR_CHSEL_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_SxCR_PL_Pos);
  }
  else
    dmacr = DMAX_STREAMX(LCD_DMA_TX)->CR = DMA_SxCR_TCIE |
 80016a0:	4a1d      	ldr	r2, [pc, #116]	; (8001718 <LCD_IO_WriteMultiData8+0xa0>)
 80016a2:	4b1f      	ldr	r3, [pc, #124]	; (8001720 <LCD_IO_WriteMultiData8+0xa8>)
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	617b      	str	r3, [r7, #20]
            (0 << DMA_SxCR_MSIZE_Pos) | (0 << DMA_SxCR_PSIZE_Pos) |
            (1 << DMA_SxCR_MINC_Pos) | (0b01 << DMA_SxCR_DIR_Pos) |
            (DMACHN(LCD_DMA_TX) << DMA_SxCR_CHSEL_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_SxCR_PL_Pos);

  while(Size)
 80016a8:	e02c      	b.n	8001704 <LCD_IO_WriteMultiData8+0x8c>
  {
    if(Size <= DMA_MAXSIZE)
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d80f      	bhi.n	80016d4 <LCD_IO_WriteMultiData8+0x5c>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <LCD_IO_WriteMultiData8+0xac>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 80016ba:	697a      	ldr	r2, [r7, #20]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f7ff ff96 	bl	80015f0 <LCD_IO_WriteMultiData>
      Size = 0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d01a      	beq.n	8001704 <LCD_IO_WriteMultiData8+0x8c>
        WaitForDmaEnd();
 80016ce:	f7ff ff37 	bl	8001540 <WaitForDmaEnd>
 80016d2:	e017      	b.n	8001704 <LCD_IO_WriteMultiData8+0x8c>
      #endif
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 80016d4:	4b13      	ldr	r3, [pc, #76]	; (8001724 <LCD_IO_WriteMultiData8+0xac>)
 80016d6:	2202      	movs	r2, #2
 80016d8:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80016e0:	68f8      	ldr	r0, [r7, #12]
 80016e2:	f7ff ff85 	bl	80015f0 <LCD_IO_WriteMultiData>
      if(dinc)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d004      	beq.n	80016f6 <LCD_IO_WriteMultiData8+0x7e>
        pData+= DMA_MAXSIZE;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80016f2:	33fe      	adds	r3, #254	; 0xfe
 80016f4:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80016fc:	3bfe      	subs	r3, #254	; 0xfe
 80016fe:	60bb      	str	r3, [r7, #8]
      WaitForDmaEnd();
 8001700:	f7ff ff1e 	bl	8001540 <WaitForDmaEnd>
  while(Size)
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d1cf      	bne.n	80016aa <LCD_IO_WriteMultiData8+0x32>
    }
  }
}
 800170a:	bf00      	nop
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200035a4 	.word	0x200035a4
 8001718:	40026070 	.word	0x40026070
 800171c:	00020050 	.word	0x00020050
 8001720:	00020450 	.word	0x00020450
 8001724:	200035a0 	.word	0x200035a0

08001728 <LCD_IO_WriteMultiData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteMultiData16(uint16_t * pData, uint32_t Size, uint32_t dinc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	60f8      	str	r0, [r7, #12]
 8001730:	60b9      	str	r1, [r7, #8]
 8001732:	607a      	str	r2, [r7, #4]
  uint32_t dmacr;
  static uint16_t d16s;
  if(!dinc)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d108      	bne.n	800174c <LCD_IO_WriteMultiData16+0x24>
  {
    d16s = *pData;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	881a      	ldrh	r2, [r3, #0]
 800173e:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <LCD_IO_WriteMultiData16+0xd4>)
 8001740:	801a      	strh	r2, [r3, #0]
    pData = &d16s;
 8001742:	4b2e      	ldr	r3, [pc, #184]	; (80017fc <LCD_IO_WriteMultiData16+0xd4>)
 8001744:	60fb      	str	r3, [r7, #12]
    dmacr = DMA_SxCR_TCIE |
 8001746:	4b2e      	ldr	r3, [pc, #184]	; (8001800 <LCD_IO_WriteMultiData16+0xd8>)
 8001748:	617b      	str	r3, [r7, #20]
 800174a:	e050      	b.n	80017ee <LCD_IO_WriteMultiData16+0xc6>
            (0 << DMA_SxCR_MINC_Pos) | (0b01 << DMA_SxCR_DIR_Pos) |
            (DMACHN(LCD_DMA_TX) << DMA_SxCR_CHSEL_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_SxCR_PL_Pos);
  }
  else
    dmacr = DMA_SxCR_TCIE |
 800174c:	4b2d      	ldr	r3, [pc, #180]	; (8001804 <LCD_IO_WriteMultiData16+0xdc>)
 800174e:	617b      	str	r3, [r7, #20]
            (1 << DMA_SxCR_MSIZE_Pos) | (1 << DMA_SxCR_PSIZE_Pos) |
            (1 << DMA_SxCR_MINC_Pos) | (0b01 << DMA_SxCR_DIR_Pos) |
            (DMACHN(LCD_DMA_TX) << DMA_SxCR_CHSEL_Pos) |
            (DMAPRIORITY(LCD_DMA_TX) << DMA_SxCR_PL_Pos);

  while(Size)
 8001750:	e04d      	b.n	80017ee <LCD_IO_WriteMultiData16+0xc6>
  {
    if(Size <= DMA_MAXSIZE)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001758:	4293      	cmp	r3, r2
 800175a:	d80f      	bhi.n	800177c <LCD_IO_WriteMultiData16+0x54>
    {
      LCD_IO_DmaTransferStatus = 1;     /* last transfer */
 800175c:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <LCD_IO_WriteMultiData16+0xe0>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size, dmacr);
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f7ff ff42 	bl	80015f0 <LCD_IO_WriteMultiData>
      Size = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
      #if LCD_DMA_TXWAIT == 1
      if(dinc)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d03b      	beq.n	80017ee <LCD_IO_WriteMultiData16+0xc6>
        WaitForDmaEnd();
 8001776:	f7ff fee3 	bl	8001540 <WaitForDmaEnd>
 800177a:	e038      	b.n	80017ee <LCD_IO_WriteMultiData16+0xc6>
      #endif
    }
    else if(Size < 2 * DMA_MAXSIZE)
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	4a23      	ldr	r2, [pc, #140]	; (800180c <LCD_IO_WriteMultiData16+0xe4>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d81b      	bhi.n	80017bc <LCD_IO_WriteMultiData16+0x94>
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 8001784:	4b20      	ldr	r3, [pc, #128]	; (8001808 <LCD_IO_WriteMultiData16+0xe0>)
 8001786:	2202      	movs	r2, #2
 8001788:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, Size - DMA_MAXSIZE, dmacr);
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 8001790:	3bfe      	subs	r3, #254	; 0xfe
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	4619      	mov	r1, r3
 8001796:	68f8      	ldr	r0, [r7, #12]
 8001798:	f7ff ff2a 	bl	80015f0 <LCD_IO_WriteMultiData>
      if(dinc)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d006      	beq.n	80017b0 <LCD_IO_WriteMultiData16+0x88>
        pData+= Size - DMA_MAXSIZE;
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	4b1a      	ldr	r3, [pc, #104]	; (8001810 <LCD_IO_WriteMultiData16+0xe8>)
 80017a6:	4413      	add	r3, r2
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4413      	add	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
      Size = DMA_MAXSIZE;
 80017b0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80017b4:	60bb      	str	r3, [r7, #8]
      WaitForDmaEnd();
 80017b6:	f7ff fec3 	bl	8001540 <WaitForDmaEnd>
 80017ba:	e018      	b.n	80017ee <LCD_IO_WriteMultiData16+0xc6>
    }
    else
    {
      LCD_IO_DmaTransferStatus = 2;     /* no last transfer */
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <LCD_IO_WriteMultiData16+0xe0>)
 80017be:	2202      	movs	r2, #2
 80017c0:	601a      	str	r2, [r3, #0]
      LCD_IO_WriteMultiData((void *)pData, DMA_MAXSIZE, dmacr);
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80017c8:	68f8      	ldr	r0, [r7, #12]
 80017ca:	f7ff ff11 	bl	80015f0 <LCD_IO_WriteMultiData>
      if(dinc)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <LCD_IO_WriteMultiData16+0xb8>
        pData+= DMA_MAXSIZE;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	f503 33ff 	add.w	r3, r3, #130560	; 0x1fe00
 80017da:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80017de:	60fb      	str	r3, [r7, #12]
      Size-= DMA_MAXSIZE;
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80017e6:	3bfe      	subs	r3, #254	; 0xfe
 80017e8:	60bb      	str	r3, [r7, #8]
      WaitForDmaEnd();
 80017ea:	f7ff fea9 	bl	8001540 <WaitForDmaEnd>
  while(Size)
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d1ae      	bne.n	8001752 <LCD_IO_WriteMultiData16+0x2a>
    }
  }
}
 80017f4:	bf00      	nop
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200035a6 	.word	0x200035a6
 8001800:	00022850 	.word	0x00022850
 8001804:	00022c50 	.word	0x00022c50
 8001808:	200035a0 	.word	0x200035a0
 800180c:	0001fffb 	.word	0x0001fffb
 8001810:	7fff0002 	.word	0x7fff0002

08001814 <LCD_IO_Delay>:

//=============================================================================
#pragma GCC push_options
#pragma GCC optimize("O0")
void LCD_IO_Delay(uint32_t c)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  while(c--);
 800181c:	bf00      	nop
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	1e5a      	subs	r2, r3, #1
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d1fa      	bne.n	800181e <LCD_IO_Delay+0xa>
}
 8001828:	bf00      	nop
 800182a:	370c      	adds	r7, #12
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <LCD_Delay>:

//=============================================================================
/* Public functions */

void LCD_Delay(uint32_t Delay)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	f001 ff23 	bl	8003688 <HAL_Delay>
}
 8001842:	bf00      	nop
 8001844:	3708      	adds	r7, #8
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
	...

0800184c <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <LCD_IO_Bl_OnOff+0x18>
    GPIOX_ODR(LCD_BL) = LCD_BLON;
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <LCD_IO_Bl_OnOff+0x2c>)
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 8001862:	e002      	b.n	800186a <LCD_IO_Bl_OnOff+0x1e>
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <LCD_IO_Bl_OnOff+0x2c>)
 8001866:	2201      	movs	r2, #1
 8001868:	601a      	str	r2, [r3, #0]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	424102b4 	.word	0x424102b4

0800187c <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  #define DMA1_CLOCK_RX         0
  #endif
  #endif  // #else LCD_SPI == 0

  /* GPIO, DMA Clocks */
  RCC->AHB1ENR |= GPIOX_CLOCK(LCD_RS) | GPIOX_CLOCK(LCD_CS) | GPIOX_CLOCK(LCD_SCK) | GPIOX_CLOCK(LCD_MOSI) |
 8001880:	4b51      	ldr	r3, [pc, #324]	; (80019c8 <LCD_IO_Init+0x14c>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	4a50      	ldr	r2, [pc, #320]	; (80019c8 <LCD_IO_Init+0x14c>)
 8001886:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800188a:	f043 0307 	orr.w	r3, r3, #7
 800188e:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOX_MODER(MODE_DIGITAL_INPUT, LCD_MISO);
  #endif

  /* Backlight = output, light on */
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_BL);
 8001890:	4b4e      	ldr	r3, [pc, #312]	; (80019cc <LCD_IO_Init+0x150>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001898:	4a4c      	ldr	r2, [pc, #304]	; (80019cc <LCD_IO_Init+0x150>)
 800189a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800189e:	6013      	str	r3, [r2, #0]
  LCD_IO_Bl_OnOff(1);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f7ff ffd3 	bl	800184c <LCD_IO_Bl_OnOff>
  #endif

  /* Reset pin = output, reset off */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A
  GPIOX_MODER(MODE_OUT, LCD_RST);
 80018a6:	4b4a      	ldr	r3, [pc, #296]	; (80019d0 <LCD_IO_Init+0x154>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018ae:	4a48      	ldr	r2, [pc, #288]	; (80019d0 <LCD_IO_Init+0x154>)
 80018b0:	f043 0310 	orr.w	r3, r3, #16
 80018b4:	6013      	str	r3, [r2, #0]
  GPIOX_OSPEEDR(MODE_SPD_LOW, LCD_RST);
 80018b6:	4b46      	ldr	r3, [pc, #280]	; (80019d0 <LCD_IO_Init+0x154>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	4a45      	ldr	r2, [pc, #276]	; (80019d0 <LCD_IO_Init+0x154>)
 80018bc:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80018c0:	6093      	str	r3, [r2, #8]
  LCD_RST_OFF;
 80018c2:	4b44      	ldr	r3, [pc, #272]	; (80019d4 <LCD_IO_Init+0x158>)
 80018c4:	2201      	movs	r2, #1
 80018c6:	601a      	str	r2, [r3, #0]
  #endif

  LCD_RS_DATA;
 80018c8:	4b43      	ldr	r3, [pc, #268]	; (80019d8 <LCD_IO_Init+0x15c>)
 80018ca:	2201      	movs	r2, #1
 80018cc:	601a      	str	r2, [r3, #0]
  LCD_CS_OFF;
 80018ce:	4b43      	ldr	r3, [pc, #268]	; (80019dc <LCD_IO_Init+0x160>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_RS);
 80018d4:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <LCD_IO_Init+0x154>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80018dc:	4a3c      	ldr	r2, [pc, #240]	; (80019d0 <LCD_IO_Init+0x154>)
 80018de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e2:	6013      	str	r3, [r2, #0]
  GPIOX_MODER(MODE_OUT, LCD_CS);
 80018e4:	4b3e      	ldr	r3, [pc, #248]	; (80019e0 <LCD_IO_Init+0x164>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80018ec:	4a3c      	ldr	r2, [pc, #240]	; (80019e0 <LCD_IO_Init+0x164>)
 80018ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018f2:	6013      	str	r3, [r2, #0]

  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_RS);
 80018f4:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <LCD_IO_Init+0x154>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4a35      	ldr	r2, [pc, #212]	; (80019d0 <LCD_IO_Init+0x154>)
 80018fa:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 80018fe:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_CS);
 8001900:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <LCD_IO_Init+0x164>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a36      	ldr	r2, [pc, #216]	; (80019e0 <LCD_IO_Init+0x164>)
 8001906:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800190a:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_SCK);
 800190c:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <LCD_IO_Init+0x154>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	4a2f      	ldr	r2, [pc, #188]	; (80019d0 <LCD_IO_Init+0x154>)
 8001912:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
 8001916:	6093      	str	r3, [r2, #8]
  GPIOX_OSPEEDR(MODE_SPD_VHIGH, LCD_MOSI);
 8001918:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <LCD_IO_Init+0x154>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4a2c      	ldr	r2, [pc, #176]	; (80019d0 <LCD_IO_Init+0x154>)
 800191e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001922:	6093      	str	r3, [r2, #8]
  GPIOX_ODR(LCD_SCK) = 1;               // SCK = 1
 8001924:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <LCD_IO_Init+0x168>)
 8001926:	2201      	movs	r2, #1
 8001928:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_MOSI);

  #else

  /* Hardware SPI */
  LCD_SPI_RCC_EN;
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <LCD_IO_Init+0x16c>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]

  GPIOX_AFR(LCD_SPI_AFR, LCD_SCK);
 8001930:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <LCD_IO_Init+0x154>)
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8001938:	4a25      	ldr	r2, [pc, #148]	; (80019d0 <LCD_IO_Init+0x154>)
 800193a:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800193e:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOX_MODER(MODE_ALTER, LCD_SCK);
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <LCD_IO_Init+0x154>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001948:	4a21      	ldr	r2, [pc, #132]	; (80019d0 <LCD_IO_Init+0x154>)
 800194a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800194e:	6013      	str	r3, [r2, #0]
  GPIOX_AFR(LCD_SPI_AFR, LCD_MOSI);
 8001950:	4b1f      	ldr	r3, [pc, #124]	; (80019d0 <LCD_IO_Init+0x154>)
 8001952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001954:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001958:	4a1d      	ldr	r2, [pc, #116]	; (80019d0 <LCD_IO_Init+0x154>)
 800195a:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 800195e:	6253      	str	r3, [r2, #36]	; 0x24
  GPIOX_MODER(MODE_ALTER, LCD_MOSI);
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <LCD_IO_Init+0x154>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8001968:	4a19      	ldr	r2, [pc, #100]	; (80019d0 <LCD_IO_Init+0x154>)
 800196a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800196e:	6013      	str	r3, [r2, #0]
  #if LCD_SPI_MODE == 1
  /* Half duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos) | SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE;
  #else // #if LCD_SPI_MODE == 1
  /* TX or full duplex */
  SPIX->CR1 = SPI_CR1_CPHA | SPI_CR1_CPOL | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | (LCD_SPI_SPD_WRITE << SPI_CR1_BR_Pos);
 8001970:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <LCD_IO_Init+0x170>)
 8001972:	f240 3207 	movw	r2, #775	; 0x307
 8001976:	601a      	str	r2, [r3, #0]
  #endif // #else LCD_SPI_MODE == 1

  SPIX->CR1 |= SPI_CR1_SPE;
 8001978:	4b1c      	ldr	r3, [pc, #112]	; (80019ec <LCD_IO_Init+0x170>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1b      	ldr	r2, [pc, #108]	; (80019ec <LCD_IO_Init+0x170>)
 800197e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001982:	6013      	str	r3, [r2, #0]

  #endif // #else LCD_SPI == 0

  /* Set or Reset the control line */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A // reset
  LCD_Delay(10);
 8001984:	200a      	movs	r0, #10
 8001986:	f7ff ff55 	bl	8001834 <LCD_Delay>
  LCD_RST_ON;
 800198a:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <LCD_IO_Init+0x158>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
  LCD_Delay(10);
 8001990:	200a      	movs	r0, #10
 8001992:	f7ff ff4f 	bl	8001834 <LCD_Delay>
  LCD_RST_OFF;
 8001996:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <LCD_IO_Init+0x158>)
 8001998:	2201      	movs	r2, #1
 800199a:	601a      	str	r2, [r3, #0]
  #endif
  LCD_Delay(10);
 800199c:	200a      	movs	r0, #10
 800199e:	f7ff ff49 	bl	8001834 <LCD_Delay>
  #define DMA_IRQ_PRIORITY    15
  #else
  #define DMA_IRQ_PRIORITY    configLIBRARY_LOWEST_INTERRUPT_PRIORITY
  #endif
  #if DMANUM(LCD_DMA_TX) > 0
  HAL_NVIC_SetPriority(DMAX_STREAMX_IRQ(LCD_DMA_TX), DMA_IRQ_PRIORITY, 0);
 80019a2:	2200      	movs	r2, #0
 80019a4:	210f      	movs	r1, #15
 80019a6:	200f      	movs	r0, #15
 80019a8:	f001 ff48 	bl	800383c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAX_STREAMX_IRQ(LCD_DMA_TX));
 80019ac:	200f      	movs	r0, #15
 80019ae:	f001 ff61 	bl	8003874 <HAL_NVIC_EnableIRQ>
  #endif
  #if DMANUM(LCD_DMA_RX) > 0
  HAL_NVIC_SetPriority(DMAX_STREAMX_IRQ(LCD_DMA_RX), DMA_IRQ_PRIORITY, 0);
 80019b2:	2200      	movs	r2, #0
 80019b4:	210f      	movs	r1, #15
 80019b6:	200e      	movs	r0, #14
 80019b8:	f001 ff40 	bl	800383c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAX_STREAMX_IRQ(LCD_DMA_RX));
 80019bc:	200e      	movs	r0, #14
 80019be:	f001 ff59 	bl	8003874 <HAL_NVIC_EnableIRQ>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  // #if DMANUM(LCD_DMA_RX) > 0
} // void LCD_IO_Init(void)
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020400 	.word	0x40020400
 80019d4:	42408288 	.word	0x42408288
 80019d8:	424082b8 	.word	0x424082b8
 80019dc:	424002a0 	.word	0x424002a0
 80019e0:	40020000 	.word	0x40020000
 80019e4:	424082b4 	.word	0x424082b4
 80019e8:	42470838 	.word	0x42470838
 80019ec:	40003800 	.word	0x40003800

080019f0 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 80019fa:	f7ff fda1 	bl	8001540 <WaitForDmaEnd>
  LcdSpiMode8();
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <LCD_IO_WriteCmd8+0x30>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <LCD_IO_WriteCmd8+0x34>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fd77 	bl	8001500 <LcdCmdWrite8>
  LCD_CS_OFF;
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <LCD_IO_WriteCmd8+0x34>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	4207002c 	.word	0x4207002c
 8001a24:	424002a0 	.word	0x424002a0

08001a28 <LCD_IO_WriteData8>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
 8001a32:	f7ff fd85 	bl	8001540 <WaitForDmaEnd>
  LcdSpiMode8();
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <LCD_IO_WriteData8+0x30>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001a3c:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <LCD_IO_WriteData8+0x34>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
  LcdWrite8(Data);
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fd43 	bl	80014d0 <LcdWrite8>
  LCD_CS_OFF;
 8001a4a:	4b04      	ldr	r3, [pc, #16]	; (8001a5c <LCD_IO_WriteData8+0x34>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	4207002c 	.word	0x4207002c
 8001a5c:	424002a0 	.word	0x424002a0

08001a60 <LCD_IO_WriteCmd8DataFill16>:
  LCD_CS_OFF;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	603a      	str	r2, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
 8001a70:	f7ff fd66 	bl	8001540 <WaitForDmaEnd>
  LcdSpiMode8();
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001a7a:	4b0b      	ldr	r3, [pc, #44]	; (8001aa8 <LCD_IO_WriteCmd8DataFill16+0x48>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7ff fd3c 	bl	8001500 <LcdCmdWrite8>
  LcdSpiMode16();
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <LCD_IO_WriteCmd8DataFill16+0x44>)
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(&Data, Size, 0);
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	2200      	movs	r2, #0
 8001a92:	6839      	ldr	r1, [r7, #0]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fe47 	bl	8001728 <LCD_IO_WriteMultiData16>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	4207002c 	.word	0x4207002c
 8001aa8:	424002a0 	.word	0x424002a0

08001aac <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8001aba:	f7ff fd41 	bl	8001540 <WaitForDmaEnd>
  LcdSpiMode8();
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <LCD_IO_WriteCmd8MultipleData8+0x38>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001ac4:	4b08      	ldr	r3, [pc, #32]	; (8001ae8 <LCD_IO_WriteCmd8MultipleData8+0x3c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001aca:	7bfb      	ldrb	r3, [r7, #15]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fd17 	bl	8001500 <LcdCmdWrite8>
  LCD_IO_WriteMultiData8(pData, Size, 1);
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	6879      	ldr	r1, [r7, #4]
 8001ad6:	68b8      	ldr	r0, [r7, #8]
 8001ad8:	f7ff fdce 	bl	8001678 <LCD_IO_WriteMultiData8>
}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	4207002c 	.word	0x4207002c
 8001ae8:	424002a0 	.word	0x424002a0

08001aec <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
 8001af8:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
 8001afa:	f7ff fd21 	bl	8001540 <WaitForDmaEnd>
  LcdSpiMode8();
 8001afe:	4b0b      	ldr	r3, [pc, #44]	; (8001b2c <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]
  LCD_CS_ON;
 8001b04:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <LCD_IO_WriteCmd8MultipleData16+0x44>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	601a      	str	r2, [r3, #0]
  LcdCmdWrite8(Cmd);
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fcf7 	bl	8001500 <LcdCmdWrite8>
  LcdSpiMode16();
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
  LCD_IO_WriteMultiData16(pData, Size, 1);
 8001b18:	2201      	movs	r2, #1
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	68b8      	ldr	r0, [r7, #8]
 8001b1e:	f7ff fe03 	bl	8001728 <LCD_IO_WriteMultiData16>
}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	4207002c 	.word	0x4207002c
 8001b30:	424002a0 	.word	0x424002a0

08001b34 <LCD_IO_ReadCmd8MultipleData8>:
  LcdCmdWrite16(Cmd);
  LCD_IO_WriteMultiData16(pData, Size, 1);
}

#if LCD_SPI_MODE == 0
__weak void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize) {}
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
 8001b3e:	603b      	str	r3, [r7, #0]
 8001b40:	4603      	mov	r3, r0
 8001b42:	73fb      	strb	r3, [r7, #15]
 8001b44:	bf00      	nop
 8001b46:	3714      	adds	r7, #20
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LCD_IO_ReadCmd8MultipleData24to16>:
__weak void LCD_IO_ReadCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
__weak void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize) {}
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60b9      	str	r1, [r7, #8]
 8001b58:	607a      	str	r2, [r7, #4]
 8001b5a:	603b      	str	r3, [r7, #0]
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	73fb      	strb	r3, [r7, #15]
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <st7735_Init>:

#define  LCD_IO_WriteData16_to_2x8(dt)    {LCD_IO_WriteData8((dt) >> 8); LCD_IO_WriteData8(dt);}

//-----------------------------------------------------------------------------
void st7735_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  if((Is_st7735_Initialized & ST7735_LCD_INITIALIZED) == 0)
 8001b70:	4b37      	ldr	r3, [pc, #220]	; (8001c50 <st7735_Init+0xe4>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d115      	bne.n	8001ba8 <st7735_Init+0x3c>
  {
    Is_st7735_Initialized |= ST7735_LCD_INITIALIZED;
 8001b7c:	4b34      	ldr	r3, [pc, #208]	; (8001c50 <st7735_Init+0xe4>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	f043 0301 	orr.w	r3, r3, #1
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <st7735_Init+0xe4>)
 8001b88:	701a      	strb	r2, [r3, #0]
    if((Is_st7735_Initialized & ST7735_IO_INITIALIZED) == 0)
 8001b8a:	4b31      	ldr	r3, [pc, #196]	; (8001c50 <st7735_Init+0xe4>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <st7735_Init+0x2e>
      LCD_IO_Init();
 8001b96:	f7ff fe71 	bl	800187c <LCD_IO_Init>
    Is_st7735_Initialized |= ST7735_IO_INITIALIZED;
 8001b9a:	4b2d      	ldr	r3, [pc, #180]	; (8001c50 <st7735_Init+0xe4>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	f043 0302 	orr.w	r3, r3, #2
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	4b2a      	ldr	r3, [pc, #168]	; (8001c50 <st7735_Init+0xe4>)
 8001ba6:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(1);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f7ff fe43 	bl	8001834 <LCD_Delay>
  LCD_IO_WriteCmd8(ST7735_SWRESET);
 8001bae:	2001      	movs	r0, #1
 8001bb0:	f7ff ff1e 	bl	80019f0 <LCD_IO_WriteCmd8>
  LCD_Delay(1);
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7ff fe3d 	bl	8001834 <LCD_Delay>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ST7735_GMCTRP1, (uint8_t *)"\x09\x16\x09\x20\x21\x1B\x13\x19\x17\x15\x1E\x2B\x04\x05\x02\x0E", 16);
 8001bba:	2210      	movs	r2, #16
 8001bbc:	4925      	ldr	r1, [pc, #148]	; (8001c54 <st7735_Init+0xe8>)
 8001bbe:	20e0      	movs	r0, #224	; 0xe0
 8001bc0:	f7ff ff74 	bl	8001aac <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ST7735_GMCTRN1, (uint8_t *)"\x0B\x14\x08\x1E\x22\x1D\x18\x1E\x1B\x1A\x24\x2B\x06\x06\x02\x0F", 16);
 8001bc4:	2210      	movs	r2, #16
 8001bc6:	4924      	ldr	r1, [pc, #144]	; (8001c58 <st7735_Init+0xec>)
 8001bc8:	20e1      	movs	r0, #225	; 0xe1
 8001bca:	f7ff ff6f 	bl	8001aac <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ST7735_PWCTR1, (uint8_t *)"\x17\x15", 2);
 8001bce:	2202      	movs	r2, #2
 8001bd0:	4922      	ldr	r1, [pc, #136]	; (8001c5c <st7735_Init+0xf0>)
 8001bd2:	20c0      	movs	r0, #192	; 0xc0
 8001bd4:	f7ff ff6a 	bl	8001aac <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ST7735_PWCTR2, (uint8_t *)"\x41", 1);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4921      	ldr	r1, [pc, #132]	; (8001c60 <st7735_Init+0xf4>)
 8001bdc:	20c1      	movs	r0, #193	; 0xc1
 8001bde:	f7ff ff65 	bl	8001aac <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ST7735_VMCTR1, (uint8_t *)"\x00\x12\x80", 3);
 8001be2:	2203      	movs	r2, #3
 8001be4:	491f      	ldr	r1, [pc, #124]	; (8001c64 <st7735_Init+0xf8>)
 8001be6:	20c5      	movs	r0, #197	; 0xc5
 8001be8:	f7ff ff60 	bl	8001aac <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteMultipleData8(ST7735_COLMOD, (uint8_t *)"\x55", 1); // Interface Pixel Format (16 bit)
  LCD_IO_WriteCmd8MultipleData8(ST7735_COLMOD, (uint8_t *)"\x05", 1); // Interface Pixel Format (16 bit)
 8001bec:	2201      	movs	r2, #1
 8001bee:	491e      	ldr	r1, [pc, #120]	; (8001c68 <st7735_Init+0xfc>)
 8001bf0:	203a      	movs	r0, #58	; 0x3a
 8001bf2:	f7ff ff5b 	bl	8001aac <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xB0, (uint8_t *)"\x80", 1); // Interface Mode Control (SDO NOT USE)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	491c      	ldr	r1, [pc, #112]	; (8001c6c <st7735_Init+0x100>)
 8001bfa:	20b0      	movs	r0, #176	; 0xb0
 8001bfc:	f7ff ff56 	bl	8001aac <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xB1, (uint8_t *)"\xA0", 1);// Frame rate (60Hz)
 8001c00:	2201      	movs	r2, #1
 8001c02:	491b      	ldr	r1, [pc, #108]	; (8001c70 <st7735_Init+0x104>)
 8001c04:	20b1      	movs	r0, #177	; 0xb1
 8001c06:	f7ff ff51 	bl	8001aac <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xB4, (uint8_t *)"\x02", 1);// Display Inversion Control (2-dot)
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4919      	ldr	r1, [pc, #100]	; (8001c74 <st7735_Init+0x108>)
 8001c0e:	20b4      	movs	r0, #180	; 0xb4
 8001c10:	f7ff ff4c 	bl	8001aac <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xB6, (uint8_t *)"\x02\x02", 2); // Display Function Control RGB/MCU Interface Control
 8001c14:	2202      	movs	r2, #2
 8001c16:	4918      	ldr	r1, [pc, #96]	; (8001c78 <st7735_Init+0x10c>)
 8001c18:	20b6      	movs	r0, #182	; 0xb6
 8001c1a:	f7ff ff47 	bl	8001aac <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE9, (uint8_t *)"\x00", 1);// Set Image Functio (Disable 24 bit data)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	4916      	ldr	r1, [pc, #88]	; (8001c7c <st7735_Init+0x110>)
 8001c22:	20e9      	movs	r0, #233	; 0xe9
 8001c24:	f7ff ff42 	bl	8001aac <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\xA9\x51\x2C\x82", 4);// Adjust Control (D7 stream, loose)
 8001c28:	2204      	movs	r2, #4
 8001c2a:	4915      	ldr	r1, [pc, #84]	; (8001c80 <st7735_Init+0x114>)
 8001c2c:	20f7      	movs	r0, #247	; 0xf7
 8001c2e:	f7ff ff3d 	bl	8001aac <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ST7735_MADCTL); LCD_IO_WriteData8(ST7735_MAD_DATA_RIGHT_THEN_DOWN);
 8001c32:	2036      	movs	r0, #54	; 0x36
 8001c34:	f7ff fedc 	bl	80019f0 <LCD_IO_WriteCmd8>
 8001c38:	2060      	movs	r0, #96	; 0x60
 8001c3a:	f7ff fef5 	bl	8001a28 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ST7735_SLPOUT);    // Exit Sleep
 8001c3e:	2011      	movs	r0, #17
 8001c40:	f7ff fed6 	bl	80019f0 <LCD_IO_WriteCmd8>
  LCD_IO_WriteCmd8(ST7735_DISPON);    // Display on
 8001c44:	2029      	movs	r0, #41	; 0x29
 8001c46:	f7ff fed3 	bl	80019f0 <LCD_IO_WriteCmd8>
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200035a8 	.word	0x200035a8
 8001c54:	08009aec 	.word	0x08009aec
 8001c58:	08009b00 	.word	0x08009b00
 8001c5c:	08009b14 	.word	0x08009b14
 8001c60:	08009b18 	.word	0x08009b18
 8001c64:	08009b1c 	.word	0x08009b1c
 8001c68:	08009b20 	.word	0x08009b20
 8001c6c:	08009b24 	.word	0x08009b24
 8001c70:	08009b28 	.word	0x08009b28
 8001c74:	08009b2c 	.word	0x08009b2c
 8001c78:	08009b30 	.word	0x08009b30
 8001c7c:	08009b34 	.word	0x08009b34
 8001c80:	08009b38 	.word	0x08009b38

08001c84 <st7735_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void st7735_DisplayOn(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f7ff fddf 	bl	800184c <LCD_IO_Bl_OnOff>
  LCD_IO_WriteCmd8(ST7735_SLPOUT);    // Exit Sleep
 8001c8e:	2011      	movs	r0, #17
 8001c90:	f7ff feae 	bl	80019f0 <LCD_IO_WriteCmd8>
}
 8001c94:	bf00      	nop
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <st7735_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void st7735_DisplayOff(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  LCD_IO_WriteCmd8(ST7735_SLPIN);    // Sleep
 8001c9c:	2010      	movs	r0, #16
 8001c9e:	f7ff fea7 	bl	80019f0 <LCD_IO_WriteCmd8>
  LCD_IO_Bl_OnOff(0);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff fdd2 	bl	800184c <LCD_IO_Bl_OnOff>
}
 8001ca8:	bf00      	nop
 8001caa:	bd80      	pop	{r7, pc}

08001cac <st7735_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t st7735_GetLcdPixelWidth(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  return ST7735_SIZE_X;
 8001cb0:	23a0      	movs	r3, #160	; 0xa0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <st7735_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t st7735_GetLcdPixelHeight(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ST7735_SIZE_Y;
 8001cc0:	2380      	movs	r3, #128	; 0x80
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr

08001ccc <st7735_ReadID>:
  * @brief  Get the ST7735 ID.
  * @param  None
  * @retval The ST7735 ID
  */
uint16_t st7735_ReadID(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
  uint32_t dt = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
  LCD_IO_ReadCmd8MultipleData8(ST7735_RDDID, (uint8_t *)&dt, 3, 0);
 8001cd6:	1d39      	adds	r1, r7, #4
 8001cd8:	2300      	movs	r3, #0
 8001cda:	2203      	movs	r2, #3
 8001cdc:	2004      	movs	r0, #4
 8001cde:	f7ff ff29 	bl	8001b34 <LCD_IO_ReadCmd8MultipleData8>
  if(dt == 0xF0897C) // ID1 = 0x7C, ID2 = 0x89, ID3 = 0xF0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a05      	ldr	r2, [pc, #20]	; (8001cfc <st7735_ReadID+0x30>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d102      	bne.n	8001cf0 <st7735_ReadID+0x24>
    return 0x7735;
 8001cea:	f247 7335 	movw	r3, #30517	; 0x7735
 8001cee:	e000      	b.n	8001cf2 <st7735_ReadID+0x26>
  else
    return 0;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	00f0897c 	.word	0x00f0897c

08001d00 <st7735_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void st7735_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	460a      	mov	r2, r1
 8001d0a:	80fb      	strh	r3, [r7, #6]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	80bb      	strh	r3, [r7, #4]
  ST7735_SETCURSOR(Xpos, Ypos);
 8001d10:	202a      	movs	r0, #42	; 0x2a
 8001d12:	f7ff fe6d 	bl	80019f0 <LCD_IO_WriteCmd8>
 8001d16:	88fb      	ldrh	r3, [r7, #6]
 8001d18:	0a1b      	lsrs	r3, r3, #8
 8001d1a:	b29b      	uxth	r3, r3
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff fe82 	bl	8001a28 <LCD_IO_WriteData8>
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff fe7d 	bl	8001a28 <LCD_IO_WriteData8>
 8001d2e:	88fb      	ldrh	r3, [r7, #6]
 8001d30:	0a1b      	lsrs	r3, r3, #8
 8001d32:	b29b      	uxth	r3, r3
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fe76 	bl	8001a28 <LCD_IO_WriteData8>
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fe71 	bl	8001a28 <LCD_IO_WriteData8>
 8001d46:	202b      	movs	r0, #43	; 0x2b
 8001d48:	f7ff fe52 	bl	80019f0 <LCD_IO_WriteCmd8>
 8001d4c:	88bb      	ldrh	r3, [r7, #4]
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fe67 	bl	8001a28 <LCD_IO_WriteData8>
 8001d5a:	88bb      	ldrh	r3, [r7, #4]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fe62 	bl	8001a28 <LCD_IO_WriteData8>
 8001d64:	88bb      	ldrh	r3, [r7, #4]
 8001d66:	0a1b      	lsrs	r3, r3, #8
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fe5b 	bl	8001a28 <LCD_IO_WriteData8>
 8001d72:	88bb      	ldrh	r3, [r7, #4]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fe56 	bl	8001a28 <LCD_IO_WriteData8>
}
 8001d7c:	bf00      	nop
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}

08001d84 <st7735_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void st7735_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	80fb      	strh	r3, [r7, #6]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	80bb      	strh	r3, [r7, #4]
 8001d92:	4613      	mov	r3, r2
 8001d94:	807b      	strh	r3, [r7, #2]
  ST7735_SETCURSOR(Xpos, Ypos);
 8001d96:	202a      	movs	r0, #42	; 0x2a
 8001d98:	f7ff fe2a 	bl	80019f0 <LCD_IO_WriteCmd8>
 8001d9c:	88fb      	ldrh	r3, [r7, #6]
 8001d9e:	0a1b      	lsrs	r3, r3, #8
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fe3f 	bl	8001a28 <LCD_IO_WriteData8>
 8001daa:	88fb      	ldrh	r3, [r7, #6]
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fe3a 	bl	8001a28 <LCD_IO_WriteData8>
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fe33 	bl	8001a28 <LCD_IO_WriteData8>
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fe2e 	bl	8001a28 <LCD_IO_WriteData8>
 8001dcc:	202b      	movs	r0, #43	; 0x2b
 8001dce:	f7ff fe0f 	bl	80019f0 <LCD_IO_WriteCmd8>
 8001dd2:	88bb      	ldrh	r3, [r7, #4]
 8001dd4:	0a1b      	lsrs	r3, r3, #8
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fe24 	bl	8001a28 <LCD_IO_WriteData8>
 8001de0:	88bb      	ldrh	r3, [r7, #4]
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff fe1f 	bl	8001a28 <LCD_IO_WriteData8>
 8001dea:	88bb      	ldrh	r3, [r7, #4]
 8001dec:	0a1b      	lsrs	r3, r3, #8
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fe18 	bl	8001a28 <LCD_IO_WriteData8>
 8001df8:	88bb      	ldrh	r3, [r7, #4]
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fe13 	bl	8001a28 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ST7735_RAMWR, RGBCode, 1);
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	2201      	movs	r2, #1
 8001e06:	4619      	mov	r1, r3
 8001e08:	202c      	movs	r0, #44	; 0x2c
 8001e0a:	f7ff fe29 	bl	8001a60 <LCD_IO_WriteCmd8DataFill16>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <st7735_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t st7735_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b084      	sub	sp, #16
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	460a      	mov	r2, r1
 8001e20:	80fb      	strh	r3, [r7, #6]
 8001e22:	4613      	mov	r3, r2
 8001e24:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ST7735_SETCURSOR(Xpos, Ypos);
 8001e26:	202a      	movs	r0, #42	; 0x2a
 8001e28:	f7ff fde2 	bl	80019f0 <LCD_IO_WriteCmd8>
 8001e2c:	88fb      	ldrh	r3, [r7, #6]
 8001e2e:	0a1b      	lsrs	r3, r3, #8
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff fdf7 	bl	8001a28 <LCD_IO_WriteData8>
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fdf2 	bl	8001a28 <LCD_IO_WriteData8>
 8001e44:	88fb      	ldrh	r3, [r7, #6]
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fdeb 	bl	8001a28 <LCD_IO_WriteData8>
 8001e52:	88fb      	ldrh	r3, [r7, #6]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fde6 	bl	8001a28 <LCD_IO_WriteData8>
 8001e5c:	202b      	movs	r0, #43	; 0x2b
 8001e5e:	f7ff fdc7 	bl	80019f0 <LCD_IO_WriteCmd8>
 8001e62:	88bb      	ldrh	r3, [r7, #4]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7ff fddc 	bl	8001a28 <LCD_IO_WriteData8>
 8001e70:	88bb      	ldrh	r3, [r7, #4]
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fdd7 	bl	8001a28 <LCD_IO_WriteData8>
 8001e7a:	88bb      	ldrh	r3, [r7, #4]
 8001e7c:	0a1b      	lsrs	r3, r3, #8
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fdd0 	bl	8001a28 <LCD_IO_WriteData8>
 8001e88:	88bb      	ldrh	r3, [r7, #4]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff fdcb 	bl	8001a28 <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ST7735_RAMRD, &ret, 1, 1);
 8001e92:	f107 010e 	add.w	r1, r7, #14
 8001e96:	2301      	movs	r3, #1
 8001e98:	2201      	movs	r2, #1
 8001e9a:	202e      	movs	r0, #46	; 0x2e
 8001e9c:	f7ff fe58 	bl	8001b50 <LCD_IO_ReadCmd8MultipleData24to16>
  return(ret);
 8001ea0:	89fb      	ldrh	r3, [r7, #14]
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
	...

08001eac <st7735_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void st7735_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8001eac:	b590      	push	{r4, r7, lr}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	4608      	mov	r0, r1
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4623      	mov	r3, r4
 8001ebc:	80fb      	strh	r3, [r7, #6]
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80bb      	strh	r3, [r7, #4]
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	807b      	strh	r3, [r7, #2]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8001eca:	4a2a      	ldr	r2, [pc, #168]	; (8001f74 <st7735_SetDisplayWindow+0xc8>)
 8001ecc:	88bb      	ldrh	r3, [r7, #4]
 8001ece:	8013      	strh	r3, [r2, #0]
 8001ed0:	88ba      	ldrh	r2, [r7, #4]
 8001ed2:	883b      	ldrh	r3, [r7, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	4b26      	ldr	r3, [pc, #152]	; (8001f78 <st7735_SetDisplayWindow+0xcc>)
 8001ede:	801a      	strh	r2, [r3, #0]
  LCD_IO_WriteCmd8(ST7735_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8001ee0:	202a      	movs	r0, #42	; 0x2a
 8001ee2:	f7ff fd85 	bl	80019f0 <LCD_IO_WriteCmd8>
 8001ee6:	88fb      	ldrh	r3, [r7, #6]
 8001ee8:	0a1b      	lsrs	r3, r3, #8
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7ff fd9a 	bl	8001a28 <LCD_IO_WriteData8>
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff fd95 	bl	8001a28 <LCD_IO_WriteData8>
 8001efe:	88fa      	ldrh	r2, [r7, #6]
 8001f00:	887b      	ldrh	r3, [r7, #2]
 8001f02:	4413      	add	r3, r2
 8001f04:	3b01      	subs	r3, #1
 8001f06:	121b      	asrs	r3, r3, #8
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fd8c 	bl	8001a28 <LCD_IO_WriteData8>
 8001f10:	88fb      	ldrh	r3, [r7, #6]
 8001f12:	b2da      	uxtb	r2, r3
 8001f14:	887b      	ldrh	r3, [r7, #2]
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7ff fd81 	bl	8001a28 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ST7735_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8001f26:	202b      	movs	r0, #43	; 0x2b
 8001f28:	f7ff fd62 	bl	80019f0 <LCD_IO_WriteCmd8>
 8001f2c:	88bb      	ldrh	r3, [r7, #4]
 8001f2e:	0a1b      	lsrs	r3, r3, #8
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	b2db      	uxtb	r3, r3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fd77 	bl	8001a28 <LCD_IO_WriteData8>
 8001f3a:	88bb      	ldrh	r3, [r7, #4]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff fd72 	bl	8001a28 <LCD_IO_WriteData8>
 8001f44:	88ba      	ldrh	r2, [r7, #4]
 8001f46:	883b      	ldrh	r3, [r7, #0]
 8001f48:	4413      	add	r3, r2
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	121b      	asrs	r3, r3, #8
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fd69 	bl	8001a28 <LCD_IO_WriteData8>
 8001f56:	88bb      	ldrh	r3, [r7, #4]
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	883b      	ldrh	r3, [r7, #0]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	4413      	add	r3, r2
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fd5e 	bl	8001a28 <LCD_IO_WriteData8>
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd90      	pop	{r4, r7, pc}
 8001f74:	200035aa 	.word	0x200035aa
 8001f78:	200035ac 	.word	0x200035ac

08001f7c <st7735_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void st7735_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8001f7c:	b590      	push	{r4, r7, lr}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4604      	mov	r4, r0
 8001f84:	4608      	mov	r0, r1
 8001f86:	4611      	mov	r1, r2
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4623      	mov	r3, r4
 8001f8c:	80fb      	strh	r3, [r7, #6]
 8001f8e:	4603      	mov	r3, r0
 8001f90:	80bb      	strh	r3, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	807b      	strh	r3, [r7, #2]
 8001f96:	4613      	mov	r3, r2
 8001f98:	803b      	strh	r3, [r7, #0]
  LCD_IO_WriteCmd8(ST7735_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8001f9a:	202a      	movs	r0, #42	; 0x2a
 8001f9c:	f7ff fd28 	bl	80019f0 <LCD_IO_WriteCmd8>
 8001fa0:	88bb      	ldrh	r3, [r7, #4]
 8001fa2:	0a1b      	lsrs	r3, r3, #8
 8001fa4:	b29b      	uxth	r3, r3
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fd3d 	bl	8001a28 <LCD_IO_WriteData8>
 8001fae:	88bb      	ldrh	r3, [r7, #4]
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fd38 	bl	8001a28 <LCD_IO_WriteData8>
 8001fb8:	88ba      	ldrh	r2, [r7, #4]
 8001fba:	883b      	ldrh	r3, [r7, #0]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	121b      	asrs	r3, r3, #8
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fd2f 	bl	8001a28 <LCD_IO_WriteData8>
 8001fca:	88bb      	ldrh	r3, [r7, #4]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	883b      	ldrh	r3, [r7, #0]
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fd24 	bl	8001a28 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ST7735_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8001fe0:	202b      	movs	r0, #43	; 0x2b
 8001fe2:	f7ff fd05 	bl	80019f0 <LCD_IO_WriteCmd8>
 8001fe6:	887b      	ldrh	r3, [r7, #2]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f7ff fd1a 	bl	8001a28 <LCD_IO_WriteData8>
 8001ff4:	887b      	ldrh	r3, [r7, #2]
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f7ff fd15 	bl	8001a28 <LCD_IO_WriteData8>
 8001ffe:	887b      	ldrh	r3, [r7, #2]
 8002000:	0a1b      	lsrs	r3, r3, #8
 8002002:	b29b      	uxth	r3, r3
 8002004:	b2db      	uxtb	r3, r3
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fd0e 	bl	8001a28 <LCD_IO_WriteData8>
 800200c:	887b      	ldrh	r3, [r7, #2]
 800200e:	b2db      	uxtb	r3, r3
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff fd09 	bl	8001a28 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ST7735_RAMWR, RGBCode, Length);
 8002016:	883a      	ldrh	r2, [r7, #0]
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	4619      	mov	r1, r3
 800201c:	202c      	movs	r0, #44	; 0x2c
 800201e:	f7ff fd1f 	bl	8001a60 <LCD_IO_WriteCmd8DataFill16>
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	bd90      	pop	{r4, r7, pc}

0800202a <st7735_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void st7735_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800202a:	b590      	push	{r4, r7, lr}
 800202c:	b083      	sub	sp, #12
 800202e:	af00      	add	r7, sp, #0
 8002030:	4604      	mov	r4, r0
 8002032:	4608      	mov	r0, r1
 8002034:	4611      	mov	r1, r2
 8002036:	461a      	mov	r2, r3
 8002038:	4623      	mov	r3, r4
 800203a:	80fb      	strh	r3, [r7, #6]
 800203c:	4603      	mov	r3, r0
 800203e:	80bb      	strh	r3, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
 8002044:	4613      	mov	r3, r2
 8002046:	803b      	strh	r3, [r7, #0]
  LCD_IO_WriteCmd8(ST7735_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8002048:	202a      	movs	r0, #42	; 0x2a
 800204a:	f7ff fcd1 	bl	80019f0 <LCD_IO_WriteCmd8>
 800204e:	88bb      	ldrh	r3, [r7, #4]
 8002050:	0a1b      	lsrs	r3, r3, #8
 8002052:	b29b      	uxth	r3, r3
 8002054:	b2db      	uxtb	r3, r3
 8002056:	4618      	mov	r0, r3
 8002058:	f7ff fce6 	bl	8001a28 <LCD_IO_WriteData8>
 800205c:	88bb      	ldrh	r3, [r7, #4]
 800205e:	b2db      	uxtb	r3, r3
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fce1 	bl	8001a28 <LCD_IO_WriteData8>
 8002066:	88bb      	ldrh	r3, [r7, #4]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	b29b      	uxth	r3, r3
 800206c:	b2db      	uxtb	r3, r3
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fcda 	bl	8001a28 <LCD_IO_WriteData8>
 8002074:	88bb      	ldrh	r3, [r7, #4]
 8002076:	b2db      	uxtb	r3, r3
 8002078:	4618      	mov	r0, r3
 800207a:	f7ff fcd5 	bl	8001a28 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ST7735_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 800207e:	202b      	movs	r0, #43	; 0x2b
 8002080:	f7ff fcb6 	bl	80019f0 <LCD_IO_WriteCmd8>
 8002084:	887b      	ldrh	r3, [r7, #2]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	b29b      	uxth	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	4618      	mov	r0, r3
 800208e:	f7ff fccb 	bl	8001a28 <LCD_IO_WriteData8>
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff fcc6 	bl	8001a28 <LCD_IO_WriteData8>
 800209c:	887a      	ldrh	r2, [r7, #2]
 800209e:	883b      	ldrh	r3, [r7, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	3b01      	subs	r3, #1
 80020a4:	121b      	asrs	r3, r3, #8
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff fcbd 	bl	8001a28 <LCD_IO_WriteData8>
 80020ae:	887b      	ldrh	r3, [r7, #2]
 80020b0:	b2da      	uxtb	r2, r3
 80020b2:	883b      	ldrh	r3, [r7, #0]
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	4413      	add	r3, r2
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	3b01      	subs	r3, #1
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	4618      	mov	r0, r3
 80020c0:	f7ff fcb2 	bl	8001a28 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ST7735_RAMWR, RGBCode, Length);
 80020c4:	883a      	ldrh	r2, [r7, #0]
 80020c6:	88fb      	ldrh	r3, [r7, #6]
 80020c8:	4619      	mov	r1, r3
 80020ca:	202c      	movs	r0, #44	; 0x2c
 80020cc:	f7ff fcc8 	bl	8001a60 <LCD_IO_WriteCmd8DataFill16>
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd90      	pop	{r4, r7, pc}

080020d8 <st7735_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void st7735_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 80020d8:	b590      	push	{r4, r7, lr}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	4604      	mov	r4, r0
 80020e0:	4608      	mov	r0, r1
 80020e2:	4611      	mov	r1, r2
 80020e4:	461a      	mov	r2, r3
 80020e6:	4623      	mov	r3, r4
 80020e8:	80fb      	strh	r3, [r7, #6]
 80020ea:	4603      	mov	r3, r0
 80020ec:	80bb      	strh	r3, [r7, #4]
 80020ee:	460b      	mov	r3, r1
 80020f0:	807b      	strh	r3, [r7, #2]
 80020f2:	4613      	mov	r3, r2
 80020f4:	803b      	strh	r3, [r7, #0]
  LCD_IO_WriteCmd8(ST7735_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 80020f6:	202a      	movs	r0, #42	; 0x2a
 80020f8:	f7ff fc7a 	bl	80019f0 <LCD_IO_WriteCmd8>
 80020fc:	88fb      	ldrh	r3, [r7, #6]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	b29b      	uxth	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	4618      	mov	r0, r3
 8002106:	f7ff fc8f 	bl	8001a28 <LCD_IO_WriteData8>
 800210a:	88fb      	ldrh	r3, [r7, #6]
 800210c:	b2db      	uxtb	r3, r3
 800210e:	4618      	mov	r0, r3
 8002110:	f7ff fc8a 	bl	8001a28 <LCD_IO_WriteData8>
 8002114:	88fa      	ldrh	r2, [r7, #6]
 8002116:	887b      	ldrh	r3, [r7, #2]
 8002118:	4413      	add	r3, r2
 800211a:	3b01      	subs	r3, #1
 800211c:	121b      	asrs	r3, r3, #8
 800211e:	b2db      	uxtb	r3, r3
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fc81 	bl	8001a28 <LCD_IO_WriteData8>
 8002126:	88fb      	ldrh	r3, [r7, #6]
 8002128:	b2da      	uxtb	r2, r3
 800212a:	887b      	ldrh	r3, [r7, #2]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	4413      	add	r3, r2
 8002130:	b2db      	uxtb	r3, r3
 8002132:	3b01      	subs	r3, #1
 8002134:	b2db      	uxtb	r3, r3
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fc76 	bl	8001a28 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ST7735_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 800213c:	202b      	movs	r0, #43	; 0x2b
 800213e:	f7ff fc57 	bl	80019f0 <LCD_IO_WriteCmd8>
 8002142:	88bb      	ldrh	r3, [r7, #4]
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	b29b      	uxth	r3, r3
 8002148:	b2db      	uxtb	r3, r3
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fc6c 	bl	8001a28 <LCD_IO_WriteData8>
 8002150:	88bb      	ldrh	r3, [r7, #4]
 8002152:	b2db      	uxtb	r3, r3
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff fc67 	bl	8001a28 <LCD_IO_WriteData8>
 800215a:	88ba      	ldrh	r2, [r7, #4]
 800215c:	883b      	ldrh	r3, [r7, #0]
 800215e:	4413      	add	r3, r2
 8002160:	3b01      	subs	r3, #1
 8002162:	121b      	asrs	r3, r3, #8
 8002164:	b2db      	uxtb	r3, r3
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fc5e 	bl	8001a28 <LCD_IO_WriteData8>
 800216c:	88bb      	ldrh	r3, [r7, #4]
 800216e:	b2da      	uxtb	r2, r3
 8002170:	883b      	ldrh	r3, [r7, #0]
 8002172:	b2db      	uxtb	r3, r3
 8002174:	4413      	add	r3, r2
 8002176:	b2db      	uxtb	r3, r3
 8002178:	3b01      	subs	r3, #1
 800217a:	b2db      	uxtb	r3, r3
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fc53 	bl	8001a28 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ST7735_RAMWR, RGBCode, Xsize * Ysize);
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	883a      	ldrh	r2, [r7, #0]
 8002186:	fb02 f303 	mul.w	r3, r2, r3
 800218a:	461a      	mov	r2, r3
 800218c:	8b3b      	ldrh	r3, [r7, #24]
 800218e:	4619      	mov	r1, r3
 8002190:	202c      	movs	r0, #44	; 0x2c
 8002192:	f7ff fc65 	bl	8001a60 <LCD_IO_WriteCmd8DataFill16>
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bd90      	pop	{r4, r7, pc}
	...

080021a0 <st7735_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void st7735_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	4603      	mov	r3, r0
 80021a8:	603a      	str	r2, [r7, #0]
 80021aa:	80fb      	strh	r3, [r7, #6]
 80021ac:	460b      	mov	r3, r1
 80021ae:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	3302      	adds	r3, #2
 80021b4:	881b      	ldrh	r3, [r3, #0]
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	60fb      	str	r3, [r7, #12]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	3304      	adds	r3, #4
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	041b      	lsls	r3, r3, #16
 80021c4:	461a      	mov	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	330a      	adds	r3, #10
 80021d0:	881b      	ldrh	r3, [r3, #0]
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	60bb      	str	r3, [r7, #8]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	330c      	adds	r3, #12
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	b29b      	uxth	r3, r3
 80021de:	041b      	lsls	r3, r3, #16
 80021e0:	461a      	mov	r2, r3
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	60bb      	str	r3, [r7, #8]
  size = (size - index)/2;
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	085b      	lsrs	r3, r3, #1
 80021f0:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	4413      	add	r3, r2
 80021f8:	603b      	str	r3, [r7, #0]

  LCD_IO_WriteCmd8(ST7735_MADCTL); LCD_IO_WriteData8(ST7735_MAD_DATA_RIGHT_THEN_UP);
 80021fa:	2036      	movs	r0, #54	; 0x36
 80021fc:	f7ff fbf8 	bl	80019f0 <LCD_IO_WriteCmd8>
 8002200:	2020      	movs	r0, #32
 8002202:	f7ff fc11 	bl	8001a28 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ST7735_PASET); LCD_IO_WriteData16_to_2x8(ST7735_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ST7735_SIZE_Y - 1 - yStart);
 8002206:	202b      	movs	r0, #43	; 0x2b
 8002208:	f7ff fbf2 	bl	80019f0 <LCD_IO_WriteCmd8>
 800220c:	4b19      	ldr	r3, [pc, #100]	; (8002274 <st7735_DrawBitmap+0xd4>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002214:	121b      	asrs	r3, r3, #8
 8002216:	b2db      	uxtb	r3, r3
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fc05 	bl	8001a28 <LCD_IO_WriteData8>
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <st7735_DrawBitmap+0xd4>)
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	b2db      	uxtb	r3, r3
 8002224:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002228:	b2db      	uxtb	r3, r3
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fbfc 	bl	8001a28 <LCD_IO_WriteData8>
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <st7735_DrawBitmap+0xd8>)
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8002238:	121b      	asrs	r3, r3, #8
 800223a:	b2db      	uxtb	r3, r3
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fbf3 	bl	8001a28 <LCD_IO_WriteData8>
 8002242:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <st7735_DrawBitmap+0xd8>)
 8002244:	881b      	ldrh	r3, [r3, #0]
 8002246:	b2db      	uxtb	r3, r3
 8002248:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800224c:	b2db      	uxtb	r3, r3
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fbea 	bl	8001a28 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ST7735_RAMWR, (uint16_t *)pbmp, size);
 8002254:	68fa      	ldr	r2, [r7, #12]
 8002256:	6839      	ldr	r1, [r7, #0]
 8002258:	202c      	movs	r0, #44	; 0x2c
 800225a:	f7ff fc47 	bl	8001aec <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ST7735_MADCTL); LCD_IO_WriteData8(ST7735_MAD_DATA_RIGHT_THEN_DOWN);
 800225e:	2036      	movs	r0, #54	; 0x36
 8002260:	f7ff fbc6 	bl	80019f0 <LCD_IO_WriteCmd8>
 8002264:	2060      	movs	r0, #96	; 0x60
 8002266:	f7ff fbdf 	bl	8001a28 <LCD_IO_WriteData8>
}
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	200035ac 	.word	0x200035ac
 8002278:	200035aa 	.word	0x200035aa

0800227c <st7735_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void st7735_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pData)
{
 800227c:	b590      	push	{r4, r7, lr}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	4604      	mov	r4, r0
 8002284:	4608      	mov	r0, r1
 8002286:	4611      	mov	r1, r2
 8002288:	461a      	mov	r2, r3
 800228a:	4623      	mov	r3, r4
 800228c:	80fb      	strh	r3, [r7, #6]
 800228e:	4603      	mov	r3, r0
 8002290:	80bb      	strh	r3, [r7, #4]
 8002292:	460b      	mov	r3, r1
 8002294:	807b      	strh	r3, [r7, #2]
 8002296:	4613      	mov	r3, r2
 8002298:	803b      	strh	r3, [r7, #0]
  st7735_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800229a:	883b      	ldrh	r3, [r7, #0]
 800229c:	887a      	ldrh	r2, [r7, #2]
 800229e:	88b9      	ldrh	r1, [r7, #4]
 80022a0:	88f8      	ldrh	r0, [r7, #6]
 80022a2:	f7ff fe03 	bl	8001eac <st7735_SetDisplayWindow>
  LCD_IO_WriteCmd8MultipleData16(ST7735_RAMWR, (uint16_t *)pData, Xsize * Ysize);
 80022a6:	887b      	ldrh	r3, [r7, #2]
 80022a8:	883a      	ldrh	r2, [r7, #0]
 80022aa:	fb02 f303 	mul.w	r3, r2, r3
 80022ae:	461a      	mov	r2, r3
 80022b0:	69b9      	ldr	r1, [r7, #24]
 80022b2:	202c      	movs	r0, #44	; 0x2c
 80022b4:	f7ff fc1a 	bl	8001aec <LCD_IO_WriteCmd8MultipleData16>
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd90      	pop	{r4, r7, pc}

080022c0 <st7735_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void st7735_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pData)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	4604      	mov	r4, r0
 80022c8:	4608      	mov	r0, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	4623      	mov	r3, r4
 80022d0:	80fb      	strh	r3, [r7, #6]
 80022d2:	4603      	mov	r3, r0
 80022d4:	80bb      	strh	r3, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	807b      	strh	r3, [r7, #2]
 80022da:	4613      	mov	r3, r2
 80022dc:	803b      	strh	r3, [r7, #0]
  st7735_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 80022de:	883b      	ldrh	r3, [r7, #0]
 80022e0:	887a      	ldrh	r2, [r7, #2]
 80022e2:	88b9      	ldrh	r1, [r7, #4]
 80022e4:	88f8      	ldrh	r0, [r7, #6]
 80022e6:	f7ff fde1 	bl	8001eac <st7735_SetDisplayWindow>
  LCD_IO_ReadCmd8MultipleData24to16(ST7735_RAMRD, (uint16_t *)pData, Xsize * Ysize, 1);
 80022ea:	887b      	ldrh	r3, [r7, #2]
 80022ec:	883a      	ldrh	r2, [r7, #0]
 80022ee:	fb02 f303 	mul.w	r3, r2, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	2301      	movs	r3, #1
 80022f6:	69b9      	ldr	r1, [r7, #24]
 80022f8:	202e      	movs	r0, #46	; 0x2e
 80022fa:	f7ff fc29 	bl	8001b50 <LCD_IO_ReadCmd8MultipleData24to16>
}
 80022fe:	bf00      	nop
 8002300:	370c      	adds	r7, #12
 8002302:	46bd      	mov	sp, r7
 8002304:	bd90      	pop	{r4, r7, pc}
	...

08002308 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	71fb      	strb	r3, [r7, #7]
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <BSP_LCD_Init+0x3c>)
 8002314:	2200      	movs	r2, #0
 8002316:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <BSP_LCD_Init+0x3c>)
 800231a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800231e:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <BSP_LCD_Init+0x3c>)
 8002322:	4a09      	ldr	r2, [pc, #36]	; (8002348 <BSP_LCD_Init+0x40>)
 8002324:	609a      	str	r2, [r3, #8]
  
  /* LCD Init */   
  lcd_drv->Init();
 8002326:	4b09      	ldr	r3, [pc, #36]	; (800234c <BSP_LCD_Init+0x44>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4798      	blx	r3
  
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
 800232e:	2000      	movs	r0, #0
 8002330:	f000 f856 	bl	80023e0 <BSP_LCD_Clear>
  #endif
  
  ret = LCD_OK;
 8002334:	2300      	movs	r3, #0
 8002336:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002338:	79fb      	ldrb	r3, [r7, #7]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20010b50 	.word	0x20010b50
 8002348:	200020ac 	.word	0x200020ac
 800234c:	200020f4 	.word	0x200020f4

08002350 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 8002354:	4b03      	ldr	r3, [pc, #12]	; (8002364 <BSP_LCD_GetXSize+0x14>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	4798      	blx	r3
 800235c:	4603      	mov	r3, r0
}
 800235e:	4618      	mov	r0, r3
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200020f4 	.word	0x200020f4

08002368 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 800236c:	4b03      	ldr	r3, [pc, #12]	; (800237c <BSP_LCD_GetYSize+0x14>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	4798      	blx	r3
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	200020f4 	.word	0x200020f4

08002380 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 800238a:	88fb      	ldrh	r3, [r7, #6]
 800238c:	4a03      	ldr	r2, [pc, #12]	; (800239c <BSP_LCD_SetTextColor+0x1c>)
 800238e:	6013      	str	r3, [r2, #0]
}
 8002390:	bf00      	nop
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr
 800239c:	20010b50 	.word	0x20010b50

080023a0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 80023aa:	88fb      	ldrh	r3, [r7, #6]
 80023ac:	4a03      	ldr	r2, [pc, #12]	; (80023bc <BSP_LCD_SetBackColor+0x1c>)
 80023ae:	6053      	str	r3, [r2, #4]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	20010b50 	.word	0x20010b50

080023c0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = pFonts;
 80023c8:	4a04      	ldr	r2, [pc, #16]	; (80023dc <BSP_LCD_SetFont+0x1c>)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6093      	str	r3, [r2, #8]
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	20010b50 	.word	0x20010b50

080023e0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 80023e0:	b5b0      	push	{r4, r5, r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af02      	add	r7, sp, #8
 80023e6:	4603      	mov	r3, r0
 80023e8:	80fb      	strh	r3, [r7, #6]
  #ifdef   LCD_DRVTYPE_V1_1
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <BSP_LCD_Clear+0x38>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 80023f0:	f7ff ffae 	bl	8002350 <BSP_LCD_GetXSize>
 80023f4:	4603      	mov	r3, r0
 80023f6:	461d      	mov	r5, r3
 80023f8:	f7ff ffb6 	bl	8002368 <BSP_LCD_GetYSize>
 80023fc:	4603      	mov	r3, r0
 80023fe:	461a      	mov	r2, r3
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	462a      	mov	r2, r5
 8002408:	2100      	movs	r1, #0
 800240a:	2000      	movs	r0, #0
 800240c:	47a0      	blx	r4
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
  }
  DrawProp.TextColor = color_backup; 
  BSP_LCD_SetTextColor(DrawProp.TextColor);
  #endif
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bdb0      	pop	{r4, r5, r7, pc}
 8002416:	bf00      	nop
 8002418:	200020f4 	.word	0x200020f4

0800241c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	4603      	mov	r3, r0
 8002424:	80fb      	strh	r3, [r7, #6]
 8002426:	460b      	mov	r3, r1
 8002428:	80bb      	strh	r3, [r7, #4]
 800242a:	4613      	mov	r3, r2
 800242c:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 800242e:	4b08      	ldr	r3, [pc, #32]	; (8002450 <BSP_LCD_DrawPixel+0x34>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	695b      	ldr	r3, [r3, #20]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d006      	beq.n	8002446 <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <BSP_LCD_DrawPixel+0x34>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	887a      	ldrh	r2, [r7, #2]
 8002440:	88b9      	ldrh	r1, [r7, #4]
 8002442:	88f8      	ldrh	r0, [r7, #6]
 8002444:	4798      	blx	r3
  }
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200020f4 	.word	0x200020f4

08002454 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002454:	b590      	push	{r4, r7, lr}
 8002456:	b085      	sub	sp, #20
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	80fb      	strh	r3, [r7, #6]
 800245e:	460b      	mov	r3, r1
 8002460:	80bb      	strh	r3, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <BSP_LCD_DrawHLine+0x6c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002474:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <BSP_LCD_DrawHLine+0x6c>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6a1c      	ldr	r4, [r3, #32]
 800247a:	4b12      	ldr	r3, [pc, #72]	; (80024c4 <BSP_LCD_DrawHLine+0x70>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	b298      	uxth	r0, r3
 8002480:	887b      	ldrh	r3, [r7, #2]
 8002482:	88ba      	ldrh	r2, [r7, #4]
 8002484:	88f9      	ldrh	r1, [r7, #6]
 8002486:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002488:	e015      	b.n	80024b6 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 800248a:	2300      	movs	r3, #0
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	e00e      	b.n	80024ae <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	b29a      	uxth	r2, r3
 8002494:	88fb      	ldrh	r3, [r7, #6]
 8002496:	4413      	add	r3, r2
 8002498:	b298      	uxth	r0, r3
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <BSP_LCD_DrawHLine+0x70>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	b29a      	uxth	r2, r3
 80024a0:	88bb      	ldrh	r3, [r7, #4]
 80024a2:	4619      	mov	r1, r3
 80024a4:	f7ff ffba 	bl	800241c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	3301      	adds	r3, #1
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	887b      	ldrh	r3, [r7, #2]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d3ec      	bcc.n	8002490 <BSP_LCD_DrawHLine+0x3c>
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}
 80024be:	bf00      	nop
 80024c0:	200020f4 	.word	0x200020f4
 80024c4:	20010b50 	.word	0x20010b50

080024c8 <BSP_LCD_DrawVLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawVLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	80fb      	strh	r3, [r7, #6]
 80024d2:	460b      	mov	r3, r1
 80024d4:	80bb      	strh	r3, [r7, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawVLine != NULL)
 80024de:	4b15      	ldr	r3, [pc, #84]	; (8002534 <BSP_LCD_DrawVLine+0x6c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <BSP_LCD_DrawVLine+0x36>
  {
    lcd_drv->DrawVLine(DrawProp.TextColor, Xpos, Ypos, Length);
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <BSP_LCD_DrawVLine+0x6c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <BSP_LCD_DrawVLine+0x70>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	b298      	uxth	r0, r3
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	88ba      	ldrh	r2, [r7, #4]
 80024f8:	88f9      	ldrh	r1, [r7, #6]
 80024fa:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
    }
  }
}
 80024fc:	e015      	b.n	800252a <BSP_LCD_DrawVLine+0x62>
    for(index = 0; index < Length; index++)
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	e00e      	b.n	8002522 <BSP_LCD_DrawVLine+0x5a>
      BSP_LCD_DrawPixel(Xpos, Ypos + index, DrawProp.TextColor);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	b29a      	uxth	r2, r3
 8002508:	88bb      	ldrh	r3, [r7, #4]
 800250a:	4413      	add	r3, r2
 800250c:	b299      	uxth	r1, r3
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <BSP_LCD_DrawVLine+0x70>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	b29a      	uxth	r2, r3
 8002514:	88fb      	ldrh	r3, [r7, #6]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ff80 	bl	800241c <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	3301      	adds	r3, #1
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	887b      	ldrh	r3, [r7, #2]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	429a      	cmp	r2, r3
 8002528:	d3ec      	bcc.n	8002504 <BSP_LCD_DrawVLine+0x3c>
}
 800252a:	bf00      	nop
 800252c:	3714      	adds	r7, #20
 800252e:	46bd      	mov	sp, r7
 8002530:	bd90      	pop	{r4, r7, pc}
 8002532:	bf00      	nop
 8002534:	200020f4 	.word	0x200020f4
 8002538:	20010b50 	.word	0x20010b50

0800253c <BSP_LCD_DrawRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_DrawRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	4604      	mov	r4, r0
 8002544:	4608      	mov	r0, r1
 8002546:	4611      	mov	r1, r2
 8002548:	461a      	mov	r2, r3
 800254a:	4623      	mov	r3, r4
 800254c:	80fb      	strh	r3, [r7, #6]
 800254e:	4603      	mov	r3, r0
 8002550:	80bb      	strh	r3, [r7, #4]
 8002552:	460b      	mov	r3, r1
 8002554:	807b      	strh	r3, [r7, #2]
 8002556:	4613      	mov	r3, r2
 8002558:	803b      	strh	r3, [r7, #0]
  /* Draw horizontal lines */
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 800255a:	887a      	ldrh	r2, [r7, #2]
 800255c:	88b9      	ldrh	r1, [r7, #4]
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff ff77 	bl	8002454 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos + Height - 1), Width);
 8002566:	88ba      	ldrh	r2, [r7, #4]
 8002568:	883b      	ldrh	r3, [r7, #0]
 800256a:	4413      	add	r3, r2
 800256c:	b29b      	uxth	r3, r3
 800256e:	3b01      	subs	r3, #1
 8002570:	b299      	uxth	r1, r3
 8002572:	887a      	ldrh	r2, [r7, #2]
 8002574:	88fb      	ldrh	r3, [r7, #6]
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff ff6c 	bl	8002454 <BSP_LCD_DrawHLine>
  
  /* Draw vertical lines */
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 800257c:	883a      	ldrh	r2, [r7, #0]
 800257e:	88b9      	ldrh	r1, [r7, #4]
 8002580:	88fb      	ldrh	r3, [r7, #6]
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff ffa0 	bl	80024c8 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width - 1), Ypos, Height);
 8002588:	88fa      	ldrh	r2, [r7, #6]
 800258a:	887b      	ldrh	r3, [r7, #2]
 800258c:	4413      	add	r3, r2
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29b      	uxth	r3, r3
 8002594:	883a      	ldrh	r2, [r7, #0]
 8002596:	88b9      	ldrh	r1, [r7, #4]
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff ff95 	bl	80024c8 <BSP_LCD_DrawVLine>
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd90      	pop	{r4, r7, pc}
	...

080025a8 <BSP_LCD_FillBuffer>:
  }
  while (y <= 0);
}

void BSP_LCD_FillBuffer(uint16_t Xpos, uint16_t Ypos, uint16_t width, uint16_t height, uint8_t *pBuffer)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	4604      	mov	r4, r0
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4623      	mov	r3, r4
 80025b8:	80fb      	strh	r3, [r7, #6]
 80025ba:	4603      	mov	r3, r0
 80025bc:	80bb      	strh	r3, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	807b      	strh	r3, [r7, #2]
 80025c2:	4613      	mov	r3, r2
 80025c4:	803b      	strh	r3, [r7, #0]
	lcd_drv->DrawRGBImage(Xpos, Ypos, width, height, pBuffer);
 80025c6:	4b07      	ldr	r3, [pc, #28]	; (80025e4 <BSP_LCD_FillBuffer+0x3c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80025cc:	883d      	ldrh	r5, [r7, #0]
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	88b9      	ldrh	r1, [r7, #4]
 80025d2:	88f8      	ldrh	r0, [r7, #6]
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	9300      	str	r3, [sp, #0]
 80025d8:	462b      	mov	r3, r5
 80025da:	47a0      	blx	r4
}
 80025dc:	bf00      	nop
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bdb0      	pop	{r4, r5, r7, pc}
 80025e4:	200020f4 	.word	0x200020f4

080025e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	4a07      	ldr	r2, [pc, #28]	; (8002614 <vApplicationGetIdleTaskMemory+0x2c>)
 80025f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	4a06      	ldr	r2, [pc, #24]	; (8002618 <vApplicationGetIdleTaskMemory+0x30>)
 80025fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2280      	movs	r2, #128	; 0x80
 8002604:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	200035b0 	.word	0x200035b0
 8002618:	20003604 	.word	0x20003604

0800261c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800261c:	b5b0      	push	{r4, r5, r7, lr}
 800261e:	b08e      	sub	sp, #56	; 0x38
 8002620:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002622:	f000 ffef 	bl	8003604 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002626:	f000 f849 	bl	80026bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800262a:	f000 fabf 	bl	8002bac <MX_GPIO_Init>
  MX_DMA_Init();
 800262e:	f000 fa0f 	bl	8002a50 <MX_DMA_Init>
  MX_RTC_Init();
 8002632:	f000 f927 	bl	8002884 <MX_RTC_Init>
  MX_SPI1_Init();
 8002636:	f000 f94b 	bl	80028d0 <MX_SPI1_Init>
  MX_TIM4_Init();
 800263a:	f000 f9b5 	bl	80029a8 <MX_TIM4_Init>
  MX_I2C1_Init();
 800263e:	f000 f8c5 	bl	80027cc <MX_I2C1_Init>
  MX_I2S3_Init();
 8002642:	f000 f8f1 	bl	8002828 <MX_I2S3_Init>
  MX_SPI2_Init();
 8002646:	f000 f979 	bl	800293c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

	HAL_DMA_RegisterCallback(&hdma_memtomem_dma2_stream0,
 800264a:	4a16      	ldr	r2, [pc, #88]	; (80026a4 <main+0x88>)
 800264c:	2100      	movs	r1, #0
 800264e:	4816      	ldr	r0, [pc, #88]	; (80026a8 <main+0x8c>)
 8002650:	f001 fbae 	bl	8003db0 <HAL_DMA_RegisterCallback>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1280);
 8002654:	4b15      	ldr	r3, [pc, #84]	; (80026ac <main+0x90>)
 8002656:	f107 041c 	add.w	r4, r7, #28
 800265a:	461d      	mov	r5, r3
 800265c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800265e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002660:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002668:	f107 031c 	add.w	r3, r7, #28
 800266c:	2100      	movs	r1, #0
 800266e:	4618      	mov	r0, r3
 8002670:	f004 fe55 	bl	800731e <osThreadCreate>
 8002674:	4602      	mov	r2, r0
 8002676:	4b0e      	ldr	r3, [pc, #56]	; (80026b0 <main+0x94>)
 8002678:	601a      	str	r2, [r3, #0]

  /* definition and creation of myTask02 */
  osThreadDef(myTask02, StartTask02, osPriorityNormal, 0, 1280);
 800267a:	4b0e      	ldr	r3, [pc, #56]	; (80026b4 <main+0x98>)
 800267c:	463c      	mov	r4, r7
 800267e:	461d      	mov	r5, r3
 8002680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002688:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  myTask02Handle = osThreadCreate(osThread(myTask02), NULL);
 800268c:	463b      	mov	r3, r7
 800268e:	2100      	movs	r1, #0
 8002690:	4618      	mov	r0, r3
 8002692:	f004 fe44 	bl	800731e <osThreadCreate>
 8002696:	4602      	mov	r2, r0
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <main+0x9c>)
 800269a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800269c:	f004 fe38 	bl	8007310 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	while (1) {
 80026a0:	e7fe      	b.n	80026a0 <main+0x84>
 80026a2:	bf00      	nop
 80026a4:	08000f45 	.word	0x08000f45
 80026a8:	20010bb8 	.word	0x20010bb8
 80026ac:	08009b4c 	.word	0x08009b4c
 80026b0:	20010b5c 	.word	0x20010b5c
 80026b4:	08009b74 	.word	0x08009b74
 80026b8:	20010d6c 	.word	0x20010d6c

080026bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b09a      	sub	sp, #104	; 0x68
 80026c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80026c6:	2230      	movs	r2, #48	; 0x30
 80026c8:	2100      	movs	r1, #0
 80026ca:	4618      	mov	r0, r3
 80026cc:	f007 f9fa 	bl	8009ac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80026d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
 80026d8:	605a      	str	r2, [r3, #4]
 80026da:	609a      	str	r2, [r3, #8]
 80026dc:	60da      	str	r2, [r3, #12]
 80026de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80026e0:	f107 030c 	add.w	r3, r7, #12
 80026e4:	2200      	movs	r2, #0
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	605a      	str	r2, [r3, #4]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	60da      	str	r2, [r3, #12]
 80026ee:	611a      	str	r2, [r3, #16]
 80026f0:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	2300      	movs	r3, #0
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	4b33      	ldr	r3, [pc, #204]	; (80027c4 <SystemClock_Config+0x108>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fa:	4a32      	ldr	r2, [pc, #200]	; (80027c4 <SystemClock_Config+0x108>)
 80026fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002700:	6413      	str	r3, [r2, #64]	; 0x40
 8002702:	4b30      	ldr	r3, [pc, #192]	; (80027c4 <SystemClock_Config+0x108>)
 8002704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800270a:	60bb      	str	r3, [r7, #8]
 800270c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800270e:	2300      	movs	r3, #0
 8002710:	607b      	str	r3, [r7, #4]
 8002712:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <SystemClock_Config+0x10c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a2c      	ldr	r2, [pc, #176]	; (80027c8 <SystemClock_Config+0x10c>)
 8002718:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <SystemClock_Config+0x10c>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002726:	607b      	str	r3, [r7, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800272a:	2309      	movs	r3, #9
 800272c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800272e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002732:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002734:	2301      	movs	r3, #1
 8002736:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002738:	2302      	movs	r3, #2
 800273a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800273c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002740:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 12;
 8002742:	230c      	movs	r3, #12
 8002744:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 96;
 8002746:	2360      	movs	r3, #96	; 0x60
 8002748:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800274a:	2302      	movs	r3, #2
 800274c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800274e:	2305      	movs	r3, #5
 8002750:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002752:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002756:	4618      	mov	r0, r3
 8002758:	f003 f950 	bl	80059fc <HAL_RCC_OscConfig>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8002762:	f000 faa9 	bl	8002cb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002766:	230f      	movs	r3, #15
 8002768:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800276a:	2302      	movs	r3, #2
 800276c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800276e:	2300      	movs	r3, #0
 8002770:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002772:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002776:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002778:	2300      	movs	r3, #0
 800277a:	637b      	str	r3, [r7, #52]	; 0x34

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800277c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002780:	2103      	movs	r1, #3
 8002782:	4618      	mov	r0, r3
 8002784:	f003 fbaa 	bl	8005edc <HAL_RCC_ClockConfig>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800278e:	f000 fa93 	bl	8002cb8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S|RCC_PERIPHCLK_RTC;
 8002792:	2303      	movs	r3, #3
 8002794:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002796:	23c0      	movs	r3, #192	; 0xc0
 8002798:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 16;
 800279a:	2310      	movs	r3, #16
 800279c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800279e:	2302      	movs	r3, #2
 80027a0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80027a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027a6:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a8:	f107 030c 	add.w	r3, r7, #12
 80027ac:	4618      	mov	r0, r3
 80027ae:	f003 fd93 	bl	80062d8 <HAL_RCCEx_PeriphCLKConfig>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <SystemClock_Config+0x100>
  {
    Error_Handler();
 80027b8:	f000 fa7e 	bl	8002cb8 <Error_Handler>
  }
}
 80027bc:	bf00      	nop
 80027be:	3768      	adds	r7, #104	; 0x68
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	40007000 	.word	0x40007000

080027cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80027d0:	4b12      	ldr	r3, [pc, #72]	; (800281c <MX_I2C1_Init+0x50>)
 80027d2:	4a13      	ldr	r2, [pc, #76]	; (8002820 <MX_I2C1_Init+0x54>)
 80027d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80027d6:	4b11      	ldr	r3, [pc, #68]	; (800281c <MX_I2C1_Init+0x50>)
 80027d8:	4a12      	ldr	r2, [pc, #72]	; (8002824 <MX_I2C1_Init+0x58>)
 80027da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80027dc:	4b0f      	ldr	r3, [pc, #60]	; (800281c <MX_I2C1_Init+0x50>)
 80027de:	2200      	movs	r2, #0
 80027e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80027e2:	4b0e      	ldr	r3, [pc, #56]	; (800281c <MX_I2C1_Init+0x50>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <MX_I2C1_Init+0x50>)
 80027ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80027ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80027f0:	4b0a      	ldr	r3, [pc, #40]	; (800281c <MX_I2C1_Init+0x50>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <MX_I2C1_Init+0x50>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80027fc:	4b07      	ldr	r3, [pc, #28]	; (800281c <MX_I2C1_Init+0x50>)
 80027fe:	2200      	movs	r2, #0
 8002800:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <MX_I2C1_Init+0x50>)
 8002804:	2200      	movs	r2, #0
 8002806:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002808:	4804      	ldr	r0, [pc, #16]	; (800281c <MX_I2C1_Init+0x50>)
 800280a:	f001 fd9f 	bl	800434c <HAL_I2C_Init>
 800280e:	4603      	mov	r3, r0
 8002810:	2b00      	cmp	r3, #0
 8002812:	d001      	beq.n	8002818 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002814:	f000 fa50 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002818:	bf00      	nop
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20010c58 	.word	0x20010c58
 8002820:	40005400 	.word	0x40005400
 8002824:	000186a0 	.word	0x000186a0

08002828 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <MX_I2S3_Init+0x50>)
 800282e:	4a13      	ldr	r2, [pc, #76]	; (800287c <MX_I2S3_Init+0x54>)
 8002830:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_SLAVE_TX;
 8002832:	4b11      	ldr	r3, [pc, #68]	; (8002878 <MX_I2S3_Init+0x50>)
 8002834:	2200      	movs	r2, #0
 8002836:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8002838:	4b0f      	ldr	r3, [pc, #60]	; (8002878 <MX_I2S3_Init+0x50>)
 800283a:	2200      	movs	r2, #0
 800283c:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800283e:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <MX_I2S3_Init+0x50>)
 8002840:	2200      	movs	r2, #0
 8002842:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <MX_I2S3_Init+0x50>)
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <MX_I2S3_Init+0x50>)
 800284c:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <MX_I2S3_Init+0x58>)
 800284e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8002850:	4b09      	ldr	r3, [pc, #36]	; (8002878 <MX_I2S3_Init+0x50>)
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <MX_I2S3_Init+0x50>)
 8002858:	2200      	movs	r2, #0
 800285a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800285c:	4b06      	ldr	r3, [pc, #24]	; (8002878 <MX_I2S3_Init+0x50>)
 800285e:	2201      	movs	r2, #1
 8002860:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8002862:	4805      	ldr	r0, [pc, #20]	; (8002878 <MX_I2S3_Init+0x50>)
 8002864:	f002 f9c0 	bl	8004be8 <HAL_I2S_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_I2S3_Init+0x4a>
  {
    Error_Handler();
 800286e:	f000 fa23 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8002872:	bf00      	nop
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	20010e48 	.word	0x20010e48
 800287c:	40003c00 	.word	0x40003c00
 8002880:	00017700 	.word	0x00017700

08002884 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <MX_RTC_Init+0x44>)
 800288a:	4a10      	ldr	r2, [pc, #64]	; (80028cc <MX_RTC_Init+0x48>)
 800288c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <MX_RTC_Init+0x44>)
 8002890:	2200      	movs	r2, #0
 8002892:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002894:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <MX_RTC_Init+0x44>)
 8002896:	227f      	movs	r2, #127	; 0x7f
 8002898:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800289a:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <MX_RTC_Init+0x44>)
 800289c:	22ff      	movs	r2, #255	; 0xff
 800289e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <MX_RTC_Init+0x44>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80028a6:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <MX_RTC_Init+0x44>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80028ac:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <MX_RTC_Init+0x44>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80028b2:	4805      	ldr	r0, [pc, #20]	; (80028c8 <MX_RTC_Init+0x44>)
 80028b4:	f003 fe5e 	bl	8006574 <HAL_RTC_Init>
 80028b8:	4603      	mov	r3, r0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d001      	beq.n	80028c2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80028be:	f000 f9fb 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	20010d70 	.word	0x20010d70
 80028cc:	40002800 	.word	0x40002800

080028d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028d4:	4b17      	ldr	r3, [pc, #92]	; (8002934 <MX_SPI1_Init+0x64>)
 80028d6:	4a18      	ldr	r2, [pc, #96]	; (8002938 <MX_SPI1_Init+0x68>)
 80028d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028da:	4b16      	ldr	r3, [pc, #88]	; (8002934 <MX_SPI1_Init+0x64>)
 80028dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028e2:	4b14      	ldr	r3, [pc, #80]	; (8002934 <MX_SPI1_Init+0x64>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <MX_SPI1_Init+0x64>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <MX_SPI1_Init+0x64>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <MX_SPI1_Init+0x64>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80028fa:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <MX_SPI1_Init+0x64>)
 80028fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002900:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002902:	4b0c      	ldr	r3, [pc, #48]	; (8002934 <MX_SPI1_Init+0x64>)
 8002904:	2200      	movs	r2, #0
 8002906:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <MX_SPI1_Init+0x64>)
 800290a:	2200      	movs	r2, #0
 800290c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <MX_SPI1_Init+0x64>)
 8002910:	2200      	movs	r2, #0
 8002912:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002914:	4b07      	ldr	r3, [pc, #28]	; (8002934 <MX_SPI1_Init+0x64>)
 8002916:	2200      	movs	r2, #0
 8002918:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800291a:	4b06      	ldr	r3, [pc, #24]	; (8002934 <MX_SPI1_Init+0x64>)
 800291c:	220a      	movs	r2, #10
 800291e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002920:	4804      	ldr	r0, [pc, #16]	; (8002934 <MX_SPI1_Init+0x64>)
 8002922:	f003 ff0c 	bl	800673e <HAL_SPI_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800292c:	f000 f9c4 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002930:	bf00      	nop
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20010d90 	.word	0x20010d90
 8002938:	40013000 	.word	0x40013000

0800293c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002940:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002942:	4a18      	ldr	r2, [pc, #96]	; (80029a4 <MX_SPI2_Init+0x68>)
 8002944:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002946:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002948:	f44f 7282 	mov.w	r2, #260	; 0x104
 800294c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800294e:	4b14      	ldr	r3, [pc, #80]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002954:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800295a:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <MX_SPI2_Init+0x64>)
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002960:	4b0f      	ldr	r3, [pc, #60]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002962:	2200      	movs	r2, #0
 8002964:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002966:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800296c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800296e:	4b0c      	ldr	r3, [pc, #48]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002970:	2200      	movs	r2, #0
 8002972:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002974:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002976:	2200      	movs	r2, #0
 8002978:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800297a:	4b09      	ldr	r3, [pc, #36]	; (80029a0 <MX_SPI2_Init+0x64>)
 800297c:	2200      	movs	r2, #0
 800297e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002980:	4b07      	ldr	r3, [pc, #28]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002982:	2200      	movs	r2, #0
 8002984:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <MX_SPI2_Init+0x64>)
 8002988:	220a      	movs	r2, #10
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800298c:	4804      	ldr	r0, [pc, #16]	; (80029a0 <MX_SPI2_Init+0x64>)
 800298e:	f003 fed6 	bl	800673e <HAL_SPI_Init>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8002998:	f000 f98e 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800299c:	bf00      	nop
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	20010b60 	.word	0x20010b60
 80029a4:	40003800 	.word	0x40003800

080029a8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08c      	sub	sp, #48	; 0x30
 80029ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80029ae:	f107 030c 	add.w	r3, r7, #12
 80029b2:	2224      	movs	r2, #36	; 0x24
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f007 f884 	bl	8009ac4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029bc:	1d3b      	adds	r3, r7, #4
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
 80029c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80029c4:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <MX_TIM4_Init+0xa0>)
 80029c6:	4a21      	ldr	r2, [pc, #132]	; (8002a4c <MX_TIM4_Init+0xa4>)
 80029c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80029ca:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <MX_TIM4_Init+0xa0>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <MX_TIM4_Init+0xa0>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80029d6:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <MX_TIM4_Init+0xa0>)
 80029d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029de:	4b1a      	ldr	r3, [pc, #104]	; (8002a48 <MX_TIM4_Init+0xa0>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029e4:	4b18      	ldr	r3, [pc, #96]	; (8002a48 <MX_TIM4_Init+0xa0>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80029ea:	2303      	movs	r3, #3
 80029ec:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80029f2:	2301      	movs	r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80029fe:	2300      	movs	r3, #0
 8002a00:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002a02:	2301      	movs	r3, #1
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002a06:	2300      	movs	r3, #0
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002a0e:	f107 030c 	add.w	r3, r7, #12
 8002a12:	4619      	mov	r1, r3
 8002a14:	480c      	ldr	r0, [pc, #48]	; (8002a48 <MX_TIM4_Init+0xa0>)
 8002a16:	f004 f99e 	bl	8006d56 <HAL_TIM_Encoder_Init>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d001      	beq.n	8002a24 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002a20:	f000 f94a 	bl	8002cb8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002a24:	2300      	movs	r3, #0
 8002a26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002a2c:	1d3b      	adds	r3, r7, #4
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4805      	ldr	r0, [pc, #20]	; (8002a48 <MX_TIM4_Init+0xa0>)
 8002a32:	f004 fbd3 	bl	80071dc <HAL_TIMEx_MasterConfigSynchronization>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8002a3c:	f000 f93c 	bl	8002cb8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002a40:	bf00      	nop
 8002a42:	3730      	adds	r7, #48	; 0x30
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20010c18 	.word	0x20010c18
 8002a4c:	40000800 	.word	0x40000800

08002a50 <MX_DMA_Init>:
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma2_stream0
  *   hdma_memtomem_dma2_stream1
  */
static void MX_DMA_Init(void) 
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	4b4f      	ldr	r3, [pc, #316]	; (8002b98 <MX_DMA_Init+0x148>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	4a4e      	ldr	r2, [pc, #312]	; (8002b98 <MX_DMA_Init+0x148>)
 8002a60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a64:	6313      	str	r3, [r2, #48]	; 0x30
 8002a66:	4b4c      	ldr	r3, [pc, #304]	; (8002b98 <MX_DMA_Init+0x148>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6e:	607b      	str	r3, [r7, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a72:	2300      	movs	r3, #0
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	4b48      	ldr	r3, [pc, #288]	; (8002b98 <MX_DMA_Init+0x148>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	4a47      	ldr	r2, [pc, #284]	; (8002b98 <MX_DMA_Init+0x148>)
 8002a7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a80:	6313      	str	r3, [r2, #48]	; 0x30
 8002a82:	4b45      	ldr	r3, [pc, #276]	; (8002b98 <MX_DMA_Init+0x148>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8a:	603b      	str	r3, [r7, #0]
 8002a8c:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma2_stream0 on DMA2_Stream0 */
  hdma_memtomem_dma2_stream0.Instance = DMA2_Stream0;
 8002a8e:	4b43      	ldr	r3, [pc, #268]	; (8002b9c <MX_DMA_Init+0x14c>)
 8002a90:	4a43      	ldr	r2, [pc, #268]	; (8002ba0 <MX_DMA_Init+0x150>)
 8002a92:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream0.Init.Channel = DMA_CHANNEL_0;
 8002a94:	4b41      	ldr	r3, [pc, #260]	; (8002b9c <MX_DMA_Init+0x14c>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream0.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002a9a:	4b40      	ldr	r3, [pc, #256]	; (8002b9c <MX_DMA_Init+0x14c>)
 8002a9c:	2280      	movs	r2, #128	; 0x80
 8002a9e:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream0.Init.PeriphInc = DMA_PINC_ENABLE;
 8002aa0:	4b3e      	ldr	r3, [pc, #248]	; (8002b9c <MX_DMA_Init+0x14c>)
 8002aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002aa6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream0.Init.MemInc = DMA_MINC_ENABLE;
 8002aa8:	4b3c      	ldr	r3, [pc, #240]	; (8002b9c <MX_DMA_Init+0x14c>)
 8002aaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002aae:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream0.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ab0:	4b3a      	ldr	r3, [pc, #232]	; (8002b9c <MX_DMA_Init+0x14c>)
 8002ab2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ab6:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream0.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ab8:	4b38      	ldr	r3, [pc, #224]	; (8002b9c <MX_DMA_Init+0x14c>)
 8002aba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002abe:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream0.Init.Mode = DMA_NORMAL;
 8002ac0:	4b36      	ldr	r3, [pc, #216]	; (8002b9c <MX_DMA_Init+0x14c>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream0.Init.Priority = DMA_PRIORITY_HIGH;
 8002ac6:	4b35      	ldr	r3, [pc, #212]	; (8002b9c <MX_DMA_Init+0x14c>)
 8002ac8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002acc:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream0.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002ace:	4b33      	ldr	r3, [pc, #204]	; (8002b9c <MX_DMA_Init+0x14c>)
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream0.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002ad4:	4b31      	ldr	r3, [pc, #196]	; (8002b9c <MX_DMA_Init+0x14c>)
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream0.Init.MemBurst = DMA_MBURST_SINGLE;
 8002ada:	4b30      	ldr	r3, [pc, #192]	; (8002b9c <MX_DMA_Init+0x14c>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream0.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002ae0:	4b2e      	ldr	r3, [pc, #184]	; (8002b9c <MX_DMA_Init+0x14c>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream0) != HAL_OK)
 8002ae6:	482d      	ldr	r0, [pc, #180]	; (8002b9c <MX_DMA_Init+0x14c>)
 8002ae8:	f000 fed2 	bl	8003890 <HAL_DMA_Init>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d001      	beq.n	8002af6 <MX_DMA_Init+0xa6>
  {
    Error_Handler( );
 8002af2:	f000 f8e1 	bl	8002cb8 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma2_stream1 on DMA2_Stream1 */
  hdma_memtomem_dma2_stream1.Instance = DMA2_Stream1;
 8002af6:	4b2b      	ldr	r3, [pc, #172]	; (8002ba4 <MX_DMA_Init+0x154>)
 8002af8:	4a2b      	ldr	r2, [pc, #172]	; (8002ba8 <MX_DMA_Init+0x158>)
 8002afa:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma2_stream1.Init.Channel = DMA_CHANNEL_0;
 8002afc:	4b29      	ldr	r3, [pc, #164]	; (8002ba4 <MX_DMA_Init+0x154>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma2_stream1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002b02:	4b28      	ldr	r3, [pc, #160]	; (8002ba4 <MX_DMA_Init+0x154>)
 8002b04:	2280      	movs	r2, #128	; 0x80
 8002b06:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma2_stream1.Init.PeriphInc = DMA_PINC_ENABLE;
 8002b08:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <MX_DMA_Init+0x154>)
 8002b0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b0e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma2_stream1.Init.MemInc = DMA_MINC_ENABLE;
 8002b10:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <MX_DMA_Init+0x154>)
 8002b12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b16:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma2_stream1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b18:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <MX_DMA_Init+0x154>)
 8002b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b1e:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma2_stream1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b20:	4b20      	ldr	r3, [pc, #128]	; (8002ba4 <MX_DMA_Init+0x154>)
 8002b22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b26:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma2_stream1.Init.Mode = DMA_NORMAL;
 8002b28:	4b1e      	ldr	r3, [pc, #120]	; (8002ba4 <MX_DMA_Init+0x154>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma2_stream1.Init.Priority = DMA_PRIORITY_HIGH;
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <MX_DMA_Init+0x154>)
 8002b30:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b34:	621a      	str	r2, [r3, #32]
  hdma_memtomem_dma2_stream1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002b36:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <MX_DMA_Init+0x154>)
 8002b38:	2204      	movs	r2, #4
 8002b3a:	625a      	str	r2, [r3, #36]	; 0x24
  hdma_memtomem_dma2_stream1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002b3c:	4b19      	ldr	r3, [pc, #100]	; (8002ba4 <MX_DMA_Init+0x154>)
 8002b3e:	2203      	movs	r2, #3
 8002b40:	629a      	str	r2, [r3, #40]	; 0x28
  hdma_memtomem_dma2_stream1.Init.MemBurst = DMA_MBURST_SINGLE;
 8002b42:	4b18      	ldr	r3, [pc, #96]	; (8002ba4 <MX_DMA_Init+0x154>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma_memtomem_dma2_stream1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002b48:	4b16      	ldr	r3, [pc, #88]	; (8002ba4 <MX_DMA_Init+0x154>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DMA_Init(&hdma_memtomem_dma2_stream1) != HAL_OK)
 8002b4e:	4815      	ldr	r0, [pc, #84]	; (8002ba4 <MX_DMA_Init+0x154>)
 8002b50:	f000 fe9e 	bl	8003890 <HAL_DMA_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <MX_DMA_Init+0x10e>
  {
    Error_Handler( );
 8002b5a:	f000 f8ad 	bl	8002cb8 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2105      	movs	r1, #5
 8002b62:	200b      	movs	r0, #11
 8002b64:	f000 fe6a 	bl	800383c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002b68:	200b      	movs	r0, #11
 8002b6a:	f000 fe83 	bl	8003874 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8002b6e:	2200      	movs	r2, #0
 8002b70:	2105      	movs	r1, #5
 8002b72:	2010      	movs	r0, #16
 8002b74:	f000 fe62 	bl	800383c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002b78:	2010      	movs	r0, #16
 8002b7a:	f000 fe7b 	bl	8003874 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2100      	movs	r1, #0
 8002b82:	2038      	movs	r0, #56	; 0x38
 8002b84:	f000 fe5a 	bl	800383c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002b88:	2038      	movs	r0, #56	; 0x38
 8002b8a:	f000 fe73 	bl	8003874 <HAL_NVIC_EnableIRQ>

}
 8002b8e:	bf00      	nop
 8002b90:	3708      	adds	r7, #8
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	20010bb8 	.word	0x20010bb8
 8002ba0:	40026410 	.word	0x40026410
 8002ba4:	20010d0c 	.word	0x20010d0c
 8002ba8:	40026428 	.word	0x40026428

08002bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb2:	f107 0314 	add.w	r3, r7, #20
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]
 8002bbc:	609a      	str	r2, [r3, #8]
 8002bbe:	60da      	str	r2, [r3, #12]
 8002bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
 8002bc6:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <MX_GPIO_Init+0xb4>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	4a25      	ldr	r2, [pc, #148]	; (8002c60 <MX_GPIO_Init+0xb4>)
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bd2:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <MX_GPIO_Init+0xb4>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	f003 0304 	and.w	r3, r3, #4
 8002bda:	613b      	str	r3, [r7, #16]
 8002bdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b1f      	ldr	r3, [pc, #124]	; (8002c60 <MX_GPIO_Init+0xb4>)
 8002be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be6:	4a1e      	ldr	r2, [pc, #120]	; (8002c60 <MX_GPIO_Init+0xb4>)
 8002be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bec:	6313      	str	r3, [r2, #48]	; 0x30
 8002bee:	4b1c      	ldr	r3, [pc, #112]	; (8002c60 <MX_GPIO_Init+0xb4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <MX_GPIO_Init+0xb4>)
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	4a17      	ldr	r2, [pc, #92]	; (8002c60 <MX_GPIO_Init+0xb4>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <MX_GPIO_Init+0xb4>)
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	60bb      	str	r3, [r7, #8]
 8002c14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	607b      	str	r3, [r7, #4]
 8002c1a:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <MX_GPIO_Init+0xb4>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a10      	ldr	r2, [pc, #64]	; (8002c60 <MX_GPIO_Init+0xb4>)
 8002c20:	f043 0302 	orr.w	r3, r3, #2
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b0e      	ldr	r3, [pc, #56]	; (8002c60 <MX_GPIO_Init+0xb4>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0302 	and.w	r3, r3, #2
 8002c2e:	607b      	str	r3, [r7, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FLASH_CS_GPIO_Port, FLASH_CS_Pin, GPIO_PIN_RESET);
 8002c32:	2200      	movs	r2, #0
 8002c34:	2110      	movs	r1, #16
 8002c36:	480b      	ldr	r0, [pc, #44]	; (8002c64 <MX_GPIO_Init+0xb8>)
 8002c38:	f001 fb6e 	bl	8004318 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : FLASH_CS_Pin */
  GPIO_InitStruct.Pin = FLASH_CS_Pin;
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c40:	2301      	movs	r3, #1
 8002c42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c48:	2302      	movs	r3, #2
 8002c4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(FLASH_CS_GPIO_Port, &GPIO_InitStruct);
 8002c4c:	f107 0314 	add.w	r3, r7, #20
 8002c50:	4619      	mov	r1, r3
 8002c52:	4804      	ldr	r0, [pc, #16]	; (8002c64 <MX_GPIO_Init+0xb8>)
 8002c54:	f001 f9de 	bl	8004014 <HAL_GPIO_Init>

}
 8002c58:	bf00      	nop
 8002c5a:	3728      	adds	r7, #40	; 0x28
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	40023800 	.word	0x40023800
 8002c64:	40020000 	.word	0x40020000

08002c68 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	init();
 8002c70:	f7fe fab4 	bl	80011dc <init>
	/* Infinite loop */
	for (;;) {
		render();
 8002c74:	f7fe fa44 	bl	8001100 <render>
		osDelay(1);
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f004 fb9c 	bl	80073b6 <osDelay>
		render();
 8002c7e:	e7f9      	b.n	8002c74 <StartDefaultTask+0xc>

08002c80 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
  for(;;)
  {
	  update();
 8002c88:	f7fe f978 	bl	8000f7c <update>
    osDelay(1);
 8002c8c:	2001      	movs	r0, #1
 8002c8e:	f004 fb92 	bl	80073b6 <osDelay>
	  update();
 8002c92:	e7f9      	b.n	8002c88 <StartTask02+0x8>

08002c94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d101      	bne.n	8002caa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002ca6:	f000 fccf 	bl	8003648 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002caa:	bf00      	nop
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40010000 	.word	0x40010000

08002cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002cbc:	bf00      	nop
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
 8002cd2:	4b12      	ldr	r3, [pc, #72]	; (8002d1c <HAL_MspInit+0x54>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	4a11      	ldr	r2, [pc, #68]	; (8002d1c <HAL_MspInit+0x54>)
 8002cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <HAL_MspInit+0x54>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce6:	607b      	str	r3, [r7, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cea:	2300      	movs	r3, #0
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <HAL_MspInit+0x54>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <HAL_MspInit+0x54>)
 8002cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cfa:	4b08      	ldr	r3, [pc, #32]	; (8002d1c <HAL_MspInit+0x54>)
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002d06:	2200      	movs	r2, #0
 8002d08:	210f      	movs	r1, #15
 8002d0a:	f06f 0001 	mvn.w	r0, #1
 8002d0e:	f000 fd95 	bl	800383c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	40023800 	.word	0x40023800

08002d20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b08a      	sub	sp, #40	; 0x28
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d28:	f107 0314 	add.w	r3, r7, #20
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a19      	ldr	r2, [pc, #100]	; (8002da4 <HAL_I2C_MspInit+0x84>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d12c      	bne.n	8002d9c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d42:	2300      	movs	r3, #0
 8002d44:	613b      	str	r3, [r7, #16]
 8002d46:	4b18      	ldr	r3, [pc, #96]	; (8002da8 <HAL_I2C_MspInit+0x88>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	4a17      	ldr	r2, [pc, #92]	; (8002da8 <HAL_I2C_MspInit+0x88>)
 8002d4c:	f043 0302 	orr.w	r3, r3, #2
 8002d50:	6313      	str	r3, [r2, #48]	; 0x30
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <HAL_I2C_MspInit+0x88>)
 8002d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	613b      	str	r3, [r7, #16]
 8002d5c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002d5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d64:	2312      	movs	r3, #18
 8002d66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d70:	2304      	movs	r3, #4
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	4619      	mov	r1, r3
 8002d7a:	480c      	ldr	r0, [pc, #48]	; (8002dac <HAL_I2C_MspInit+0x8c>)
 8002d7c:	f001 f94a 	bl	8004014 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d80:	2300      	movs	r3, #0
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <HAL_I2C_MspInit+0x88>)
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	4a07      	ldr	r2, [pc, #28]	; (8002da8 <HAL_I2C_MspInit+0x88>)
 8002d8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d8e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d90:	4b05      	ldr	r3, [pc, #20]	; (8002da8 <HAL_I2C_MspInit+0x88>)
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d9c:	bf00      	nop
 8002d9e:	3728      	adds	r7, #40	; 0x28
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40005400 	.word	0x40005400
 8002da8:	40023800 	.word	0x40023800
 8002dac:	40020400 	.word	0x40020400

08002db0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b08a      	sub	sp, #40	; 0x28
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db8:	f107 0314 	add.w	r3, r7, #20
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	601a      	str	r2, [r3, #0]
 8002dc0:	605a      	str	r2, [r3, #4]
 8002dc2:	609a      	str	r2, [r3, #8]
 8002dc4:	60da      	str	r2, [r3, #12]
 8002dc6:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a62      	ldr	r2, [pc, #392]	; (8002f58 <HAL_I2S_MspInit+0x1a8>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	f040 80be 	bne.w	8002f50 <HAL_I2S_MspInit+0x1a0>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]
 8002dd8:	4b60      	ldr	r3, [pc, #384]	; (8002f5c <HAL_I2S_MspInit+0x1ac>)
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	4a5f      	ldr	r2, [pc, #380]	; (8002f5c <HAL_I2S_MspInit+0x1ac>)
 8002dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de2:	6413      	str	r3, [r2, #64]	; 0x40
 8002de4:	4b5d      	ldr	r3, [pc, #372]	; (8002f5c <HAL_I2S_MspInit+0x1ac>)
 8002de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
 8002df4:	4b59      	ldr	r3, [pc, #356]	; (8002f5c <HAL_I2S_MspInit+0x1ac>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	4a58      	ldr	r2, [pc, #352]	; (8002f5c <HAL_I2S_MspInit+0x1ac>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8002e00:	4b56      	ldr	r3, [pc, #344]	; (8002f5c <HAL_I2S_MspInit+0x1ac>)
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	f003 0301 	and.w	r3, r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	4b52      	ldr	r3, [pc, #328]	; (8002f5c <HAL_I2S_MspInit+0x1ac>)
 8002e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e14:	4a51      	ldr	r2, [pc, #324]	; (8002f5c <HAL_I2S_MspInit+0x1ac>)
 8002e16:	f043 0302 	orr.w	r3, r3, #2
 8002e1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002e1c:	4b4f      	ldr	r3, [pc, #316]	; (8002f5c <HAL_I2S_MspInit+0x1ac>)
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> I2S3_WS
    PB3     ------> I2S3_CK
    PB4     ------> I2S3_ext_SD
    PB5     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002e28:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e36:	2300      	movs	r3, #0
 8002e38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e3a:	2306      	movs	r3, #6
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e3e:	f107 0314 	add.w	r3, r7, #20
 8002e42:	4619      	mov	r1, r3
 8002e44:	4846      	ldr	r0, [pc, #280]	; (8002f60 <HAL_I2S_MspInit+0x1b0>)
 8002e46:	f001 f8e5 	bl	8004014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8002e4a:	2328      	movs	r3, #40	; 0x28
 8002e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4e:	2302      	movs	r3, #2
 8002e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e56:	2300      	movs	r3, #0
 8002e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e5a:	2306      	movs	r3, #6
 8002e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e5e:	f107 0314 	add.w	r3, r7, #20
 8002e62:	4619      	mov	r1, r3
 8002e64:	483f      	ldr	r0, [pc, #252]	; (8002f64 <HAL_I2S_MspInit+0x1b4>)
 8002e66:	f001 f8d5 	bl	8004014 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e6a:	2310      	movs	r3, #16
 8002e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e72:	2300      	movs	r3, #0
 8002e74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e76:	2300      	movs	r3, #0
 8002e78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_I2S3ext;
 8002e7a:	2307      	movs	r3, #7
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7e:	f107 0314 	add.w	r3, r7, #20
 8002e82:	4619      	mov	r1, r3
 8002e84:	4837      	ldr	r0, [pc, #220]	; (8002f64 <HAL_I2S_MspInit+0x1b4>)
 8002e86:	f001 f8c5 	bl	8004014 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* I2S3_EXT_RX Init */
    hdma_i2s3_ext_rx.Instance = DMA1_Stream0;
 8002e8a:	4b37      	ldr	r3, [pc, #220]	; (8002f68 <HAL_I2S_MspInit+0x1b8>)
 8002e8c:	4a37      	ldr	r2, [pc, #220]	; (8002f6c <HAL_I2S_MspInit+0x1bc>)
 8002e8e:	601a      	str	r2, [r3, #0]
    hdma_i2s3_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8002e90:	4b35      	ldr	r3, [pc, #212]	; (8002f68 <HAL_I2S_MspInit+0x1b8>)
 8002e92:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002e96:	605a      	str	r2, [r3, #4]
    hdma_i2s3_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e98:	4b33      	ldr	r3, [pc, #204]	; (8002f68 <HAL_I2S_MspInit+0x1b8>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	609a      	str	r2, [r3, #8]
    hdma_i2s3_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e9e:	4b32      	ldr	r3, [pc, #200]	; (8002f68 <HAL_I2S_MspInit+0x1b8>)
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	60da      	str	r2, [r3, #12]
    hdma_i2s3_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ea4:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <HAL_I2S_MspInit+0x1b8>)
 8002ea6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eaa:	611a      	str	r2, [r3, #16]
    hdma_i2s3_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002eac:	4b2e      	ldr	r3, [pc, #184]	; (8002f68 <HAL_I2S_MspInit+0x1b8>)
 8002eae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eb2:	615a      	str	r2, [r3, #20]
    hdma_i2s3_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002eb4:	4b2c      	ldr	r3, [pc, #176]	; (8002f68 <HAL_I2S_MspInit+0x1b8>)
 8002eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eba:	619a      	str	r2, [r3, #24]
    hdma_i2s3_ext_rx.Init.Mode = DMA_CIRCULAR;
 8002ebc:	4b2a      	ldr	r3, [pc, #168]	; (8002f68 <HAL_I2S_MspInit+0x1b8>)
 8002ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ec2:	61da      	str	r2, [r3, #28]
    hdma_i2s3_ext_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8002ec4:	4b28      	ldr	r3, [pc, #160]	; (8002f68 <HAL_I2S_MspInit+0x1b8>)
 8002ec6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eca:	621a      	str	r2, [r3, #32]
    hdma_i2s3_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ecc:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <HAL_I2S_MspInit+0x1b8>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s3_ext_rx) != HAL_OK)
 8002ed2:	4825      	ldr	r0, [pc, #148]	; (8002f68 <HAL_I2S_MspInit+0x1b8>)
 8002ed4:	f000 fcdc 	bl	8003890 <HAL_DMA_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2S_MspInit+0x132>
    {
      Error_Handler();
 8002ede:	f7ff feeb 	bl	8002cb8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s3_ext_rx);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a20      	ldr	r2, [pc, #128]	; (8002f68 <HAL_I2S_MspInit+0x1b8>)
 8002ee6:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ee8:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <HAL_I2S_MspInit+0x1b8>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 8002eee:	4b20      	ldr	r3, [pc, #128]	; (8002f70 <HAL_I2S_MspInit+0x1c0>)
 8002ef0:	4a20      	ldr	r2, [pc, #128]	; (8002f74 <HAL_I2S_MspInit+0x1c4>)
 8002ef2:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8002ef4:	4b1e      	ldr	r3, [pc, #120]	; (8002f70 <HAL_I2S_MspInit+0x1c0>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002efa:	4b1d      	ldr	r3, [pc, #116]	; (8002f70 <HAL_I2S_MspInit+0x1c0>)
 8002efc:	2240      	movs	r2, #64	; 0x40
 8002efe:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_I2S_MspInit+0x1c0>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002f06:	4b1a      	ldr	r3, [pc, #104]	; (8002f70 <HAL_I2S_MspInit+0x1c0>)
 8002f08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f0c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f0e:	4b18      	ldr	r3, [pc, #96]	; (8002f70 <HAL_I2S_MspInit+0x1c0>)
 8002f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f14:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <HAL_I2S_MspInit+0x1c0>)
 8002f18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f1c:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 8002f1e:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <HAL_I2S_MspInit+0x1c0>)
 8002f20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f24:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8002f26:	4b12      	ldr	r3, [pc, #72]	; (8002f70 <HAL_I2S_MspInit+0x1c0>)
 8002f28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f2c:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f2e:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_I2S_MspInit+0x1c0>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8002f34:	480e      	ldr	r0, [pc, #56]	; (8002f70 <HAL_I2S_MspInit+0x1c0>)
 8002f36:	f000 fcab 	bl	8003890 <HAL_DMA_Init>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_I2S_MspInit+0x194>
    {
      Error_Handler();
 8002f40:	f7ff feba 	bl	8002cb8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <HAL_I2S_MspInit+0x1c0>)
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
 8002f4a:	4a09      	ldr	r2, [pc, #36]	; (8002f70 <HAL_I2S_MspInit+0x1c0>)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002f50:	bf00      	nop
 8002f52:	3728      	adds	r7, #40	; 0x28
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	40003c00 	.word	0x40003c00
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40020000 	.word	0x40020000
 8002f64:	40020400 	.word	0x40020400
 8002f68:	20010de8 	.word	0x20010de8
 8002f6c:	40026010 	.word	0x40026010
 8002f70:	20010cac 	.word	0x20010cac
 8002f74:	40026088 	.word	0x40026088

08002f78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a05      	ldr	r2, [pc, #20]	; (8002f9c <HAL_RTC_MspInit+0x24>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d102      	bne.n	8002f90 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_RTC_MspInit+0x28>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40002800 	.word	0x40002800
 8002fa0:	42470e3c 	.word	0x42470e3c

08002fa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08c      	sub	sp, #48	; 0x30
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fac:	f107 031c 	add.w	r3, r7, #28
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	605a      	str	r2, [r3, #4]
 8002fb6:	609a      	str	r2, [r3, #8]
 8002fb8:	60da      	str	r2, [r3, #12]
 8002fba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a32      	ldr	r2, [pc, #200]	; (800308c <HAL_SPI_MspInit+0xe8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d12c      	bne.n	8003020 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61bb      	str	r3, [r7, #24]
 8002fca:	4b31      	ldr	r3, [pc, #196]	; (8003090 <HAL_SPI_MspInit+0xec>)
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	4a30      	ldr	r2, [pc, #192]	; (8003090 <HAL_SPI_MspInit+0xec>)
 8002fd0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd6:	4b2e      	ldr	r3, [pc, #184]	; (8003090 <HAL_SPI_MspInit+0xec>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fde:	61bb      	str	r3, [r7, #24]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	4b2a      	ldr	r3, [pc, #168]	; (8003090 <HAL_SPI_MspInit+0xec>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	4a29      	ldr	r2, [pc, #164]	; (8003090 <HAL_SPI_MspInit+0xec>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ff2:	4b27      	ldr	r3, [pc, #156]	; (8003090 <HAL_SPI_MspInit+0xec>)
 8002ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002ffe:	23e0      	movs	r3, #224	; 0xe0
 8003000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003002:	2302      	movs	r3, #2
 8003004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	2300      	movs	r3, #0
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800300a:	2303      	movs	r3, #3
 800300c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800300e:	2305      	movs	r3, #5
 8003010:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003012:	f107 031c 	add.w	r3, r7, #28
 8003016:	4619      	mov	r1, r3
 8003018:	481e      	ldr	r0, [pc, #120]	; (8003094 <HAL_SPI_MspInit+0xf0>)
 800301a:	f000 fffb 	bl	8004014 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800301e:	e031      	b.n	8003084 <HAL_SPI_MspInit+0xe0>
  else if(hspi->Instance==SPI2)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a1c      	ldr	r2, [pc, #112]	; (8003098 <HAL_SPI_MspInit+0xf4>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d12c      	bne.n	8003084 <HAL_SPI_MspInit+0xe0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	4b18      	ldr	r3, [pc, #96]	; (8003090 <HAL_SPI_MspInit+0xec>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	4a17      	ldr	r2, [pc, #92]	; (8003090 <HAL_SPI_MspInit+0xec>)
 8003034:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003038:	6413      	str	r3, [r2, #64]	; 0x40
 800303a:	4b15      	ldr	r3, [pc, #84]	; (8003090 <HAL_SPI_MspInit+0xec>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003042:	613b      	str	r3, [r7, #16]
 8003044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60fb      	str	r3, [r7, #12]
 800304a:	4b11      	ldr	r3, [pc, #68]	; (8003090 <HAL_SPI_MspInit+0xec>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	4a10      	ldr	r2, [pc, #64]	; (8003090 <HAL_SPI_MspInit+0xec>)
 8003050:	f043 0302 	orr.w	r3, r3, #2
 8003054:	6313      	str	r3, [r2, #48]	; 0x30
 8003056:	4b0e      	ldr	r3, [pc, #56]	; (8003090 <HAL_SPI_MspInit+0xec>)
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8003062:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 8003066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003068:	2302      	movs	r3, #2
 800306a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800306c:	2300      	movs	r3, #0
 800306e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003070:	2303      	movs	r3, #3
 8003072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003074:	2305      	movs	r3, #5
 8003076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003078:	f107 031c 	add.w	r3, r7, #28
 800307c:	4619      	mov	r1, r3
 800307e:	4807      	ldr	r0, [pc, #28]	; (800309c <HAL_SPI_MspInit+0xf8>)
 8003080:	f000 ffc8 	bl	8004014 <HAL_GPIO_Init>
}
 8003084:	bf00      	nop
 8003086:	3730      	adds	r7, #48	; 0x30
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	40013000 	.word	0x40013000
 8003090:	40023800 	.word	0x40023800
 8003094:	40020000 	.word	0x40020000
 8003098:	40003800 	.word	0x40003800
 800309c:	40020400 	.word	0x40020400

080030a0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030a8:	f107 0314 	add.w	r3, r7, #20
 80030ac:	2200      	movs	r2, #0
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	605a      	str	r2, [r3, #4]
 80030b2:	609a      	str	r2, [r3, #8]
 80030b4:	60da      	str	r2, [r3, #12]
 80030b6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM4)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a19      	ldr	r2, [pc, #100]	; (8003124 <HAL_TIM_Encoder_MspInit+0x84>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d12b      	bne.n	800311a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
 80030c6:	4b18      	ldr	r3, [pc, #96]	; (8003128 <HAL_TIM_Encoder_MspInit+0x88>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4a17      	ldr	r2, [pc, #92]	; (8003128 <HAL_TIM_Encoder_MspInit+0x88>)
 80030cc:	f043 0304 	orr.w	r3, r3, #4
 80030d0:	6413      	str	r3, [r2, #64]	; 0x40
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <HAL_TIM_Encoder_MspInit+0x88>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030de:	2300      	movs	r3, #0
 80030e0:	60fb      	str	r3, [r7, #12]
 80030e2:	4b11      	ldr	r3, [pc, #68]	; (8003128 <HAL_TIM_Encoder_MspInit+0x88>)
 80030e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e6:	4a10      	ldr	r2, [pc, #64]	; (8003128 <HAL_TIM_Encoder_MspInit+0x88>)
 80030e8:	f043 0302 	orr.w	r3, r3, #2
 80030ec:	6313      	str	r3, [r2, #48]	; 0x30
 80030ee:	4b0e      	ldr	r3, [pc, #56]	; (8003128 <HAL_TIM_Encoder_MspInit+0x88>)
 80030f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030fa:	23c0      	movs	r3, #192	; 0xc0
 80030fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030fe:	2302      	movs	r3, #2
 8003100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003102:	2300      	movs	r3, #0
 8003104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003106:	2300      	movs	r3, #0
 8003108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800310a:	2302      	movs	r3, #2
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800310e:	f107 0314 	add.w	r3, r7, #20
 8003112:	4619      	mov	r1, r3
 8003114:	4805      	ldr	r0, [pc, #20]	; (800312c <HAL_TIM_Encoder_MspInit+0x8c>)
 8003116:	f000 ff7d 	bl	8004014 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800311a:	bf00      	nop
 800311c:	3728      	adds	r7, #40	; 0x28
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	40000800 	.word	0x40000800
 8003128:	40023800 	.word	0x40023800
 800312c:	40020400 	.word	0x40020400

08003130 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08c      	sub	sp, #48	; 0x30
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800313c:	2300      	movs	r3, #0
 800313e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8003140:	2200      	movs	r2, #0
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	2019      	movs	r0, #25
 8003146:	f000 fb79 	bl	800383c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800314a:	2019      	movs	r0, #25
 800314c:	f000 fb92 	bl	8003874 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	4b1e      	ldr	r3, [pc, #120]	; (80031d0 <HAL_InitTick+0xa0>)
 8003156:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003158:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <HAL_InitTick+0xa0>)
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	6453      	str	r3, [r2, #68]	; 0x44
 8003160:	4b1b      	ldr	r3, [pc, #108]	; (80031d0 <HAL_InitTick+0xa0>)
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	f003 0301 	and.w	r3, r3, #1
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800316c:	f107 0210 	add.w	r2, r7, #16
 8003170:	f107 0314 	add.w	r3, r7, #20
 8003174:	4611      	mov	r1, r2
 8003176:	4618      	mov	r0, r3
 8003178:	f003 f87c 	bl	8006274 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800317c:	f003 f866 	bl	800624c <HAL_RCC_GetPCLK2Freq>
 8003180:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003184:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <HAL_InitTick+0xa4>)
 8003186:	fba2 2303 	umull	r2, r3, r2, r3
 800318a:	0c9b      	lsrs	r3, r3, #18
 800318c:	3b01      	subs	r3, #1
 800318e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <HAL_InitTick+0xa8>)
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <HAL_InitTick+0xac>)
 8003194:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <HAL_InitTick+0xa8>)
 8003198:	f240 32e7 	movw	r2, #999	; 0x3e7
 800319c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800319e:	4a0e      	ldr	r2, [pc, #56]	; (80031d8 <HAL_InitTick+0xa8>)
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80031a4:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <HAL_InitTick+0xa8>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031aa:	4b0b      	ldr	r3, [pc, #44]	; (80031d8 <HAL_InitTick+0xa8>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80031b0:	4809      	ldr	r0, [pc, #36]	; (80031d8 <HAL_InitTick+0xa8>)
 80031b2:	f003 fd77 	bl	8006ca4 <HAL_TIM_Base_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d104      	bne.n	80031c6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80031bc:	4806      	ldr	r0, [pc, #24]	; (80031d8 <HAL_InitTick+0xa8>)
 80031be:	f003 fda6 	bl	8006d0e <HAL_TIM_Base_Start_IT>
 80031c2:	4603      	mov	r3, r0
 80031c4:	e000      	b.n	80031c8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	3730      	adds	r7, #48	; 0x30
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40023800 	.word	0x40023800
 80031d4:	431bde83 	.word	0x431bde83
 80031d8:	20010e90 	.word	0x20010e90
 80031dc:	40010000 	.word	0x40010000

080031e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031f2:	e7fe      	b.n	80031f2 <HardFault_Handler+0x4>

080031f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031f8:	e7fe      	b.n	80031f8 <MemManage_Handler+0x4>

080031fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031fe:	e7fe      	b.n	80031fe <BusFault_Handler+0x4>

08003200 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003204:	e7fe      	b.n	8003204 <UsageFault_Handler+0x4>

08003206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003206:	b480      	push	{r7}
 8003208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800320a:	bf00      	nop
 800320c:	46bd      	mov	sp, r7
 800320e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003212:	4770      	bx	lr

08003214 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s3_ext_rx);
 8003218:	4802      	ldr	r0, [pc, #8]	; (8003224 <DMA1_Stream0_IRQHandler+0x10>)
 800321a:	f000 fc3f 	bl	8003a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800321e:	bf00      	nop
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	20010de8 	.word	0x20010de8

08003228 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 800322c:	4802      	ldr	r0, [pc, #8]	; (8003238 <DMA1_Stream5_IRQHandler+0x10>)
 800322e:	f000 fc35 	bl	8003a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	20010cac 	.word	0x20010cac

0800323c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003240:	4802      	ldr	r0, [pc, #8]	; (800324c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003242:	f003 fe1a 	bl	8006e7a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003246:	bf00      	nop
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	20010e90 	.word	0x20010e90

08003250 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma2_stream0);
 8003254:	4802      	ldr	r0, [pc, #8]	; (8003260 <DMA2_Stream0_IRQHandler+0x10>)
 8003256:	f000 fc21 	bl	8003a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20010bb8 	.word	0x20010bb8

08003264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <SystemInit+0x28>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	4a07      	ldr	r2, [pc, #28]	; (800328c <SystemInit+0x28>)
 8003270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <SystemInit+0x28>)
 800327a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800327e:	609a      	str	r2, [r3, #8]
#endif
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <W25qxx_Spi>:
#include "cmsis_os.h"
#else
#define	W25qxx_Delay(delay)		HAL_Delay(delay)
#endif
//###################################################################################################################
uint8_t W25qxx_Spi(uint8_t Data) {
 8003290:	b580      	push	{r7, lr}
 8003292:	b086      	sub	sp, #24
 8003294:	af02      	add	r7, sp, #8
 8003296:	4603      	mov	r3, r0
 8003298:	71fb      	strb	r3, [r7, #7]
	uint8_t ret;
	HAL_SPI_TransmitReceive(&_W25QXX_SPI, &Data, &ret, 1, 100);
 800329a:	f107 020f 	add.w	r2, r7, #15
 800329e:	1df9      	adds	r1, r7, #7
 80032a0:	2364      	movs	r3, #100	; 0x64
 80032a2:	9300      	str	r3, [sp, #0]
 80032a4:	2301      	movs	r3, #1
 80032a6:	4804      	ldr	r0, [pc, #16]	; (80032b8 <W25qxx_Spi+0x28>)
 80032a8:	f003 faad 	bl	8006806 <HAL_SPI_TransmitReceive>
	return ret;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3710      	adds	r7, #16
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
 80032b6:	bf00      	nop
 80032b8:	20010d90 	.word	0x20010d90

080032bc <W25qxx_ReadID>:
//###################################################################################################################
uint32_t W25qxx_ReadID(void) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
	uint32_t Temp = 0, Temp0 = 0, Temp1 = 0, Temp2 = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	2300      	movs	r3, #0
 80032cc:	607b      	str	r3, [r7, #4]
 80032ce:	2300      	movs	r3, #0
 80032d0:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80032d2:	2200      	movs	r2, #0
 80032d4:	2110      	movs	r1, #16
 80032d6:	4813      	ldr	r0, [pc, #76]	; (8003324 <W25qxx_ReadID+0x68>)
 80032d8:	f001 f81e 	bl	8004318 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x9F);
 80032dc:	209f      	movs	r0, #159	; 0x9f
 80032de:	f7ff ffd7 	bl	8003290 <W25qxx_Spi>
	Temp0 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80032e2:	20a5      	movs	r0, #165	; 0xa5
 80032e4:	f7ff ffd4 	bl	8003290 <W25qxx_Spi>
 80032e8:	4603      	mov	r3, r0
 80032ea:	60bb      	str	r3, [r7, #8]
	Temp1 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80032ec:	20a5      	movs	r0, #165	; 0xa5
 80032ee:	f7ff ffcf 	bl	8003290 <W25qxx_Spi>
 80032f2:	4603      	mov	r3, r0
 80032f4:	607b      	str	r3, [r7, #4]
	Temp2 = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80032f6:	20a5      	movs	r0, #165	; 0xa5
 80032f8:	f7ff ffca 	bl	8003290 <W25qxx_Spi>
 80032fc:	4603      	mov	r3, r0
 80032fe:	603b      	str	r3, [r7, #0]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003300:	2201      	movs	r2, #1
 8003302:	2110      	movs	r1, #16
 8003304:	4807      	ldr	r0, [pc, #28]	; (8003324 <W25qxx_ReadID+0x68>)
 8003306:	f001 f807 	bl	8004318 <HAL_GPIO_WritePin>
	Temp = (Temp0 << 16) | (Temp1 << 8) | Temp2;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	041a      	lsls	r2, r3, #16
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	4313      	orrs	r3, r2
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	4313      	orrs	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
	return Temp;
 800331a:	68fb      	ldr	r3, [r7, #12]
}
 800331c:	4618      	mov	r0, r3
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}
 8003324:	40020000 	.word	0x40020000

08003328 <W25qxx_ReadUniqID>:
//###################################################################################################################
void W25qxx_ReadUniqID(void) {
 8003328:	b590      	push	{r4, r7, lr}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 800332e:	2200      	movs	r2, #0
 8003330:	2110      	movs	r1, #16
 8003332:	4816      	ldr	r0, [pc, #88]	; (800338c <W25qxx_ReadUniqID+0x64>)
 8003334:	f000 fff0 	bl	8004318 <HAL_GPIO_WritePin>
	W25qxx_Spi(0x4B);
 8003338:	204b      	movs	r0, #75	; 0x4b
 800333a:	f7ff ffa9 	bl	8003290 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800333e:	2300      	movs	r3, #0
 8003340:	71fb      	strb	r3, [r7, #7]
 8003342:	e005      	b.n	8003350 <W25qxx_ReadUniqID+0x28>
		W25qxx_Spi(W25QXX_DUMMY_BYTE);
 8003344:	20a5      	movs	r0, #165	; 0xa5
 8003346:	f7ff ffa3 	bl	8003290 <W25qxx_Spi>
	for (uint8_t i = 0; i < 4; i++)
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	3301      	adds	r3, #1
 800334e:	71fb      	strb	r3, [r7, #7]
 8003350:	79fb      	ldrb	r3, [r7, #7]
 8003352:	2b03      	cmp	r3, #3
 8003354:	d9f6      	bls.n	8003344 <W25qxx_ReadUniqID+0x1c>
	for (uint8_t i = 0; i < 8; i++)
 8003356:	2300      	movs	r3, #0
 8003358:	71bb      	strb	r3, [r7, #6]
 800335a:	e00b      	b.n	8003374 <W25qxx_ReadUniqID+0x4c>
		w25qxx.UniqID[i] = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 800335c:	79bc      	ldrb	r4, [r7, #6]
 800335e:	20a5      	movs	r0, #165	; 0xa5
 8003360:	f7ff ff96 	bl	8003290 <W25qxx_Spi>
 8003364:	4603      	mov	r3, r0
 8003366:	461a      	mov	r2, r3
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <W25qxx_ReadUniqID+0x68>)
 800336a:	4423      	add	r3, r4
 800336c:	705a      	strb	r2, [r3, #1]
	for (uint8_t i = 0; i < 8; i++)
 800336e:	79bb      	ldrb	r3, [r7, #6]
 8003370:	3301      	adds	r3, #1
 8003372:	71bb      	strb	r3, [r7, #6]
 8003374:	79bb      	ldrb	r3, [r7, #6]
 8003376:	2b07      	cmp	r3, #7
 8003378:	d9f0      	bls.n	800335c <W25qxx_ReadUniqID+0x34>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 800337a:	2201      	movs	r2, #1
 800337c:	2110      	movs	r1, #16
 800337e:	4803      	ldr	r0, [pc, #12]	; (800338c <W25qxx_ReadUniqID+0x64>)
 8003380:	f000 ffca 	bl	8004318 <HAL_GPIO_WritePin>
}
 8003384:	bf00      	nop
 8003386:	370c      	adds	r7, #12
 8003388:	46bd      	mov	sp, r7
 800338a:	bd90      	pop	{r4, r7, pc}
 800338c:	40020000 	.word	0x40020000
 8003390:	20010ed0 	.word	0x20010ed0

08003394 <W25qxx_ReadStatusRegister>:
	W25qxx_Spi(0x04);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
	W25qxx_Delay(1);
}
//###################################################################################################################
uint8_t W25qxx_ReadStatusRegister(uint8_t SelectStatusRegister_1_2_3) {
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
	uint8_t status = 0;
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_RESET);
 80033a2:	2200      	movs	r2, #0
 80033a4:	2110      	movs	r1, #16
 80033a6:	481c      	ldr	r0, [pc, #112]	; (8003418 <W25qxx_ReadStatusRegister+0x84>)
 80033a8:	f000 ffb6 	bl	8004318 <HAL_GPIO_WritePin>
	if (SelectStatusRegister_1_2_3 == 1) {
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d10c      	bne.n	80033cc <W25qxx_ReadStatusRegister+0x38>
		W25qxx_Spi(0x05);
 80033b2:	2005      	movs	r0, #5
 80033b4:	f7ff ff6c 	bl	8003290 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80033b8:	20a5      	movs	r0, #165	; 0xa5
 80033ba:	f7ff ff69 	bl	8003290 <W25qxx_Spi>
 80033be:	4603      	mov	r3, r0
 80033c0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister1 = status;
 80033c2:	4a16      	ldr	r2, [pc, #88]	; (800341c <W25qxx_ReadStatusRegister+0x88>)
 80033c4:	7bfb      	ldrb	r3, [r7, #15]
 80033c6:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80033ca:	e01b      	b.n	8003404 <W25qxx_ReadStatusRegister+0x70>
	} else if (SelectStatusRegister_1_2_3 == 2) {
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d10c      	bne.n	80033ec <W25qxx_ReadStatusRegister+0x58>
		W25qxx_Spi(0x35);
 80033d2:	2035      	movs	r0, #53	; 0x35
 80033d4:	f7ff ff5c 	bl	8003290 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80033d8:	20a5      	movs	r0, #165	; 0xa5
 80033da:	f7ff ff59 	bl	8003290 <W25qxx_Spi>
 80033de:	4603      	mov	r3, r0
 80033e0:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister2 = status;
 80033e2:	4a0e      	ldr	r2, [pc, #56]	; (800341c <W25qxx_ReadStatusRegister+0x88>)
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
 80033ea:	e00b      	b.n	8003404 <W25qxx_ReadStatusRegister+0x70>
	} else {
		W25qxx_Spi(0x15);
 80033ec:	2015      	movs	r0, #21
 80033ee:	f7ff ff4f 	bl	8003290 <W25qxx_Spi>
		status = W25qxx_Spi(W25QXX_DUMMY_BYTE);
 80033f2:	20a5      	movs	r0, #165	; 0xa5
 80033f4:	f7ff ff4c 	bl	8003290 <W25qxx_Spi>
 80033f8:	4603      	mov	r3, r0
 80033fa:	73fb      	strb	r3, [r7, #15]
		w25qxx.StatusRegister3 = status;
 80033fc:	4a07      	ldr	r2, [pc, #28]	; (800341c <W25qxx_ReadStatusRegister+0x88>)
 80033fe:	7bfb      	ldrb	r3, [r7, #15]
 8003400:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
	}
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003404:	2201      	movs	r2, #1
 8003406:	2110      	movs	r1, #16
 8003408:	4803      	ldr	r0, [pc, #12]	; (8003418 <W25qxx_ReadStatusRegister+0x84>)
 800340a:	f000 ff85 	bl	8004318 <HAL_GPIO_WritePin>
	return status;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	40020000 	.word	0x40020000
 800341c:	20010ed0 	.word	0x20010ed0

08003420 <W25qxx_Init>:
		W25qxx_Delay(1);
	} while ((w25qxx.StatusRegister1 & 0x01) == 0x01);
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
}
//###################################################################################################################
bool W25qxx_Init(void) {
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
	w25qxx.Lock = 1;
 8003426:	4b60      	ldr	r3, [pc, #384]	; (80035a8 <W25qxx_Init+0x188>)
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	while (HAL_GetTick() < 100)
 800342e:	e002      	b.n	8003436 <W25qxx_Init+0x16>
		W25qxx_Delay(1);
 8003430:	2001      	movs	r0, #1
 8003432:	f003 ffc0 	bl	80073b6 <osDelay>
	while (HAL_GetTick() < 100)
 8003436:	f000 f91b 	bl	8003670 <HAL_GetTick>
 800343a:	4603      	mov	r3, r0
 800343c:	2b63      	cmp	r3, #99	; 0x63
 800343e:	d9f7      	bls.n	8003430 <W25qxx_Init+0x10>
	HAL_GPIO_WritePin(_W25QXX_CS_GPIO, _W25QXX_CS_PIN, GPIO_PIN_SET);
 8003440:	2201      	movs	r2, #1
 8003442:	2110      	movs	r1, #16
 8003444:	4859      	ldr	r0, [pc, #356]	; (80035ac <W25qxx_Init+0x18c>)
 8003446:	f000 ff67 	bl	8004318 <HAL_GPIO_WritePin>
	W25qxx_Delay(100);
 800344a:	2064      	movs	r0, #100	; 0x64
 800344c:	f003 ffb3 	bl	80073b6 <osDelay>
	uint32_t id;
#if (_W25QXX_DEBUG==1)
	printf("w25qxx Init Begin...\r\n");
	#endif
	id = W25qxx_ReadID();
 8003450:	f7ff ff34 	bl	80032bc <W25qxx_ReadID>
 8003454:	6078      	str	r0, [r7, #4]

#if (_W25QXX_DEBUG==1)
	printf("w25qxx ID:0x%X\r\n",id);
	#endif
	switch (id & 0x0000FFFF) {
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	b29b      	uxth	r3, r3
 800345a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800345e:	3b11      	subs	r3, #17
 8003460:	2b09      	cmp	r3, #9
 8003462:	d860      	bhi.n	8003526 <W25qxx_Init+0x106>
 8003464:	a201      	add	r2, pc, #4	; (adr r2, 800346c <W25qxx_Init+0x4c>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	08003519 	.word	0x08003519
 8003470:	0800350b 	.word	0x0800350b
 8003474:	080034fd 	.word	0x080034fd
 8003478:	080034ef 	.word	0x080034ef
 800347c:	080034e1 	.word	0x080034e1
 8003480:	080034d3 	.word	0x080034d3
 8003484:	080034c5 	.word	0x080034c5
 8003488:	080034b5 	.word	0x080034b5
 800348c:	080034a5 	.word	0x080034a5
 8003490:	08003495 	.word	0x08003495
	case 0x401A:	// 	w25q512
		w25qxx.ID = W25Q512;
 8003494:	4b44      	ldr	r3, [pc, #272]	; (80035a8 <W25qxx_Init+0x188>)
 8003496:	220a      	movs	r2, #10
 8003498:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 1024;
 800349a:	4b43      	ldr	r3, [pc, #268]	; (80035a8 <W25qxx_Init+0x188>)
 800349c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034a0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q512\r\n");
			#endif
		break;
 80034a2:	e046      	b.n	8003532 <W25qxx_Init+0x112>
	case 0x4019:	// 	w25q256
		w25qxx.ID = W25Q256;
 80034a4:	4b40      	ldr	r3, [pc, #256]	; (80035a8 <W25qxx_Init+0x188>)
 80034a6:	2209      	movs	r2, #9
 80034a8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 512;
 80034aa:	4b3f      	ldr	r3, [pc, #252]	; (80035a8 <W25qxx_Init+0x188>)
 80034ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034b0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q256\r\n");
			#endif
		break;
 80034b2:	e03e      	b.n	8003532 <W25qxx_Init+0x112>
	case 0x4018:	// 	w25q128
		w25qxx.ID = W25Q128;
 80034b4:	4b3c      	ldr	r3, [pc, #240]	; (80035a8 <W25qxx_Init+0x188>)
 80034b6:	2208      	movs	r2, #8
 80034b8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 256;
 80034ba:	4b3b      	ldr	r3, [pc, #236]	; (80035a8 <W25qxx_Init+0x188>)
 80034bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034c0:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q128\r\n");
			#endif
		break;
 80034c2:	e036      	b.n	8003532 <W25qxx_Init+0x112>
	case 0x4017:	//	w25q64
		w25qxx.ID = W25Q64;
 80034c4:	4b38      	ldr	r3, [pc, #224]	; (80035a8 <W25qxx_Init+0x188>)
 80034c6:	2207      	movs	r2, #7
 80034c8:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 128;
 80034ca:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <W25qxx_Init+0x188>)
 80034cc:	2280      	movs	r2, #128	; 0x80
 80034ce:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q64\r\n");
			#endif
		break;
 80034d0:	e02f      	b.n	8003532 <W25qxx_Init+0x112>
	case 0x4016:	//	w25q32
		w25qxx.ID = W25Q32;
 80034d2:	4b35      	ldr	r3, [pc, #212]	; (80035a8 <W25qxx_Init+0x188>)
 80034d4:	2206      	movs	r2, #6
 80034d6:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 64;
 80034d8:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <W25qxx_Init+0x188>)
 80034da:	2240      	movs	r2, #64	; 0x40
 80034dc:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q32\r\n");
			#endif
		break;
 80034de:	e028      	b.n	8003532 <W25qxx_Init+0x112>
	case 0x4015:	//	w25q16
		w25qxx.ID = W25Q16;
 80034e0:	4b31      	ldr	r3, [pc, #196]	; (80035a8 <W25qxx_Init+0x188>)
 80034e2:	2205      	movs	r2, #5
 80034e4:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 32;
 80034e6:	4b30      	ldr	r3, [pc, #192]	; (80035a8 <W25qxx_Init+0x188>)
 80034e8:	2220      	movs	r2, #32
 80034ea:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q16\r\n");
			#endif
		break;
 80034ec:	e021      	b.n	8003532 <W25qxx_Init+0x112>
	case 0x4014:	//	w25q80
		w25qxx.ID = W25Q80;
 80034ee:	4b2e      	ldr	r3, [pc, #184]	; (80035a8 <W25qxx_Init+0x188>)
 80034f0:	2204      	movs	r2, #4
 80034f2:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 16;
 80034f4:	4b2c      	ldr	r3, [pc, #176]	; (80035a8 <W25qxx_Init+0x188>)
 80034f6:	2210      	movs	r2, #16
 80034f8:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q80\r\n");
			#endif
		break;
 80034fa:	e01a      	b.n	8003532 <W25qxx_Init+0x112>
	case 0x4013:	//	w25q40
		w25qxx.ID = W25Q40;
 80034fc:	4b2a      	ldr	r3, [pc, #168]	; (80035a8 <W25qxx_Init+0x188>)
 80034fe:	2203      	movs	r2, #3
 8003500:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 8;
 8003502:	4b29      	ldr	r3, [pc, #164]	; (80035a8 <W25qxx_Init+0x188>)
 8003504:	2208      	movs	r2, #8
 8003506:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q40\r\n");
			#endif
		break;
 8003508:	e013      	b.n	8003532 <W25qxx_Init+0x112>
	case 0x4012:	//	w25q20
		w25qxx.ID = W25Q20;
 800350a:	4b27      	ldr	r3, [pc, #156]	; (80035a8 <W25qxx_Init+0x188>)
 800350c:	2202      	movs	r2, #2
 800350e:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 4;
 8003510:	4b25      	ldr	r3, [pc, #148]	; (80035a8 <W25qxx_Init+0x188>)
 8003512:	2204      	movs	r2, #4
 8003514:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q20\r\n");
			#endif
		break;
 8003516:	e00c      	b.n	8003532 <W25qxx_Init+0x112>
	case 0x4011:	//	w25q10
		w25qxx.ID = W25Q10;
 8003518:	4b23      	ldr	r3, [pc, #140]	; (80035a8 <W25qxx_Init+0x188>)
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
		w25qxx.BlockCount = 2;
 800351e:	4b22      	ldr	r3, [pc, #136]	; (80035a8 <W25qxx_Init+0x188>)
 8003520:	2202      	movs	r2, #2
 8003522:	61da      	str	r2, [r3, #28]
#if (_W25QXX_DEBUG==1)
			printf("w25qxx Chip: w25q10\r\n");
			#endif
		break;
 8003524:	e005      	b.n	8003532 <W25qxx_Init+0x112>
	default:
#if (_W25QXX_DEBUG==1)
				printf("w25qxx Unknown ID\r\n");
				#endif
		w25qxx.Lock = 0;
 8003526:	4b20      	ldr	r3, [pc, #128]	; (80035a8 <W25qxx_Init+0x188>)
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
		return false;
 800352e:	2300      	movs	r3, #0
 8003530:	e036      	b.n	80035a0 <W25qxx_Init+0x180>

	}
	w25qxx.PageSize = 256;
 8003532:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <W25qxx_Init+0x188>)
 8003534:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003538:	815a      	strh	r2, [r3, #10]
	w25qxx.SectorSize = 0x1000;
 800353a:	4b1b      	ldr	r3, [pc, #108]	; (80035a8 <W25qxx_Init+0x188>)
 800353c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003540:	611a      	str	r2, [r3, #16]
	w25qxx.SectorCount = w25qxx.BlockCount * 16;
 8003542:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <W25qxx_Init+0x188>)
 8003544:	69db      	ldr	r3, [r3, #28]
 8003546:	011b      	lsls	r3, r3, #4
 8003548:	4a17      	ldr	r2, [pc, #92]	; (80035a8 <W25qxx_Init+0x188>)
 800354a:	6153      	str	r3, [r2, #20]
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize)
 800354c:	4b16      	ldr	r3, [pc, #88]	; (80035a8 <W25qxx_Init+0x188>)
 800354e:	695b      	ldr	r3, [r3, #20]
 8003550:	4a15      	ldr	r2, [pc, #84]	; (80035a8 <W25qxx_Init+0x188>)
 8003552:	6912      	ldr	r2, [r2, #16]
 8003554:	fb02 f303 	mul.w	r3, r2, r3
			/ w25qxx.PageSize;
 8003558:	4a13      	ldr	r2, [pc, #76]	; (80035a8 <W25qxx_Init+0x188>)
 800355a:	8952      	ldrh	r2, [r2, #10]
 800355c:	fbb3 f3f2 	udiv	r3, r3, r2
	w25qxx.PageCount = (w25qxx.SectorCount * w25qxx.SectorSize)
 8003560:	4a11      	ldr	r2, [pc, #68]	; (80035a8 <W25qxx_Init+0x188>)
 8003562:	60d3      	str	r3, [r2, #12]
	w25qxx.BlockSize = w25qxx.SectorSize * 16;
 8003564:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <W25qxx_Init+0x188>)
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	4a0f      	ldr	r2, [pc, #60]	; (80035a8 <W25qxx_Init+0x188>)
 800356c:	6193      	str	r3, [r2, #24]
	w25qxx.CapacityInKiloByte = (w25qxx.SectorCount * w25qxx.SectorSize) / 1024;
 800356e:	4b0e      	ldr	r3, [pc, #56]	; (80035a8 <W25qxx_Init+0x188>)
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	4a0d      	ldr	r2, [pc, #52]	; (80035a8 <W25qxx_Init+0x188>)
 8003574:	6912      	ldr	r2, [r2, #16]
 8003576:	fb02 f303 	mul.w	r3, r2, r3
 800357a:	0a9b      	lsrs	r3, r3, #10
 800357c:	4a0a      	ldr	r2, [pc, #40]	; (80035a8 <W25qxx_Init+0x188>)
 800357e:	6213      	str	r3, [r2, #32]
	W25qxx_ReadUniqID();
 8003580:	f7ff fed2 	bl	8003328 <W25qxx_ReadUniqID>
	W25qxx_ReadStatusRegister(1);
 8003584:	2001      	movs	r0, #1
 8003586:	f7ff ff05 	bl	8003394 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(2);
 800358a:	2002      	movs	r0, #2
 800358c:	f7ff ff02 	bl	8003394 <W25qxx_ReadStatusRegister>
	W25qxx_ReadStatusRegister(3);
 8003590:	2003      	movs	r0, #3
 8003592:	f7ff feff 	bl	8003394 <W25qxx_ReadStatusRegister>
	printf("w25qxx Block Size: %d Bytes\r\n",w25qxx.BlockSize);
	printf("w25qxx Block Count: %d\r\n",w25qxx.BlockCount);
	printf("w25qxx Capacity: %d KiloBytes\r\n",w25qxx.CapacityInKiloByte);
	printf("w25qxx Init Done\r\n");
	#endif
	w25qxx.Lock = 0;
 8003596:	4b04      	ldr	r3, [pc, #16]	; (80035a8 <W25qxx_Init+0x188>)
 8003598:	2200      	movs	r2, #0
 800359a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	return true;
 800359e:	2301      	movs	r3, #1
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20010ed0 	.word	0x20010ed0
 80035ac:	40020000 	.word	0x40020000

080035b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80035b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80035b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80035b6:	e003      	b.n	80035c0 <LoopCopyDataInit>

080035b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80035b8:	4b0c      	ldr	r3, [pc, #48]	; (80035ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80035ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035be:	3104      	adds	r1, #4

080035c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035c0:	480b      	ldr	r0, [pc, #44]	; (80035f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035c2:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035c8:	d3f6      	bcc.n	80035b8 <CopyDataInit>
  ldr  r2, =_sbss
 80035ca:	4a0b      	ldr	r2, [pc, #44]	; (80035f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035cc:	e002      	b.n	80035d4 <LoopFillZerobss>

080035ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035d0:	f842 3b04 	str.w	r3, [r2], #4

080035d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035d4:	4b09      	ldr	r3, [pc, #36]	; (80035fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035d8:	d3f9      	bcc.n	80035ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035da:	f7ff fe43 	bl	8003264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035de:	f006 fa4d 	bl	8009a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035e2:	f7ff f81b 	bl	800261c <main>
  bx  lr    
 80035e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80035e8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80035ec:	0800c5e4 	.word	0x0800c5e4
  ldr  r0, =_sdata
 80035f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035f4:	20002170 	.word	0x20002170
  ldr  r2, =_sbss
 80035f8:	20002170 	.word	0x20002170
  ldr  r3, = _ebss
 80035fc:	20010efc 	.word	0x20010efc

08003600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003600:	e7fe      	b.n	8003600 <ADC_IRQHandler>
	...

08003604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003608:	4b0e      	ldr	r3, [pc, #56]	; (8003644 <HAL_Init+0x40>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0d      	ldr	r2, [pc, #52]	; (8003644 <HAL_Init+0x40>)
 800360e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003612:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003614:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <HAL_Init+0x40>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <HAL_Init+0x40>)
 800361a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800361e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003620:	4b08      	ldr	r3, [pc, #32]	; (8003644 <HAL_Init+0x40>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a07      	ldr	r2, [pc, #28]	; (8003644 <HAL_Init+0x40>)
 8003626:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800362a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800362c:	2003      	movs	r0, #3
 800362e:	f000 f8fa 	bl	8003826 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003632:	2000      	movs	r0, #0
 8003634:	f7ff fd7c 	bl	8003130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003638:	f7ff fb46 	bl	8002cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40023c00 	.word	0x40023c00

08003648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800364c:	4b06      	ldr	r3, [pc, #24]	; (8003668 <HAL_IncTick+0x20>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_IncTick+0x24>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4413      	add	r3, r2
 8003658:	4a04      	ldr	r2, [pc, #16]	; (800366c <HAL_IncTick+0x24>)
 800365a:	6013      	str	r3, [r2, #0]
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	20002100 	.word	0x20002100
 800366c:	20010ef8 	.word	0x20010ef8

08003670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return uwTick;
 8003674:	4b03      	ldr	r3, [pc, #12]	; (8003684 <HAL_GetTick+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20010ef8 	.word	0x20010ef8

08003688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003690:	f7ff ffee 	bl	8003670 <HAL_GetTick>
 8003694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a0:	d005      	beq.n	80036ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036a2:	4b09      	ldr	r3, [pc, #36]	; (80036c8 <HAL_Delay+0x40>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036ae:	bf00      	nop
 80036b0:	f7ff ffde 	bl	8003670 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d8f7      	bhi.n	80036b0 <HAL_Delay+0x28>
  {
  }
}
 80036c0:	bf00      	nop
 80036c2:	3710      	adds	r7, #16
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20002100 	.word	0x20002100

080036cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f003 0307 	and.w	r3, r3, #7
 80036da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036dc:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <__NVIC_SetPriorityGrouping+0x44>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036e8:	4013      	ands	r3, r2
 80036ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036fe:	4a04      	ldr	r2, [pc, #16]	; (8003710 <__NVIC_SetPriorityGrouping+0x44>)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	60d3      	str	r3, [r2, #12]
}
 8003704:	bf00      	nop
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003718:	4b04      	ldr	r3, [pc, #16]	; (800372c <__NVIC_GetPriorityGrouping+0x18>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	0a1b      	lsrs	r3, r3, #8
 800371e:	f003 0307 	and.w	r3, r3, #7
}
 8003722:	4618      	mov	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	e000ed00 	.word	0xe000ed00

08003730 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800373a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800373e:	2b00      	cmp	r3, #0
 8003740:	db0b      	blt.n	800375a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	f003 021f 	and.w	r2, r3, #31
 8003748:	4907      	ldr	r1, [pc, #28]	; (8003768 <__NVIC_EnableIRQ+0x38>)
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	2001      	movs	r0, #1
 8003752:	fa00 f202 	lsl.w	r2, r0, r2
 8003756:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800375a:	bf00      	nop
 800375c:	370c      	adds	r7, #12
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
 8003766:	bf00      	nop
 8003768:	e000e100 	.word	0xe000e100

0800376c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	4603      	mov	r3, r0
 8003774:	6039      	str	r1, [r7, #0]
 8003776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800377c:	2b00      	cmp	r3, #0
 800377e:	db0a      	blt.n	8003796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	b2da      	uxtb	r2, r3
 8003784:	490c      	ldr	r1, [pc, #48]	; (80037b8 <__NVIC_SetPriority+0x4c>)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	0112      	lsls	r2, r2, #4
 800378c:	b2d2      	uxtb	r2, r2
 800378e:	440b      	add	r3, r1
 8003790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003794:	e00a      	b.n	80037ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	b2da      	uxtb	r2, r3
 800379a:	4908      	ldr	r1, [pc, #32]	; (80037bc <__NVIC_SetPriority+0x50>)
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	3b04      	subs	r3, #4
 80037a4:	0112      	lsls	r2, r2, #4
 80037a6:	b2d2      	uxtb	r2, r2
 80037a8:	440b      	add	r3, r1
 80037aa:	761a      	strb	r2, [r3, #24]
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr
 80037b8:	e000e100 	.word	0xe000e100
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b089      	sub	sp, #36	; 0x24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f1c3 0307 	rsb	r3, r3, #7
 80037da:	2b04      	cmp	r3, #4
 80037dc:	bf28      	it	cs
 80037de:	2304      	movcs	r3, #4
 80037e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	3304      	adds	r3, #4
 80037e6:	2b06      	cmp	r3, #6
 80037e8:	d902      	bls.n	80037f0 <NVIC_EncodePriority+0x30>
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	3b03      	subs	r3, #3
 80037ee:	e000      	b.n	80037f2 <NVIC_EncodePriority+0x32>
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	fa02 f303 	lsl.w	r3, r2, r3
 80037fe:	43da      	mvns	r2, r3
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	401a      	ands	r2, r3
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003808:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	fa01 f303 	lsl.w	r3, r1, r3
 8003812:	43d9      	mvns	r1, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003818:	4313      	orrs	r3, r2
         );
}
 800381a:	4618      	mov	r0, r3
 800381c:	3724      	adds	r7, #36	; 0x24
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003826:	b580      	push	{r7, lr}
 8003828:	b082      	sub	sp, #8
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f7ff ff4c 	bl	80036cc <__NVIC_SetPriorityGrouping>
}
 8003834:	bf00      	nop
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800384e:	f7ff ff61 	bl	8003714 <__NVIC_GetPriorityGrouping>
 8003852:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	68b9      	ldr	r1, [r7, #8]
 8003858:	6978      	ldr	r0, [r7, #20]
 800385a:	f7ff ffb1 	bl	80037c0 <NVIC_EncodePriority>
 800385e:	4602      	mov	r2, r0
 8003860:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003864:	4611      	mov	r1, r2
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff ff80 	bl	800376c <__NVIC_SetPriority>
}
 800386c:	bf00      	nop
 800386e:	3718      	adds	r7, #24
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800387e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003882:	4618      	mov	r0, r3
 8003884:	f7ff ff54 	bl	8003730 <__NVIC_EnableIRQ>
}
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800389c:	f7ff fee8 	bl	8003670 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e099      	b.n	80039e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038cc:	e00f      	b.n	80038ee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038ce:	f7ff fecf 	bl	8003670 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b05      	cmp	r3, #5
 80038da:	d908      	bls.n	80038ee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2203      	movs	r2, #3
 80038e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e078      	b.n	80039e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1e8      	bne.n	80038ce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003904:	697a      	ldr	r2, [r7, #20]
 8003906:	4b38      	ldr	r3, [pc, #224]	; (80039e8 <HAL_DMA_Init+0x158>)
 8003908:	4013      	ands	r3, r2
 800390a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800391a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003926:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	699b      	ldr	r3, [r3, #24]
 800392c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003932:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	2b04      	cmp	r3, #4
 8003946:	d107      	bne.n	8003958 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	4313      	orrs	r3, r2
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	f023 0307 	bic.w	r3, r3, #7
 800396e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397e:	2b04      	cmp	r3, #4
 8003980:	d117      	bne.n	80039b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4313      	orrs	r3, r2
 800398a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00e      	beq.n	80039b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f000 fac3 	bl	8003f20 <DMA_CheckFifoParam>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2240      	movs	r2, #64	; 0x40
 80039a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2201      	movs	r2, #1
 80039aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039ae:	2301      	movs	r3, #1
 80039b0:	e016      	b.n	80039e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	697a      	ldr	r2, [r7, #20]
 80039b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fa7a 	bl	8003eb4 <DMA_CalcBaseAndBitshift>
 80039c0:	4603      	mov	r3, r0
 80039c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c8:	223f      	movs	r2, #63	; 0x3f
 80039ca:	409a      	lsls	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80039de:	2300      	movs	r3, #0
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3718      	adds	r7, #24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	f010803f 	.word	0xf010803f

080039ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
 80039f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039fa:	2300      	movs	r3, #0
 80039fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d101      	bne.n	8003a12 <HAL_DMA_Start_IT+0x26>
 8003a0e:	2302      	movs	r3, #2
 8003a10:	e040      	b.n	8003a94 <HAL_DMA_Start_IT+0xa8>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2201      	movs	r2, #1
 8003a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d12f      	bne.n	8003a86 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68b9      	ldr	r1, [r7, #8]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fa0c 	bl	8003e58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a44:	223f      	movs	r2, #63	; 0x3f
 8003a46:	409a      	lsls	r2, r3
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0216 	orr.w	r2, r2, #22
 8003a5a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0208 	orr.w	r2, r2, #8
 8003a72:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e005      	b.n	8003a92 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003a8e:	2302      	movs	r3, #2
 8003a90:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b086      	sub	sp, #24
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003aa8:	4b92      	ldr	r3, [pc, #584]	; (8003cf4 <HAL_DMA_IRQHandler+0x258>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a92      	ldr	r2, [pc, #584]	; (8003cf8 <HAL_DMA_IRQHandler+0x25c>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	0a9b      	lsrs	r3, r3, #10
 8003ab4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac6:	2208      	movs	r2, #8
 8003ac8:	409a      	lsls	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	4013      	ands	r3, r2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d01a      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0304 	and.w	r3, r3, #4
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d013      	beq.n	8003b08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f022 0204 	bic.w	r2, r2, #4
 8003aee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af4:	2208      	movs	r2, #8
 8003af6:	409a      	lsls	r2, r3
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	f043 0201 	orr.w	r2, r3, #1
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	409a      	lsls	r2, r3
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	4013      	ands	r3, r2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d012      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	695b      	ldr	r3, [r3, #20]
 8003b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d00b      	beq.n	8003b3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	409a      	lsls	r2, r3
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b36:	f043 0202 	orr.w	r2, r3, #2
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b42:	2204      	movs	r2, #4
 8003b44:	409a      	lsls	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d012      	beq.n	8003b74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0302 	and.w	r3, r3, #2
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00b      	beq.n	8003b74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b60:	2204      	movs	r2, #4
 8003b62:	409a      	lsls	r2, r3
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b6c:	f043 0204 	orr.w	r2, r3, #4
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b78:	2210      	movs	r2, #16
 8003b7a:	409a      	lsls	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d043      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d03c      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	2210      	movs	r2, #16
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d018      	beq.n	8003bde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d108      	bne.n	8003bcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d024      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	4798      	blx	r3
 8003bca:	e01f      	b.n	8003c0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01b      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	4798      	blx	r3
 8003bdc:	e016      	b.n	8003c0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d107      	bne.n	8003bfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0208 	bic.w	r2, r2, #8
 8003bfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c10:	2220      	movs	r2, #32
 8003c12:	409a      	lsls	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4013      	ands	r3, r2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 808e 	beq.w	8003d3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0310 	and.w	r3, r3, #16
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 8086 	beq.w	8003d3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c32:	2220      	movs	r2, #32
 8003c34:	409a      	lsls	r2, r3
 8003c36:	693b      	ldr	r3, [r7, #16]
 8003c38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b05      	cmp	r3, #5
 8003c44:	d136      	bne.n	8003cb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 0216 	bic.w	r2, r2, #22
 8003c54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	695a      	ldr	r2, [r3, #20]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d103      	bne.n	8003c76 <HAL_DMA_IRQHandler+0x1da>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d007      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0208 	bic.w	r2, r2, #8
 8003c84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8a:	223f      	movs	r2, #63	; 0x3f
 8003c8c:	409a      	lsls	r2, r3
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d07d      	beq.n	8003da6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	4798      	blx	r3
        }
        return;
 8003cb2:	e078      	b.n	8003da6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d01c      	beq.n	8003cfc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d108      	bne.n	8003ce2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d030      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	4798      	blx	r3
 8003ce0:	e02b      	b.n	8003d3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d027      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	4798      	blx	r3
 8003cf2:	e022      	b.n	8003d3a <HAL_DMA_IRQHandler+0x29e>
 8003cf4:	200020f8 	.word	0x200020f8
 8003cf8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10f      	bne.n	8003d2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0210 	bic.w	r2, r2, #16
 8003d18:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d032      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d022      	beq.n	8003d94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2205      	movs	r2, #5
 8003d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 0201 	bic.w	r2, r2, #1
 8003d64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	3301      	adds	r3, #1
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d307      	bcc.n	8003d82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1f2      	bne.n	8003d66 <HAL_DMA_IRQHandler+0x2ca>
 8003d80:	e000      	b.n	8003d84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003d82:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d005      	beq.n	8003da8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	4798      	blx	r3
 8003da4:	e000      	b.n	8003da8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003da6:	bf00      	nop
    }
  }
}
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop

08003db0 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	460b      	mov	r3, r1
 8003dba:	607a      	str	r2, [r7, #4]
 8003dbc:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_DMA_RegisterCallback+0x20>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e03c      	b.n	8003e4a <HAL_DMA_RegisterCallback+0x9a>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d129      	bne.n	8003e38 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8003de4:	7afb      	ldrb	r3, [r7, #11]
 8003de6:	2b05      	cmp	r3, #5
 8003de8:	d829      	bhi.n	8003e3e <HAL_DMA_RegisterCallback+0x8e>
 8003dea:	a201      	add	r2, pc, #4	; (adr r2, 8003df0 <HAL_DMA_RegisterCallback+0x40>)
 8003dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df0:	08003e09 	.word	0x08003e09
 8003df4:	08003e11 	.word	0x08003e11
 8003df8:	08003e19 	.word	0x08003e19
 8003dfc:	08003e21 	.word	0x08003e21
 8003e00:	08003e29 	.word	0x08003e29
 8003e04:	08003e31 	.word	0x08003e31
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8003e0e:	e017      	b.n	8003e40 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003e16:	e013      	b.n	8003e40 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 8003e1e:	e00f      	b.n	8003e40 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8003e26:	e00b      	b.n	8003e40 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 8003e2e:	e007      	b.n	8003e40 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003e36:	e003      	b.n	8003e40 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	75fb      	strb	r3, [r7, #23]
 8003e3c:	e000      	b.n	8003e40 <HAL_DMA_RegisterCallback+0x90>
      break;
 8003e3e:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8003e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop

08003e58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
 8003e64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	2b40      	cmp	r3, #64	; 0x40
 8003e84:	d108      	bne.n	8003e98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68ba      	ldr	r2, [r7, #8]
 8003e94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e96:	e007      	b.n	8003ea8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68ba      	ldr	r2, [r7, #8]
 8003e9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	60da      	str	r2, [r3, #12]
}
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	3b10      	subs	r3, #16
 8003ec4:	4a14      	ldr	r2, [pc, #80]	; (8003f18 <DMA_CalcBaseAndBitshift+0x64>)
 8003ec6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eca:	091b      	lsrs	r3, r3, #4
 8003ecc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003ece:	4a13      	ldr	r2, [pc, #76]	; (8003f1c <DMA_CalcBaseAndBitshift+0x68>)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d909      	bls.n	8003ef6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003eea:	f023 0303 	bic.w	r3, r3, #3
 8003eee:	1d1a      	adds	r2, r3, #4
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ef4:	e007      	b.n	8003f06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003efe:	f023 0303 	bic.w	r3, r3, #3
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	aaaaaaab 	.word	0xaaaaaaab
 8003f1c:	0800b9e4 	.word	0x0800b9e4

08003f20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d11f      	bne.n	8003f7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b03      	cmp	r3, #3
 8003f3e:	d855      	bhi.n	8003fec <DMA_CheckFifoParam+0xcc>
 8003f40:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <DMA_CheckFifoParam+0x28>)
 8003f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f46:	bf00      	nop
 8003f48:	08003f59 	.word	0x08003f59
 8003f4c:	08003f6b 	.word	0x08003f6b
 8003f50:	08003f59 	.word	0x08003f59
 8003f54:	08003fed 	.word	0x08003fed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d045      	beq.n	8003ff0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f68:	e042      	b.n	8003ff0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f72:	d13f      	bne.n	8003ff4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f78:	e03c      	b.n	8003ff4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f82:	d121      	bne.n	8003fc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d836      	bhi.n	8003ff8 <DMA_CheckFifoParam+0xd8>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <DMA_CheckFifoParam+0x70>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fa1 	.word	0x08003fa1
 8003f94:	08003fa7 	.word	0x08003fa7
 8003f98:	08003fa1 	.word	0x08003fa1
 8003f9c:	08003fb9 	.word	0x08003fb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa4:	e02f      	b.n	8004006 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003faa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d024      	beq.n	8003ffc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb6:	e021      	b.n	8003ffc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fc0:	d11e      	bne.n	8004000 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fc6:	e01b      	b.n	8004000 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d902      	bls.n	8003fd4 <DMA_CheckFifoParam+0xb4>
 8003fce:	2b03      	cmp	r3, #3
 8003fd0:	d003      	beq.n	8003fda <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fd2:	e018      	b.n	8004006 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd8:	e015      	b.n	8004006 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00e      	beq.n	8004004 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	73fb      	strb	r3, [r7, #15]
      break;
 8003fea:	e00b      	b.n	8004004 <DMA_CheckFifoParam+0xe4>
      break;
 8003fec:	bf00      	nop
 8003fee:	e00a      	b.n	8004006 <DMA_CheckFifoParam+0xe6>
      break;
 8003ff0:	bf00      	nop
 8003ff2:	e008      	b.n	8004006 <DMA_CheckFifoParam+0xe6>
      break;
 8003ff4:	bf00      	nop
 8003ff6:	e006      	b.n	8004006 <DMA_CheckFifoParam+0xe6>
      break;
 8003ff8:	bf00      	nop
 8003ffa:	e004      	b.n	8004006 <DMA_CheckFifoParam+0xe6>
      break;
 8003ffc:	bf00      	nop
 8003ffe:	e002      	b.n	8004006 <DMA_CheckFifoParam+0xe6>
      break;   
 8004000:	bf00      	nop
 8004002:	e000      	b.n	8004006 <DMA_CheckFifoParam+0xe6>
      break;
 8004004:	bf00      	nop
    }
  } 
  
  return status; 
 8004006:	7bfb      	ldrb	r3, [r7, #15]
}
 8004008:	4618      	mov	r0, r3
 800400a:	3714      	adds	r7, #20
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004014:	b480      	push	{r7}
 8004016:	b089      	sub	sp, #36	; 0x24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800401e:	2300      	movs	r3, #0
 8004020:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004022:	2300      	movs	r3, #0
 8004024:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004026:	2300      	movs	r3, #0
 8004028:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
 800402e:	e159      	b.n	80042e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004030:	2201      	movs	r2, #1
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	697a      	ldr	r2, [r7, #20]
 8004040:	4013      	ands	r3, r2
 8004042:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	429a      	cmp	r2, r3
 800404a:	f040 8148 	bne.w	80042de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b01      	cmp	r3, #1
 8004054:	d00b      	beq.n	800406e <HAL_GPIO_Init+0x5a>
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b02      	cmp	r3, #2
 800405c:	d007      	beq.n	800406e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004062:	2b11      	cmp	r3, #17
 8004064:	d003      	beq.n	800406e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b12      	cmp	r3, #18
 800406c:	d130      	bne.n	80040d0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	005b      	lsls	r3, r3, #1
 8004078:	2203      	movs	r2, #3
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	43db      	mvns	r3, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4013      	ands	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	005b      	lsls	r3, r3, #1
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4313      	orrs	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69ba      	ldr	r2, [r7, #24]
 800409c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80040a4:	2201      	movs	r2, #1
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	fa02 f303 	lsl.w	r3, r2, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	69ba      	ldr	r2, [r7, #24]
 80040b0:	4013      	ands	r3, r2
 80040b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	091b      	lsrs	r3, r3, #4
 80040ba:	f003 0201 	and.w	r2, r3, #1
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	fa02 f303 	lsl.w	r3, r2, r3
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	69ba      	ldr	r2, [r7, #24]
 80040ce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	2203      	movs	r2, #3
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689a      	ldr	r2, [r3, #8]
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	005b      	lsls	r3, r3, #1
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b02      	cmp	r3, #2
 8004106:	d003      	beq.n	8004110 <HAL_GPIO_Init+0xfc>
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b12      	cmp	r3, #18
 800410e:	d123      	bne.n	8004158 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	08da      	lsrs	r2, r3, #3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3208      	adds	r2, #8
 8004118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800411c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	220f      	movs	r2, #15
 8004128:	fa02 f303 	lsl.w	r3, r2, r3
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	691a      	ldr	r2, [r3, #16]
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	fa02 f303 	lsl.w	r3, r2, r3
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	4313      	orrs	r3, r2
 8004148:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	08da      	lsrs	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3208      	adds	r2, #8
 8004152:	69b9      	ldr	r1, [r7, #24]
 8004154:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	2203      	movs	r2, #3
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f003 0203 	and.w	r2, r3, #3
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	005b      	lsls	r3, r3, #1
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4313      	orrs	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 80a2 	beq.w	80042de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800419a:	2300      	movs	r3, #0
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	4b56      	ldr	r3, [pc, #344]	; (80042f8 <HAL_GPIO_Init+0x2e4>)
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	4a55      	ldr	r2, [pc, #340]	; (80042f8 <HAL_GPIO_Init+0x2e4>)
 80041a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80041a8:	6453      	str	r3, [r2, #68]	; 0x44
 80041aa:	4b53      	ldr	r3, [pc, #332]	; (80042f8 <HAL_GPIO_Init+0x2e4>)
 80041ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b2:	60fb      	str	r3, [r7, #12]
 80041b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80041b6:	4a51      	ldr	r2, [pc, #324]	; (80042fc <HAL_GPIO_Init+0x2e8>)
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	089b      	lsrs	r3, r3, #2
 80041bc:	3302      	adds	r3, #2
 80041be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	f003 0303 	and.w	r3, r3, #3
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	220f      	movs	r2, #15
 80041ce:	fa02 f303 	lsl.w	r3, r2, r3
 80041d2:	43db      	mvns	r3, r3
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	4013      	ands	r3, r2
 80041d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a48      	ldr	r2, [pc, #288]	; (8004300 <HAL_GPIO_Init+0x2ec>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d019      	beq.n	8004216 <HAL_GPIO_Init+0x202>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a47      	ldr	r2, [pc, #284]	; (8004304 <HAL_GPIO_Init+0x2f0>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d013      	beq.n	8004212 <HAL_GPIO_Init+0x1fe>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a46      	ldr	r2, [pc, #280]	; (8004308 <HAL_GPIO_Init+0x2f4>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d00d      	beq.n	800420e <HAL_GPIO_Init+0x1fa>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a45      	ldr	r2, [pc, #276]	; (800430c <HAL_GPIO_Init+0x2f8>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d007      	beq.n	800420a <HAL_GPIO_Init+0x1f6>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a44      	ldr	r2, [pc, #272]	; (8004310 <HAL_GPIO_Init+0x2fc>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d101      	bne.n	8004206 <HAL_GPIO_Init+0x1f2>
 8004202:	2304      	movs	r3, #4
 8004204:	e008      	b.n	8004218 <HAL_GPIO_Init+0x204>
 8004206:	2307      	movs	r3, #7
 8004208:	e006      	b.n	8004218 <HAL_GPIO_Init+0x204>
 800420a:	2303      	movs	r3, #3
 800420c:	e004      	b.n	8004218 <HAL_GPIO_Init+0x204>
 800420e:	2302      	movs	r3, #2
 8004210:	e002      	b.n	8004218 <HAL_GPIO_Init+0x204>
 8004212:	2301      	movs	r3, #1
 8004214:	e000      	b.n	8004218 <HAL_GPIO_Init+0x204>
 8004216:	2300      	movs	r3, #0
 8004218:	69fa      	ldr	r2, [r7, #28]
 800421a:	f002 0203 	and.w	r2, r2, #3
 800421e:	0092      	lsls	r2, r2, #2
 8004220:	4093      	lsls	r3, r2
 8004222:	69ba      	ldr	r2, [r7, #24]
 8004224:	4313      	orrs	r3, r2
 8004226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004228:	4934      	ldr	r1, [pc, #208]	; (80042fc <HAL_GPIO_Init+0x2e8>)
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	089b      	lsrs	r3, r3, #2
 800422e:	3302      	adds	r3, #2
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004236:	4b37      	ldr	r3, [pc, #220]	; (8004314 <HAL_GPIO_Init+0x300>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	43db      	mvns	r3, r3
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	4013      	ands	r3, r2
 8004244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	4313      	orrs	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800425a:	4a2e      	ldr	r2, [pc, #184]	; (8004314 <HAL_GPIO_Init+0x300>)
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004260:	4b2c      	ldr	r3, [pc, #176]	; (8004314 <HAL_GPIO_Init+0x300>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	43db      	mvns	r3, r3
 800426a:	69ba      	ldr	r2, [r7, #24]
 800426c:	4013      	ands	r3, r2
 800426e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	4313      	orrs	r3, r2
 8004282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004284:	4a23      	ldr	r2, [pc, #140]	; (8004314 <HAL_GPIO_Init+0x300>)
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800428a:	4b22      	ldr	r3, [pc, #136]	; (8004314 <HAL_GPIO_Init+0x300>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	43db      	mvns	r3, r3
 8004294:	69ba      	ldr	r2, [r7, #24]
 8004296:	4013      	ands	r3, r2
 8004298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80042ae:	4a19      	ldr	r2, [pc, #100]	; (8004314 <HAL_GPIO_Init+0x300>)
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80042b4:	4b17      	ldr	r3, [pc, #92]	; (8004314 <HAL_GPIO_Init+0x300>)
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	43db      	mvns	r3, r3
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4013      	ands	r3, r2
 80042c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80042d0:	69ba      	ldr	r2, [r7, #24]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80042d8:	4a0e      	ldr	r2, [pc, #56]	; (8004314 <HAL_GPIO_Init+0x300>)
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	3301      	adds	r3, #1
 80042e2:	61fb      	str	r3, [r7, #28]
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	2b0f      	cmp	r3, #15
 80042e8:	f67f aea2 	bls.w	8004030 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80042ec:	bf00      	nop
 80042ee:	3724      	adds	r7, #36	; 0x24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	40023800 	.word	0x40023800
 80042fc:	40013800 	.word	0x40013800
 8004300:	40020000 	.word	0x40020000
 8004304:	40020400 	.word	0x40020400
 8004308:	40020800 	.word	0x40020800
 800430c:	40020c00 	.word	0x40020c00
 8004310:	40021000 	.word	0x40021000
 8004314:	40013c00 	.word	0x40013c00

08004318 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	460b      	mov	r3, r1
 8004322:	807b      	strh	r3, [r7, #2]
 8004324:	4613      	mov	r3, r2
 8004326:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004328:	787b      	ldrb	r3, [r7, #1]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800432e:	887a      	ldrh	r2, [r7, #2]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004334:	e003      	b.n	800433e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004336:	887b      	ldrh	r3, [r7, #2]
 8004338:	041a      	lsls	r2, r3, #16
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	619a      	str	r2, [r3, #24]
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr
	...

0800434c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e11f      	b.n	800459e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fe fcd4 	bl	8002d20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2224      	movs	r2, #36	; 0x24
 800437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800439e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043b0:	f001 ff38 	bl	8006224 <HAL_RCC_GetPCLK1Freq>
 80043b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	4a7b      	ldr	r2, [pc, #492]	; (80045a8 <HAL_I2C_Init+0x25c>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d807      	bhi.n	80043d0 <HAL_I2C_Init+0x84>
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4a7a      	ldr	r2, [pc, #488]	; (80045ac <HAL_I2C_Init+0x260>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	bf94      	ite	ls
 80043c8:	2301      	movls	r3, #1
 80043ca:	2300      	movhi	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e006      	b.n	80043de <HAL_I2C_Init+0x92>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a77      	ldr	r2, [pc, #476]	; (80045b0 <HAL_I2C_Init+0x264>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	bf94      	ite	ls
 80043d8:	2301      	movls	r3, #1
 80043da:	2300      	movhi	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043e2:	2301      	movs	r3, #1
 80043e4:	e0db      	b.n	800459e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	4a72      	ldr	r2, [pc, #456]	; (80045b4 <HAL_I2C_Init+0x268>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0c9b      	lsrs	r3, r3, #18
 80043f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	430a      	orrs	r2, r1
 8004404:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	4a64      	ldr	r2, [pc, #400]	; (80045a8 <HAL_I2C_Init+0x25c>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d802      	bhi.n	8004420 <HAL_I2C_Init+0xd4>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	3301      	adds	r3, #1
 800441e:	e009      	b.n	8004434 <HAL_I2C_Init+0xe8>
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004426:	fb02 f303 	mul.w	r3, r2, r3
 800442a:	4a63      	ldr	r2, [pc, #396]	; (80045b8 <HAL_I2C_Init+0x26c>)
 800442c:	fba2 2303 	umull	r2, r3, r2, r3
 8004430:	099b      	lsrs	r3, r3, #6
 8004432:	3301      	adds	r3, #1
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	6812      	ldr	r2, [r2, #0]
 8004438:	430b      	orrs	r3, r1
 800443a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004446:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	4956      	ldr	r1, [pc, #344]	; (80045a8 <HAL_I2C_Init+0x25c>)
 8004450:	428b      	cmp	r3, r1
 8004452:	d80d      	bhi.n	8004470 <HAL_I2C_Init+0x124>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1e59      	subs	r1, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	005b      	lsls	r3, r3, #1
 800445e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004462:	3301      	adds	r3, #1
 8004464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004468:	2b04      	cmp	r3, #4
 800446a:	bf38      	it	cc
 800446c:	2304      	movcc	r3, #4
 800446e:	e04f      	b.n	8004510 <HAL_I2C_Init+0x1c4>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d111      	bne.n	800449c <HAL_I2C_Init+0x150>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	1e58      	subs	r0, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	440b      	add	r3, r1
 8004486:	fbb0 f3f3 	udiv	r3, r0, r3
 800448a:	3301      	adds	r3, #1
 800448c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004490:	2b00      	cmp	r3, #0
 8004492:	bf0c      	ite	eq
 8004494:	2301      	moveq	r3, #1
 8004496:	2300      	movne	r3, #0
 8004498:	b2db      	uxtb	r3, r3
 800449a:	e012      	b.n	80044c2 <HAL_I2C_Init+0x176>
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1e58      	subs	r0, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6859      	ldr	r1, [r3, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	0099      	lsls	r1, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80044b2:	3301      	adds	r3, #1
 80044b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf0c      	ite	eq
 80044bc:	2301      	moveq	r3, #1
 80044be:	2300      	movne	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d001      	beq.n	80044ca <HAL_I2C_Init+0x17e>
 80044c6:	2301      	movs	r3, #1
 80044c8:	e022      	b.n	8004510 <HAL_I2C_Init+0x1c4>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10e      	bne.n	80044f0 <HAL_I2C_Init+0x1a4>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	1e58      	subs	r0, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6859      	ldr	r1, [r3, #4]
 80044da:	460b      	mov	r3, r1
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	440b      	add	r3, r1
 80044e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80044e4:	3301      	adds	r3, #1
 80044e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ee:	e00f      	b.n	8004510 <HAL_I2C_Init+0x1c4>
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1e58      	subs	r0, r3, #1
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6859      	ldr	r1, [r3, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	440b      	add	r3, r1
 80044fe:	0099      	lsls	r1, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	fbb0 f3f3 	udiv	r3, r0, r3
 8004506:	3301      	adds	r3, #1
 8004508:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800450c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	6809      	ldr	r1, [r1, #0]
 8004514:	4313      	orrs	r3, r2
 8004516:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	69da      	ldr	r2, [r3, #28]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	430a      	orrs	r2, r1
 8004532:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800453e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	6911      	ldr	r1, [r2, #16]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	68d2      	ldr	r2, [r2, #12]
 800454a:	4311      	orrs	r1, r2
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	6812      	ldr	r2, [r2, #0]
 8004550:	430b      	orrs	r3, r1
 8004552:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	695a      	ldr	r2, [r3, #20]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0201 	orr.w	r2, r2, #1
 800457e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	000186a0 	.word	0x000186a0
 80045ac:	001e847f 	.word	0x001e847f
 80045b0:	003d08ff 	.word	0x003d08ff
 80045b4:	431bde83 	.word	0x431bde83
 80045b8:	10624dd3 	.word	0x10624dd3

080045bc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b088      	sub	sp, #32
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	461a      	mov	r2, r3
 80045ca:	4603      	mov	r3, r0
 80045cc:	817b      	strh	r3, [r7, #10]
 80045ce:	460b      	mov	r3, r1
 80045d0:	813b      	strh	r3, [r7, #8]
 80045d2:	4613      	mov	r3, r2
 80045d4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045d6:	f7ff f84b 	bl	8003670 <HAL_GetTick>
 80045da:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	2b20      	cmp	r3, #32
 80045e6:	f040 80d9 	bne.w	800479c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	2319      	movs	r3, #25
 80045f0:	2201      	movs	r2, #1
 80045f2:	496d      	ldr	r1, [pc, #436]	; (80047a8 <HAL_I2C_Mem_Write+0x1ec>)
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 f96f 	bl	80048d8 <I2C_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004600:	2302      	movs	r3, #2
 8004602:	e0cc      	b.n	800479e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460a:	2b01      	cmp	r3, #1
 800460c:	d101      	bne.n	8004612 <HAL_I2C_Mem_Write+0x56>
 800460e:	2302      	movs	r3, #2
 8004610:	e0c5      	b.n	800479e <HAL_I2C_Mem_Write+0x1e2>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0301 	and.w	r3, r3, #1
 8004624:	2b01      	cmp	r3, #1
 8004626:	d007      	beq.n	8004638 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0201 	orr.w	r2, r2, #1
 8004636:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004646:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2221      	movs	r2, #33	; 0x21
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2240      	movs	r2, #64	; 0x40
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a3a      	ldr	r2, [r7, #32]
 8004662:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004668:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800466e:	b29a      	uxth	r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4a4d      	ldr	r2, [pc, #308]	; (80047ac <HAL_I2C_Mem_Write+0x1f0>)
 8004678:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800467a:	88f8      	ldrh	r0, [r7, #6]
 800467c:	893a      	ldrh	r2, [r7, #8]
 800467e:	8979      	ldrh	r1, [r7, #10]
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	9301      	str	r3, [sp, #4]
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	9300      	str	r3, [sp, #0]
 8004688:	4603      	mov	r3, r0
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 f890 	bl	80047b0 <I2C_RequestMemoryWrite>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d052      	beq.n	800473c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e081      	b.n	800479e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 f9f0 	bl	8004a84 <I2C_WaitOnTXEFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00d      	beq.n	80046c6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	d107      	bne.n	80046c2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046c0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e06b      	b.n	800479e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	781a      	ldrb	r2, [r3, #0]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e0:	3b01      	subs	r3, #1
 80046e2:	b29a      	uxth	r2, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	3b01      	subs	r3, #1
 80046f0:	b29a      	uxth	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0304 	and.w	r3, r3, #4
 8004700:	2b04      	cmp	r3, #4
 8004702:	d11b      	bne.n	800473c <HAL_I2C_Mem_Write+0x180>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004708:	2b00      	cmp	r3, #0
 800470a:	d017      	beq.n	800473c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004726:	3b01      	subs	r3, #1
 8004728:	b29a      	uxth	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1aa      	bne.n	800469a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004748:	68f8      	ldr	r0, [r7, #12]
 800474a:	f000 f9dc 	bl	8004b06 <I2C_WaitOnBTFFlagUntilTimeout>
 800474e:	4603      	mov	r3, r0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00d      	beq.n	8004770 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	2b04      	cmp	r3, #4
 800475a:	d107      	bne.n	800476c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800476a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e016      	b.n	800479e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800477e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004798:	2300      	movs	r3, #0
 800479a:	e000      	b.n	800479e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800479c:	2302      	movs	r3, #2
  }
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	00100002 	.word	0x00100002
 80047ac:	ffff0000 	.word	0xffff0000

080047b0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af02      	add	r7, sp, #8
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	4608      	mov	r0, r1
 80047ba:	4611      	mov	r1, r2
 80047bc:	461a      	mov	r2, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	817b      	strh	r3, [r7, #10]
 80047c2:	460b      	mov	r3, r1
 80047c4:	813b      	strh	r3, [r7, #8]
 80047c6:	4613      	mov	r3, r2
 80047c8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047d8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047dc:	9300      	str	r3, [sp, #0]
 80047de:	6a3b      	ldr	r3, [r7, #32]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047e6:	68f8      	ldr	r0, [r7, #12]
 80047e8:	f000 f876 	bl	80048d8 <I2C_WaitOnFlagUntilTimeout>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00c      	beq.n	800480c <I2C_RequestMemoryWrite+0x5c>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <I2C_RequestMemoryWrite+0x58>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004806:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e05f      	b.n	80048cc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800480c:	897b      	ldrh	r3, [r7, #10]
 800480e:	b2db      	uxtb	r3, r3
 8004810:	461a      	mov	r2, r3
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800481a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800481c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481e:	6a3a      	ldr	r2, [r7, #32]
 8004820:	492c      	ldr	r1, [pc, #176]	; (80048d4 <I2C_RequestMemoryWrite+0x124>)
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 f8af 	bl	8004986 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <I2C_RequestMemoryWrite+0x82>
  {
    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e04c      	b.n	80048cc <I2C_RequestMemoryWrite+0x11c>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	617b      	str	r3, [r7, #20]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004848:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800484a:	6a39      	ldr	r1, [r7, #32]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f919 	bl	8004a84 <I2C_WaitOnTXEFlagUntilTimeout>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00d      	beq.n	8004874 <I2C_RequestMemoryWrite+0xc4>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	2b04      	cmp	r3, #4
 800485e:	d107      	bne.n	8004870 <I2C_RequestMemoryWrite+0xc0>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e02b      	b.n	80048cc <I2C_RequestMemoryWrite+0x11c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d105      	bne.n	8004886 <I2C_RequestMemoryWrite+0xd6>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800487a:	893b      	ldrh	r3, [r7, #8]
 800487c:	b2da      	uxtb	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	611a      	str	r2, [r3, #16]
 8004884:	e021      	b.n	80048ca <I2C_RequestMemoryWrite+0x11a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004886:	893b      	ldrh	r3, [r7, #8]
 8004888:	0a1b      	lsrs	r3, r3, #8
 800488a:	b29b      	uxth	r3, r3
 800488c:	b2da      	uxtb	r2, r3
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004896:	6a39      	ldr	r1, [r7, #32]
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f000 f8f3 	bl	8004a84 <I2C_WaitOnTXEFlagUntilTimeout>
 800489e:	4603      	mov	r3, r0
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00d      	beq.n	80048c0 <I2C_RequestMemoryWrite+0x110>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d107      	bne.n	80048bc <I2C_RequestMemoryWrite+0x10c>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e005      	b.n	80048cc <I2C_RequestMemoryWrite+0x11c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80048c0:	893b      	ldrh	r3, [r7, #8]
 80048c2:	b2da      	uxtb	r2, r3
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80048ca:	2300      	movs	r3, #0
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	00010002 	.word	0x00010002

080048d8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	4613      	mov	r3, r2
 80048e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048e8:	e025      	b.n	8004936 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048f0:	d021      	beq.n	8004936 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048f2:	f7fe febd 	bl	8003670 <HAL_GetTick>
 80048f6:	4602      	mov	r2, r0
 80048f8:	69bb      	ldr	r3, [r7, #24]
 80048fa:	1ad3      	subs	r3, r2, r3
 80048fc:	683a      	ldr	r2, [r7, #0]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d302      	bcc.n	8004908 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d116      	bne.n	8004936 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004922:	f043 0220 	orr.w	r2, r3, #32
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e023      	b.n	800497e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	0c1b      	lsrs	r3, r3, #16
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	d10d      	bne.n	800495c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	43da      	mvns	r2, r3
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	4013      	ands	r3, r2
 800494c:	b29b      	uxth	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	bf0c      	ite	eq
 8004952:	2301      	moveq	r3, #1
 8004954:	2300      	movne	r3, #0
 8004956:	b2db      	uxtb	r3, r3
 8004958:	461a      	mov	r2, r3
 800495a:	e00c      	b.n	8004976 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	699b      	ldr	r3, [r3, #24]
 8004962:	43da      	mvns	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	4013      	ands	r3, r2
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	bf0c      	ite	eq
 800496e:	2301      	moveq	r3, #1
 8004970:	2300      	movne	r3, #0
 8004972:	b2db      	uxtb	r3, r3
 8004974:	461a      	mov	r2, r3
 8004976:	79fb      	ldrb	r3, [r7, #7]
 8004978:	429a      	cmp	r2, r3
 800497a:	d0b6      	beq.n	80048ea <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}

08004986 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	607a      	str	r2, [r7, #4]
 8004992:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004994:	e051      	b.n	8004a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a4:	d123      	bne.n	80049ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049b4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80049be:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f043 0204 	orr.w	r2, r3, #4
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e046      	b.n	8004a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049f4:	d021      	beq.n	8004a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049f6:	f7fe fe3b 	bl	8003670 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d302      	bcc.n	8004a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d116      	bne.n	8004a3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f043 0220 	orr.w	r2, r3, #32
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e020      	b.n	8004a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d10c      	bne.n	8004a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	43da      	mvns	r2, r3
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	bf14      	ite	ne
 8004a56:	2301      	movne	r3, #1
 8004a58:	2300      	moveq	r3, #0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	e00b      	b.n	8004a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	699b      	ldr	r3, [r3, #24]
 8004a64:	43da      	mvns	r2, r3
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	4013      	ands	r3, r2
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf14      	ite	ne
 8004a70:	2301      	movne	r3, #1
 8004a72:	2300      	moveq	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d18d      	bne.n	8004996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004a7a:	2300      	movs	r3, #0
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3710      	adds	r7, #16
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b084      	sub	sp, #16
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a90:	e02d      	b.n	8004aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f878 	bl	8004b88 <I2C_IsAcknowledgeFailed>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e02d      	b.n	8004afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004aa8:	d021      	beq.n	8004aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aaa:	f7fe fde1 	bl	8003670 <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d302      	bcc.n	8004ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d116      	bne.n	8004aee <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	2220      	movs	r2, #32
 8004aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f043 0220 	orr.w	r2, r3, #32
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e007      	b.n	8004afe <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af8:	2b80      	cmp	r3, #128	; 0x80
 8004afa:	d1ca      	bne.n	8004a92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	60f8      	str	r0, [r7, #12]
 8004b0e:	60b9      	str	r1, [r7, #8]
 8004b10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b12:	e02d      	b.n	8004b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f000 f837 	bl	8004b88 <I2C_IsAcknowledgeFailed>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d001      	beq.n	8004b24 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e02d      	b.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b2a:	d021      	beq.n	8004b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2c:	f7fe fda0 	bl	8003670 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d302      	bcc.n	8004b42 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d116      	bne.n	8004b70 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	f043 0220 	orr.w	r2, r3, #32
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e007      	b.n	8004b80 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d1ca      	bne.n	8004b14 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b9e:	d11b      	bne.n	8004bd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ba8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2220      	movs	r2, #32
 8004bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	f043 0204 	orr.w	r2, r3, #4
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e000      	b.n	8004bda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr
	...

08004be8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b088      	sub	sp, #32
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e128      	b.n	8004e4c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d109      	bne.n	8004c1a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a90      	ldr	r2, [pc, #576]	; (8004e54 <HAL_I2S_Init+0x26c>)
 8004c12:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7fe f8cb 	bl	8002db0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69db      	ldr	r3, [r3, #28]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6812      	ldr	r2, [r2, #0]
 8004c2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004c30:	f023 030f 	bic.w	r3, r3, #15
 8004c34:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d060      	beq.n	8004d08 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004c4e:	2310      	movs	r3, #16
 8004c50:	617b      	str	r3, [r7, #20]
 8004c52:	e001      	b.n	8004c58 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004c54:	2320      	movs	r3, #32
 8004c56:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d802      	bhi.n	8004c66 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004c66:	2001      	movs	r0, #1
 8004c68:	f001 fc26 	bl	80064b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004c6c:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c76:	d125      	bne.n	8004cc4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d010      	beq.n	8004ca2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	461a      	mov	r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	695b      	ldr	r3, [r3, #20]
 8004c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c9c:	3305      	adds	r3, #5
 8004c9e:	613b      	str	r3, [r7, #16]
 8004ca0:	e01f      	b.n	8004ce2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	00db      	lsls	r3, r3, #3
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	005b      	lsls	r3, r3, #1
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	695b      	ldr	r3, [r3, #20]
 8004cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cbe:	3305      	adds	r3, #5
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	e00e      	b.n	8004ce2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	005b      	lsls	r3, r3, #1
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cde:	3305      	adds	r3, #5
 8004ce0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4a5c      	ldr	r2, [pc, #368]	; (8004e58 <HAL_I2S_Init+0x270>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	08db      	lsrs	r3, r3, #3
 8004cec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f003 0301 	and.w	r3, r3, #1
 8004cf4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	085b      	lsrs	r3, r3, #1
 8004cfe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	021b      	lsls	r3, r3, #8
 8004d04:	61bb      	str	r3, [r7, #24]
 8004d06:	e003      	b.n	8004d10 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d902      	bls.n	8004d1c <HAL_I2S_Init+0x134>
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	2bff      	cmp	r3, #255	; 0xff
 8004d1a:	d907      	bls.n	8004d2c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d20:	f043 0210 	orr.w	r2, r3, #16
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e08f      	b.n	8004e4c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691a      	ldr	r2, [r3, #16]
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	ea42 0103 	orr.w	r1, r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d4a:	f023 030f 	bic.w	r3, r3, #15
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6851      	ldr	r1, [r2, #4]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	6892      	ldr	r2, [r2, #8]
 8004d56:	4311      	orrs	r1, r2
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	68d2      	ldr	r2, [r2, #12]
 8004d5c:	4311      	orrs	r1, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6992      	ldr	r2, [r2, #24]
 8004d62:	430a      	orrs	r2, r1
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d6e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d161      	bne.n	8004e3c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a38      	ldr	r2, [pc, #224]	; (8004e5c <HAL_I2S_Init+0x274>)
 8004d7c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a37      	ldr	r2, [pc, #220]	; (8004e60 <HAL_I2S_Init+0x278>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d101      	bne.n	8004d8c <HAL_I2S_Init+0x1a4>
 8004d88:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <HAL_I2S_Init+0x27c>)
 8004d8a:	e001      	b.n	8004d90 <HAL_I2S_Init+0x1a8>
 8004d8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d90:	69db      	ldr	r3, [r3, #28]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	6812      	ldr	r2, [r2, #0]
 8004d96:	4932      	ldr	r1, [pc, #200]	; (8004e60 <HAL_I2S_Init+0x278>)
 8004d98:	428a      	cmp	r2, r1
 8004d9a:	d101      	bne.n	8004da0 <HAL_I2S_Init+0x1b8>
 8004d9c:	4a31      	ldr	r2, [pc, #196]	; (8004e64 <HAL_I2S_Init+0x27c>)
 8004d9e:	e001      	b.n	8004da4 <HAL_I2S_Init+0x1bc>
 8004da0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004da4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004da8:	f023 030f 	bic.w	r3, r3, #15
 8004dac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a2b      	ldr	r2, [pc, #172]	; (8004e60 <HAL_I2S_Init+0x278>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d101      	bne.n	8004dbc <HAL_I2S_Init+0x1d4>
 8004db8:	4b2a      	ldr	r3, [pc, #168]	; (8004e64 <HAL_I2S_Init+0x27c>)
 8004dba:	e001      	b.n	8004dc0 <HAL_I2S_Init+0x1d8>
 8004dbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dc0:	2202      	movs	r2, #2
 8004dc2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a25      	ldr	r2, [pc, #148]	; (8004e60 <HAL_I2S_Init+0x278>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d101      	bne.n	8004dd2 <HAL_I2S_Init+0x1ea>
 8004dce:	4b25      	ldr	r3, [pc, #148]	; (8004e64 <HAL_I2S_Init+0x27c>)
 8004dd0:	e001      	b.n	8004dd6 <HAL_I2S_Init+0x1ee>
 8004dd2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dd6:	69db      	ldr	r3, [r3, #28]
 8004dd8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004de2:	d003      	beq.n	8004dec <HAL_I2S_Init+0x204>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d103      	bne.n	8004df4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004df0:	613b      	str	r3, [r7, #16]
 8004df2:	e001      	b.n	8004df8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004df4:	2300      	movs	r3, #0
 8004df6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	b299      	uxth	r1, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8004e0e:	4303      	orrs	r3, r0
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	430b      	orrs	r3, r1
 8004e14:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8004e16:	4313      	orrs	r3, r2
 8004e18:	b29a      	uxth	r2, r3
 8004e1a:	897b      	ldrh	r3, [r7, #10]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	b29b      	uxth	r3, r3
 8004e20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004e24:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a0d      	ldr	r2, [pc, #52]	; (8004e60 <HAL_I2S_Init+0x278>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d101      	bne.n	8004e34 <HAL_I2S_Init+0x24c>
 8004e30:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <HAL_I2S_Init+0x27c>)
 8004e32:	e001      	b.n	8004e38 <HAL_I2S_Init+0x250>
 8004e34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e38:	897a      	ldrh	r2, [r7, #10]
 8004e3a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3720      	adds	r7, #32
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	08004f5f 	.word	0x08004f5f
 8004e58:	cccccccd 	.word	0xcccccccd
 8004e5c:	08005389 	.word	0x08005389
 8004e60:	40003800 	.word	0x40003800
 8004e64:	40003400 	.word	0x40003400

08004e68 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	881a      	ldrh	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	1c9a      	adds	r2, r3, #2
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	3b01      	subs	r3, #1
 8004eca:	b29a      	uxth	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed4:	b29b      	uxth	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10e      	bne.n	8004ef8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ee8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff ffb8 	bl	8004e68 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004ef8:	bf00      	nop
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f12:	b292      	uxth	r2, r2
 8004f14:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	1c9a      	adds	r2, r3, #2
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	3b01      	subs	r3, #1
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10e      	bne.n	8004f56 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f46:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7ff ff93 	bl	8004e7c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004f56:	bf00      	nop
 8004f58:	3708      	adds	r7, #8
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b086      	sub	sp, #24
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f74:	b2db      	uxtb	r3, r3
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d13a      	bne.n	8004ff0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f003 0301 	and.w	r3, r3, #1
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d109      	bne.n	8004f98 <I2S_IRQHandler+0x3a>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b40      	cmp	r3, #64	; 0x40
 8004f90:	d102      	bne.n	8004f98 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f7ff ffb4 	bl	8004f00 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9e:	2b40      	cmp	r3, #64	; 0x40
 8004fa0:	d126      	bne.n	8004ff0 <I2S_IRQHandler+0x92>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	f003 0320 	and.w	r3, r3, #32
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d11f      	bne.n	8004ff0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004fbe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	613b      	str	r3, [r7, #16]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	613b      	str	r3, [r7, #16]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe2:	f043 0202 	orr.w	r2, r3, #2
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f7ff ff50 	bl	8004e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b03      	cmp	r3, #3
 8004ffa:	d136      	bne.n	800506a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d109      	bne.n	800501a <I2S_IRQHandler+0xbc>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005010:	2b80      	cmp	r3, #128	; 0x80
 8005012:	d102      	bne.n	800501a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff ff45 	bl	8004ea4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d122      	bne.n	800506a <I2S_IRQHandler+0x10c>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f003 0320 	and.w	r3, r3, #32
 800502e:	2b20      	cmp	r3, #32
 8005030:	d11b      	bne.n	800506a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685a      	ldr	r2, [r3, #4]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005040:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005042:	2300      	movs	r3, #0
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505c:	f043 0204 	orr.w	r2, r3, #4
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f7ff ff13 	bl	8004e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800506a:	bf00      	nop
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <HAL_I2SEx_TransmitReceive_DMA>:
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pTxData, uint16_t *pRxData,
                                                uint16_t Size)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b088      	sub	sp, #32
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8005082:	2300      	movs	r3, #0
 8005084:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b01      	cmp	r3, #1
 8005098:	d002      	beq.n	80050a0 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 800509a:	2302      	movs	r3, #2
 800509c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800509e:	e160      	b.n	8005362 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 80050ac:	887b      	ldrh	r3, [r7, #2]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e15a      	b.n	800536c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d101      	bne.n	80050c6 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 80050c2:	2302      	movs	r3, #2
 80050c4:	e152      	b.n	800536c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d002      	beq.n	80050f2 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b05      	cmp	r3, #5
 80050f0:	d114      	bne.n	800511c <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 80050f2:	887b      	ldrh	r3, [r7, #2]
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80050fc:	887b      	ldrh	r3, [r7, #2]
 80050fe:	005b      	lsls	r3, r3, #1
 8005100:	b29a      	uxth	r2, r3
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8005106:	887b      	ldrh	r3, [r7, #2]
 8005108:	005b      	lsls	r3, r3, #1
 800510a:	b29a      	uxth	r2, r3
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8005110:	887b      	ldrh	r3, [r7, #2]
 8005112:	005b      	lsls	r3, r3, #1
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	865a      	strh	r2, [r3, #50]	; 0x32
 800511a:	e00b      	b.n	8005134 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	887a      	ldrh	r2, [r7, #2]
 8005120:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	887a      	ldrh	r2, [r7, #2]
 8005126:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	887a      	ldrh	r2, [r7, #2]
 800512c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	887a      	ldrh	r2, [r7, #2]
 8005132:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2205      	movs	r2, #5
 800513e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005146:	4a8b      	ldr	r2, [pc, #556]	; (8005374 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8005148:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800514e:	4a8a      	ldr	r2, [pc, #552]	; (8005378 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8005150:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	4a89      	ldr	r2, [pc, #548]	; (800537c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8005158:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback  = I2SEx_TxRxDMAHalfCplt;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515e:	4a85      	ldr	r2, [pc, #532]	; (8005374 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8005160:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005166:	4a84      	ldr	r2, [pc, #528]	; (8005378 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8005168:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800516e:	4a83      	ldr	r2, [pc, #524]	; (800537c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8005170:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69db      	ldr	r3, [r3, #28]
 8005178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517c:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005184:	d002      	beq.n	800518c <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d16b      	bne.n	8005264 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 800518c:	1d3b      	adds	r3, r7, #4
 800518e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4a79      	ldr	r2, [pc, #484]	; (8005380 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800519a:	4293      	cmp	r3, r2
 800519c:	d101      	bne.n	80051a2 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 800519e:	4b79      	ldr	r3, [pc, #484]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80051a0:	e001      	b.n	80051a6 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 80051a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051a6:	330c      	adds	r3, #12
 80051a8:	4619      	mov	r1, r3
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	f7fe fc1a 	bl	80039ec <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a70      	ldr	r2, [pc, #448]	; (8005380 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d101      	bne.n	80051c6 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 80051c2:	4b70      	ldr	r3, [pc, #448]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80051c4:	e001      	b.n	80051ca <HAL_I2SEx_TransmitReceive_DMA+0x156>
 80051c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	496b      	ldr	r1, [pc, #428]	; (8005380 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80051d2:	428b      	cmp	r3, r1
 80051d4:	d101      	bne.n	80051da <HAL_I2SEx_TransmitReceive_DMA+0x166>
 80051d6:	4b6b      	ldr	r3, [pc, #428]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80051d8:	e001      	b.n	80051de <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 80051da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051de:	f042 0201 	orr.w	r2, r2, #1
 80051e2:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80051e4:	f107 0308 	add.w	r3, r7, #8
 80051e8:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	6819      	ldr	r1, [r3, #0]
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	330c      	adds	r3, #12
 80051f8:	461a      	mov	r2, r3
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051fe:	b29b      	uxth	r3, r3
 8005200:	f7fe fbf4 	bl	80039ec <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0202 	orr.w	r2, r2, #2
 8005212:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800521e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005222:	f000 809e 	beq.w	8005362 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a55      	ldr	r2, [pc, #340]	; (8005380 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d101      	bne.n	8005234 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8005230:	4b54      	ldr	r3, [pc, #336]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8005232:	e001      	b.n	8005238 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8005234:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005238:	69da      	ldr	r2, [r3, #28]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4950      	ldr	r1, [pc, #320]	; (8005380 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8005240:	428b      	cmp	r3, r1
 8005242:	d101      	bne.n	8005248 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8005244:	4b4f      	ldr	r3, [pc, #316]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8005246:	e001      	b.n	800524c <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8005248:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800524c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005250:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69da      	ldr	r2, [r3, #28]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005260:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8005262:	e07e      	b.n	8005362 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	69db      	ldr	r3, [r3, #28]
 800526a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005272:	d10a      	bne.n	800528a <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005274:	2300      	movs	r3, #0
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 800528a:	f107 0308 	add.w	r3, r7, #8
 800528e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005294:	69bb      	ldr	r3, [r7, #24]
 8005296:	6819      	ldr	r1, [r3, #0]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a38      	ldr	r2, [pc, #224]	; (8005380 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d101      	bne.n	80052a6 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 80052a2:	4b38      	ldr	r3, [pc, #224]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80052a4:	e001      	b.n	80052aa <HAL_I2SEx_TransmitReceive_DMA+0x236>
 80052a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052aa:	330c      	adds	r3, #12
 80052ac:	461a      	mov	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	f7fe fb9a 	bl	80039ec <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a30      	ldr	r2, [pc, #192]	; (8005380 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d101      	bne.n	80052c6 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 80052c2:	4b30      	ldr	r3, [pc, #192]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80052c4:	e001      	b.n	80052ca <HAL_I2SEx_TransmitReceive_DMA+0x256>
 80052c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	492b      	ldr	r1, [pc, #172]	; (8005380 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80052d2:	428b      	cmp	r3, r1
 80052d4:	d101      	bne.n	80052da <HAL_I2SEx_TransmitReceive_DMA+0x266>
 80052d6:	4b2b      	ldr	r3, [pc, #172]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80052d8:	e001      	b.n	80052de <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 80052da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052de:	f042 0202 	orr.w	r2, r2, #2
 80052e2:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 80052e4:	1d3b      	adds	r3, r7, #4
 80052e6:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	330c      	adds	r3, #12
 80052f2:	4619      	mov	r1, r3
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	f7fe fb75 	bl	80039ec <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f042 0201 	orr.w	r2, r2, #1
 8005310:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005320:	d01e      	beq.n	8005360 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a16      	ldr	r2, [pc, #88]	; (8005380 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d101      	bne.n	8005330 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 800532c:	4b15      	ldr	r3, [pc, #84]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800532e:	e001      	b.n	8005334 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8005330:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005334:	69da      	ldr	r2, [r3, #28]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4911      	ldr	r1, [pc, #68]	; (8005380 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800533c:	428b      	cmp	r3, r1
 800533e:	d101      	bne.n	8005344 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8005340:	4b10      	ldr	r3, [pc, #64]	; (8005384 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8005342:	e001      	b.n	8005348 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8005344:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005348:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800534c:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69da      	ldr	r2, [r3, #28]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800535c:	61da      	str	r2, [r3, #28]
 800535e:	e000      	b.n	8005362 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8005360:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 800536a:	7ffb      	ldrb	r3, [r7, #31]
}
 800536c:	4618      	mov	r0, r3
 800536e:	3720      	adds	r7, #32
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	08005631 	.word	0x08005631
 8005378:	0800564d 	.word	0x0800564d
 800537c:	08005785 	.word	0x08005785
 8005380:	40003800 	.word	0x40003800
 8005384:	40003400 	.word	0x40003400

08005388 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b088      	sub	sp, #32
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4aa2      	ldr	r2, [pc, #648]	; (8005628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d101      	bne.n	80053a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80053a2:	4ba2      	ldr	r3, [pc, #648]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80053a4:	e001      	b.n	80053aa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80053a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a9b      	ldr	r2, [pc, #620]	; (8005628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d101      	bne.n	80053c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80053c0:	4b9a      	ldr	r3, [pc, #616]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80053c2:	e001      	b.n	80053c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80053c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053d4:	d004      	beq.n	80053e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	f040 8099 	bne.w	8005512 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80053e0:	69fb      	ldr	r3, [r7, #28]
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d107      	bne.n	80053fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fa05 	bl	8005804 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b01      	cmp	r3, #1
 8005402:	d107      	bne.n	8005414 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d002      	beq.n	8005414 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f000 faa8 	bl	8005964 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005414:	69bb      	ldr	r3, [r7, #24]
 8005416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541a:	2b40      	cmp	r3, #64	; 0x40
 800541c:	d13a      	bne.n	8005494 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f003 0320 	and.w	r3, r3, #32
 8005424:	2b00      	cmp	r3, #0
 8005426:	d035      	beq.n	8005494 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a7e      	ldr	r2, [pc, #504]	; (8005628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d101      	bne.n	8005436 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005432:	4b7e      	ldr	r3, [pc, #504]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005434:	e001      	b.n	800543a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005436:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4979      	ldr	r1, [pc, #484]	; (8005628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005442:	428b      	cmp	r3, r1
 8005444:	d101      	bne.n	800544a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005446:	4b79      	ldr	r3, [pc, #484]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005448:	e001      	b.n	800544e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800544a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800544e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005452:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005462:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2201      	movs	r2, #1
 800547e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005486:	f043 0202 	orr.w	r2, r3, #2
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7ff fcfe 	bl	8004e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f003 0308 	and.w	r3, r3, #8
 800549a:	2b08      	cmp	r3, #8
 800549c:	f040 80be 	bne.w	800561c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f003 0320 	and.w	r3, r3, #32
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 80b8 	beq.w	800561c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a59      	ldr	r2, [pc, #356]	; (8005628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d101      	bne.n	80054ca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80054c6:	4b59      	ldr	r3, [pc, #356]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80054c8:	e001      	b.n	80054ce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80054ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4954      	ldr	r1, [pc, #336]	; (8005628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80054d6:	428b      	cmp	r3, r1
 80054d8:	d101      	bne.n	80054de <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80054da:	4b54      	ldr	r3, [pc, #336]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80054dc:	e001      	b.n	80054e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80054de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054e6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80054e8:	2300      	movs	r3, #0
 80054ea:	60bb      	str	r3, [r7, #8]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	60bb      	str	r3, [r7, #8]
 80054f4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2201      	movs	r2, #1
 80054fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005502:	f043 0204 	orr.w	r2, r3, #4
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f7ff fcc0 	bl	8004e90 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005510:	e084      	b.n	800561c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b02      	cmp	r3, #2
 800551a:	d107      	bne.n	800552c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005522:	2b00      	cmp	r3, #0
 8005524:	d002      	beq.n	800552c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f99e 	bl	8005868 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b01      	cmp	r3, #1
 8005534:	d107      	bne.n	8005546 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d002      	beq.n	8005546 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f9dd 	bl	8005900 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800554c:	2b40      	cmp	r3, #64	; 0x40
 800554e:	d12f      	bne.n	80055b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d02a      	beq.n	80055b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005568:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a2e      	ldr	r2, [pc, #184]	; (8005628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d101      	bne.n	8005578 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005574:	4b2d      	ldr	r3, [pc, #180]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005576:	e001      	b.n	800557c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005578:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4929      	ldr	r1, [pc, #164]	; (8005628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005584:	428b      	cmp	r3, r1
 8005586:	d101      	bne.n	800558c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005588:	4b28      	ldr	r3, [pc, #160]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800558a:	e001      	b.n	8005590 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800558c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005590:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005594:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a2:	f043 0202 	orr.w	r2, r3, #2
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7ff fc70 	bl	8004e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80055b0:	69bb      	ldr	r3, [r7, #24]
 80055b2:	f003 0308 	and.w	r3, r3, #8
 80055b6:	2b08      	cmp	r3, #8
 80055b8:	d131      	bne.n	800561e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f003 0320 	and.w	r3, r3, #32
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d02c      	beq.n	800561e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4a17      	ldr	r2, [pc, #92]	; (8005628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d101      	bne.n	80055d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80055ce:	4b17      	ldr	r3, [pc, #92]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055d0:	e001      	b.n	80055d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80055d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4912      	ldr	r1, [pc, #72]	; (8005628 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80055de:	428b      	cmp	r3, r1
 80055e0:	d101      	bne.n	80055e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 80055e2:	4b12      	ldr	r3, [pc, #72]	; (800562c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80055e4:	e001      	b.n	80055ea <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 80055e6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055ea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055ee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80055fe:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800560c:	f043 0204 	orr.w	r2, r3, #4
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005614:	6878      	ldr	r0, [r7, #4]
 8005616:	f7ff fc3b 	bl	8004e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800561a:	e000      	b.n	800561e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800561c:	bf00      	nop
}
 800561e:	bf00      	nop
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	40003800 	.word	0x40003800
 800562c:	40003400 	.word	0x40003400

08005630 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800563c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f7fb fe0c 	bl	800125c <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005644:	bf00      	nop
 8005646:	3710      	adds	r7, #16
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005658:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	69db      	ldr	r3, [r3, #28]
 800565e:	2b00      	cmp	r3, #0
 8005660:	f040 8085 	bne.w	800576e <I2SEx_TxRxDMACplt+0x122>
  {
    if (hi2s->hdmarx == hdma)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005668:	687a      	ldr	r2, [r7, #4]
 800566a:	429a      	cmp	r2, r3
 800566c:	d13c      	bne.n	80056e8 <I2SEx_TxRxDMACplt+0x9c>
    {
      /* Disable Rx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800567c:	d006      	beq.n	800568c <I2SEx_TxRxDMACplt+0x40>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8005688:	2b00      	cmp	r3, #0
 800568a:	d116      	bne.n	80056ba <I2SEx_TxRxDMACplt+0x6e>
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	4a3a      	ldr	r2, [pc, #232]	; (800577c <I2SEx_TxRxDMACplt+0x130>)
 8005692:	4293      	cmp	r3, r2
 8005694:	d101      	bne.n	800569a <I2SEx_TxRxDMACplt+0x4e>
 8005696:	4b3a      	ldr	r3, [pc, #232]	; (8005780 <I2SEx_TxRxDMACplt+0x134>)
 8005698:	e001      	b.n	800569e <I2SEx_TxRxDMACplt+0x52>
 800569a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800569e:	685a      	ldr	r2, [r3, #4]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4935      	ldr	r1, [pc, #212]	; (800577c <I2SEx_TxRxDMACplt+0x130>)
 80056a6:	428b      	cmp	r3, r1
 80056a8:	d101      	bne.n	80056ae <I2SEx_TxRxDMACplt+0x62>
 80056aa:	4b35      	ldr	r3, [pc, #212]	; (8005780 <I2SEx_TxRxDMACplt+0x134>)
 80056ac:	e001      	b.n	80056b2 <I2SEx_TxRxDMACplt+0x66>
 80056ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056b2:	f022 0201 	bic.w	r2, r2, #1
 80056b6:	605a      	str	r2, [r3, #4]
 80056b8:	e007      	b.n	80056ca <I2SEx_TxRxDMACplt+0x7e>
      }
      else
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0201 	bic.w	r2, r2, #1
 80056c8:	605a      	str	r2, [r3, #4]
      }

      hi2s->RxXferCount = 0U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	865a      	strh	r2, [r3, #50]	; 0x32

      if (hi2s->TxXferCount == 0U)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d106      	bne.n	80056e8 <I2SEx_TxRxDMACplt+0x9c>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2201      	movs	r2, #1
 80056de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80056e2:	68f8      	ldr	r0, [r7, #12]
 80056e4:	f7fb fda2 	bl	800122c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
      }
    }

    if (hi2s->hdmatx == hdma)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d140      	bne.n	8005774 <I2SEx_TxRxDMACplt+0x128>
    {
      /* Disable Tx DMA Request */
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005700:	d006      	beq.n	8005710 <I2SEx_TxRxDMACplt+0xc4>
          ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800570c:	2b00      	cmp	r3, #0
 800570e:	d108      	bne.n	8005722 <I2SEx_TxRxDMACplt+0xd6>
      {
        CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f022 0202 	bic.w	r2, r2, #2
 800571e:	605a      	str	r2, [r3, #4]
 8005720:	e015      	b.n	800574e <I2SEx_TxRxDMACplt+0x102>
      }
      else
      {
        CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a15      	ldr	r2, [pc, #84]	; (800577c <I2SEx_TxRxDMACplt+0x130>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d101      	bne.n	8005730 <I2SEx_TxRxDMACplt+0xe4>
 800572c:	4b14      	ldr	r3, [pc, #80]	; (8005780 <I2SEx_TxRxDMACplt+0x134>)
 800572e:	e001      	b.n	8005734 <I2SEx_TxRxDMACplt+0xe8>
 8005730:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005734:	685a      	ldr	r2, [r3, #4]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4910      	ldr	r1, [pc, #64]	; (800577c <I2SEx_TxRxDMACplt+0x130>)
 800573c:	428b      	cmp	r3, r1
 800573e:	d101      	bne.n	8005744 <I2SEx_TxRxDMACplt+0xf8>
 8005740:	4b0f      	ldr	r3, [pc, #60]	; (8005780 <I2SEx_TxRxDMACplt+0x134>)
 8005742:	e001      	b.n	8005748 <I2SEx_TxRxDMACplt+0xfc>
 8005744:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005748:	f022 0202 	bic.w	r2, r2, #2
 800574c:	605a      	str	r2, [r3, #4]
      }

      hi2s->TxXferCount = 0U;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2200      	movs	r2, #0
 8005752:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2s->RxXferCount == 0U)
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005758:	b29b      	uxth	r3, r3
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10a      	bne.n	8005774 <I2SEx_TxRxDMACplt+0x128>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2201      	movs	r2, #1
 8005762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
        hi2s->TxRxCpltCallback(hi2s);
#else
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7fb fd60 	bl	800122c <HAL_I2SEx_TxRxCpltCallback>
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800576c:	e002      	b.n	8005774 <I2SEx_TxRxDMACplt+0x128>
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800576e:	68f8      	ldr	r0, [r7, #12]
 8005770:	f7fb fd5c 	bl	800122c <HAL_I2SEx_TxRxCpltCallback>
}
 8005774:	bf00      	nop
 8005776:	3710      	adds	r7, #16
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40003800 	.word	0x40003800
 8005780:	40003400 	.word	0x40003400

08005784 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005790:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f022 0203 	bic.w	r2, r2, #3
 80057a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a15      	ldr	r2, [pc, #84]	; (80057fc <I2SEx_TxRxDMAError+0x78>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d101      	bne.n	80057b0 <I2SEx_TxRxDMAError+0x2c>
 80057ac:	4b14      	ldr	r3, [pc, #80]	; (8005800 <I2SEx_TxRxDMAError+0x7c>)
 80057ae:	e001      	b.n	80057b4 <I2SEx_TxRxDMAError+0x30>
 80057b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057b4:	685a      	ldr	r2, [r3, #4]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4910      	ldr	r1, [pc, #64]	; (80057fc <I2SEx_TxRxDMAError+0x78>)
 80057bc:	428b      	cmp	r3, r1
 80057be:	d101      	bne.n	80057c4 <I2SEx_TxRxDMAError+0x40>
 80057c0:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <I2SEx_TxRxDMAError+0x7c>)
 80057c2:	e001      	b.n	80057c8 <I2SEx_TxRxDMAError+0x44>
 80057c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80057c8:	f022 0203 	bic.w	r2, r2, #3
 80057cc:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2200      	movs	r2, #0
 80057d8:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e6:	f043 0208 	orr.w	r2, r3, #8
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff fb4e 	bl	8004e90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	40003800 	.word	0x40003800
 8005800:	40003400 	.word	0x40003400

08005804 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b082      	sub	sp, #8
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005810:	1c99      	adds	r1, r3, #2
 8005812:	687a      	ldr	r2, [r7, #4]
 8005814:	6251      	str	r1, [r2, #36]	; 0x24
 8005816:	881a      	ldrh	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005822:	b29b      	uxth	r3, r3
 8005824:	3b01      	subs	r3, #1
 8005826:	b29a      	uxth	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005830:	b29b      	uxth	r3, r3
 8005832:	2b00      	cmp	r3, #0
 8005834:	d113      	bne.n	800585e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685a      	ldr	r2, [r3, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005844:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d106      	bne.n	800585e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7fb fce7 	bl	800122c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800585e:	bf00      	nop
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
	...

08005868 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b082      	sub	sp, #8
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005874:	1c99      	adds	r1, r3, #2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6251      	str	r1, [r2, #36]	; 0x24
 800587a:	8819      	ldrh	r1, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a1d      	ldr	r2, [pc, #116]	; (80058f8 <I2SEx_TxISR_I2SExt+0x90>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d101      	bne.n	800588a <I2SEx_TxISR_I2SExt+0x22>
 8005886:	4b1d      	ldr	r3, [pc, #116]	; (80058fc <I2SEx_TxISR_I2SExt+0x94>)
 8005888:	e001      	b.n	800588e <I2SEx_TxISR_I2SExt+0x26>
 800588a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800588e:	460a      	mov	r2, r1
 8005890:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005896:	b29b      	uxth	r3, r3
 8005898:	3b01      	subs	r3, #1
 800589a:	b29a      	uxth	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d121      	bne.n	80058ee <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a12      	ldr	r2, [pc, #72]	; (80058f8 <I2SEx_TxISR_I2SExt+0x90>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d101      	bne.n	80058b8 <I2SEx_TxISR_I2SExt+0x50>
 80058b4:	4b11      	ldr	r3, [pc, #68]	; (80058fc <I2SEx_TxISR_I2SExt+0x94>)
 80058b6:	e001      	b.n	80058bc <I2SEx_TxISR_I2SExt+0x54>
 80058b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	490d      	ldr	r1, [pc, #52]	; (80058f8 <I2SEx_TxISR_I2SExt+0x90>)
 80058c4:	428b      	cmp	r3, r1
 80058c6:	d101      	bne.n	80058cc <I2SEx_TxISR_I2SExt+0x64>
 80058c8:	4b0c      	ldr	r3, [pc, #48]	; (80058fc <I2SEx_TxISR_I2SExt+0x94>)
 80058ca:	e001      	b.n	80058d0 <I2SEx_TxISR_I2SExt+0x68>
 80058cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80058d4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80058da:	b29b      	uxth	r3, r3
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d106      	bne.n	80058ee <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7fb fc9f 	bl	800122c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	40003800 	.word	0x40003800
 80058fc:	40003400 	.word	0x40003400

08005900 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	68d8      	ldr	r0, [r3, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005912:	1c99      	adds	r1, r3, #2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005918:	b282      	uxth	r2, r0
 800591a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005920:	b29b      	uxth	r3, r3
 8005922:	3b01      	subs	r3, #1
 8005924:	b29a      	uxth	r2, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d113      	bne.n	800595c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005942:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d106      	bne.n	800595c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7fb fc68 	bl	800122c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}

08005964 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b082      	sub	sp, #8
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a20      	ldr	r2, [pc, #128]	; (80059f4 <I2SEx_RxISR_I2SExt+0x90>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d101      	bne.n	800597a <I2SEx_RxISR_I2SExt+0x16>
 8005976:	4b20      	ldr	r3, [pc, #128]	; (80059f8 <I2SEx_RxISR_I2SExt+0x94>)
 8005978:	e001      	b.n	800597e <I2SEx_RxISR_I2SExt+0x1a>
 800597a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800597e:	68d8      	ldr	r0, [r3, #12]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005984:	1c99      	adds	r1, r3, #2
 8005986:	687a      	ldr	r2, [r7, #4]
 8005988:	62d1      	str	r1, [r2, #44]	; 0x2c
 800598a:	b282      	uxth	r2, r0
 800598c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005992:	b29b      	uxth	r3, r3
 8005994:	3b01      	subs	r3, #1
 8005996:	b29a      	uxth	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d121      	bne.n	80059ea <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a12      	ldr	r2, [pc, #72]	; (80059f4 <I2SEx_RxISR_I2SExt+0x90>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d101      	bne.n	80059b4 <I2SEx_RxISR_I2SExt+0x50>
 80059b0:	4b11      	ldr	r3, [pc, #68]	; (80059f8 <I2SEx_RxISR_I2SExt+0x94>)
 80059b2:	e001      	b.n	80059b8 <I2SEx_RxISR_I2SExt+0x54>
 80059b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059b8:	685a      	ldr	r2, [r3, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	490d      	ldr	r1, [pc, #52]	; (80059f4 <I2SEx_RxISR_I2SExt+0x90>)
 80059c0:	428b      	cmp	r3, r1
 80059c2:	d101      	bne.n	80059c8 <I2SEx_RxISR_I2SExt+0x64>
 80059c4:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <I2SEx_RxISR_I2SExt+0x94>)
 80059c6:	e001      	b.n	80059cc <I2SEx_RxISR_I2SExt+0x68>
 80059c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80059cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80059d0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d106      	bne.n	80059ea <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f7fb fc21 	bl	800122c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80059ea:	bf00      	nop
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	40003800 	.word	0x40003800
 80059f8:	40003400 	.word	0x40003400

080059fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b086      	sub	sp, #24
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d101      	bne.n	8005a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	e25b      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0301 	and.w	r3, r3, #1
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d075      	beq.n	8005b06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a1a:	4ba3      	ldr	r3, [pc, #652]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 030c 	and.w	r3, r3, #12
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d00c      	beq.n	8005a40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a26:	4ba0      	ldr	r3, [pc, #640]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005a28:	689b      	ldr	r3, [r3, #8]
 8005a2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a2e:	2b08      	cmp	r3, #8
 8005a30:	d112      	bne.n	8005a58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a32:	4b9d      	ldr	r3, [pc, #628]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a3e:	d10b      	bne.n	8005a58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a40:	4b99      	ldr	r3, [pc, #612]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d05b      	beq.n	8005b04 <HAL_RCC_OscConfig+0x108>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d157      	bne.n	8005b04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e236      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a60:	d106      	bne.n	8005a70 <HAL_RCC_OscConfig+0x74>
 8005a62:	4b91      	ldr	r3, [pc, #580]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a90      	ldr	r2, [pc, #576]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005a68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a6c:	6013      	str	r3, [r2, #0]
 8005a6e:	e01d      	b.n	8005aac <HAL_RCC_OscConfig+0xb0>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a78:	d10c      	bne.n	8005a94 <HAL_RCC_OscConfig+0x98>
 8005a7a:	4b8b      	ldr	r3, [pc, #556]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a8a      	ldr	r2, [pc, #552]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005a80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a84:	6013      	str	r3, [r2, #0]
 8005a86:	4b88      	ldr	r3, [pc, #544]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a87      	ldr	r2, [pc, #540]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a90:	6013      	str	r3, [r2, #0]
 8005a92:	e00b      	b.n	8005aac <HAL_RCC_OscConfig+0xb0>
 8005a94:	4b84      	ldr	r3, [pc, #528]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a83      	ldr	r2, [pc, #524]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	4b81      	ldr	r3, [pc, #516]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a80      	ldr	r2, [pc, #512]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005aa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005aaa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d013      	beq.n	8005adc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ab4:	f7fd fddc 	bl	8003670 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005abc:	f7fd fdd8 	bl	8003670 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b64      	cmp	r3, #100	; 0x64
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e1fb      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ace:	4b76      	ldr	r3, [pc, #472]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0xc0>
 8005ada:	e014      	b.n	8005b06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005adc:	f7fd fdc8 	bl	8003670 <HAL_GetTick>
 8005ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005ae2:	e008      	b.n	8005af6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ae4:	f7fd fdc4 	bl	8003670 <HAL_GetTick>
 8005ae8:	4602      	mov	r2, r0
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	2b64      	cmp	r3, #100	; 0x64
 8005af0:	d901      	bls.n	8005af6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005af2:	2303      	movs	r3, #3
 8005af4:	e1e7      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005af6:	4b6c      	ldr	r3, [pc, #432]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f0      	bne.n	8005ae4 <HAL_RCC_OscConfig+0xe8>
 8005b02:	e000      	b.n	8005b06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0302 	and.w	r3, r3, #2
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d063      	beq.n	8005bda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b12:	4b65      	ldr	r3, [pc, #404]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f003 030c 	and.w	r3, r3, #12
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00b      	beq.n	8005b36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b1e:	4b62      	ldr	r3, [pc, #392]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d11c      	bne.n	8005b64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b2a:	4b5f      	ldr	r3, [pc, #380]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d116      	bne.n	8005b64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b36:	4b5c      	ldr	r3, [pc, #368]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d005      	beq.n	8005b4e <HAL_RCC_OscConfig+0x152>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	68db      	ldr	r3, [r3, #12]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d001      	beq.n	8005b4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e1bb      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b4e:	4b56      	ldr	r3, [pc, #344]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4952      	ldr	r1, [pc, #328]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b62:	e03a      	b.n	8005bda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d020      	beq.n	8005bae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b6c:	4b4f      	ldr	r3, [pc, #316]	; (8005cac <HAL_RCC_OscConfig+0x2b0>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b72:	f7fd fd7d 	bl	8003670 <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b78:	e008      	b.n	8005b8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b7a:	f7fd fd79 	bl	8003670 <HAL_GetTick>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	1ad3      	subs	r3, r2, r3
 8005b84:	2b02      	cmp	r3, #2
 8005b86:	d901      	bls.n	8005b8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e19c      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b8c:	4b46      	ldr	r3, [pc, #280]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d0f0      	beq.n	8005b7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b98:	4b43      	ldr	r3, [pc, #268]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4940      	ldr	r1, [pc, #256]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	600b      	str	r3, [r1, #0]
 8005bac:	e015      	b.n	8005bda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bae:	4b3f      	ldr	r3, [pc, #252]	; (8005cac <HAL_RCC_OscConfig+0x2b0>)
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bb4:	f7fd fd5c 	bl	8003670 <HAL_GetTick>
 8005bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bba:	e008      	b.n	8005bce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bbc:	f7fd fd58 	bl	8003670 <HAL_GetTick>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	1ad3      	subs	r3, r2, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d901      	bls.n	8005bce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bca:	2303      	movs	r3, #3
 8005bcc:	e17b      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bce:	4b36      	ldr	r3, [pc, #216]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0302 	and.w	r3, r3, #2
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1f0      	bne.n	8005bbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d030      	beq.n	8005c48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d016      	beq.n	8005c1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005bee:	4b30      	ldr	r3, [pc, #192]	; (8005cb0 <HAL_RCC_OscConfig+0x2b4>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bf4:	f7fd fd3c 	bl	8003670 <HAL_GetTick>
 8005bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005bfa:	e008      	b.n	8005c0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bfc:	f7fd fd38 	bl	8003670 <HAL_GetTick>
 8005c00:	4602      	mov	r2, r0
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	2b02      	cmp	r3, #2
 8005c08:	d901      	bls.n	8005c0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e15b      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c0e:	4b26      	ldr	r3, [pc, #152]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0f0      	beq.n	8005bfc <HAL_RCC_OscConfig+0x200>
 8005c1a:	e015      	b.n	8005c48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c1c:	4b24      	ldr	r3, [pc, #144]	; (8005cb0 <HAL_RCC_OscConfig+0x2b4>)
 8005c1e:	2200      	movs	r2, #0
 8005c20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c22:	f7fd fd25 	bl	8003670 <HAL_GetTick>
 8005c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c28:	e008      	b.n	8005c3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c2a:	f7fd fd21 	bl	8003670 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b02      	cmp	r3, #2
 8005c36:	d901      	bls.n	8005c3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c38:	2303      	movs	r3, #3
 8005c3a:	e144      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c3c:	4b1a      	ldr	r3, [pc, #104]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005c3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c40:	f003 0302 	and.w	r3, r3, #2
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1f0      	bne.n	8005c2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0304 	and.w	r3, r3, #4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 80a0 	beq.w	8005d96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c56:	2300      	movs	r3, #0
 8005c58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c5a:	4b13      	ldr	r3, [pc, #76]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10f      	bne.n	8005c86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c66:	2300      	movs	r3, #0
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	4b0f      	ldr	r3, [pc, #60]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	4a0e      	ldr	r2, [pc, #56]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c74:	6413      	str	r3, [r2, #64]	; 0x40
 8005c76:	4b0c      	ldr	r3, [pc, #48]	; (8005ca8 <HAL_RCC_OscConfig+0x2ac>)
 8005c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c7e:	60bb      	str	r3, [r7, #8]
 8005c80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005c82:	2301      	movs	r3, #1
 8005c84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005c86:	4b0b      	ldr	r3, [pc, #44]	; (8005cb4 <HAL_RCC_OscConfig+0x2b8>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d121      	bne.n	8005cd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005c92:	4b08      	ldr	r3, [pc, #32]	; (8005cb4 <HAL_RCC_OscConfig+0x2b8>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a07      	ldr	r2, [pc, #28]	; (8005cb4 <HAL_RCC_OscConfig+0x2b8>)
 8005c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005c9e:	f7fd fce7 	bl	8003670 <HAL_GetTick>
 8005ca2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ca4:	e011      	b.n	8005cca <HAL_RCC_OscConfig+0x2ce>
 8005ca6:	bf00      	nop
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	42470000 	.word	0x42470000
 8005cb0:	42470e80 	.word	0x42470e80
 8005cb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb8:	f7fd fcda 	bl	8003670 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e0fd      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cca:	4b81      	ldr	r3, [pc, #516]	; (8005ed0 <HAL_RCC_OscConfig+0x4d4>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d0f0      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	689b      	ldr	r3, [r3, #8]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d106      	bne.n	8005cec <HAL_RCC_OscConfig+0x2f0>
 8005cde:	4b7d      	ldr	r3, [pc, #500]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce2:	4a7c      	ldr	r2, [pc, #496]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005ce4:	f043 0301 	orr.w	r3, r3, #1
 8005ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8005cea:	e01c      	b.n	8005d26 <HAL_RCC_OscConfig+0x32a>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	689b      	ldr	r3, [r3, #8]
 8005cf0:	2b05      	cmp	r3, #5
 8005cf2:	d10c      	bne.n	8005d0e <HAL_RCC_OscConfig+0x312>
 8005cf4:	4b77      	ldr	r3, [pc, #476]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cf8:	4a76      	ldr	r2, [pc, #472]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005cfa:	f043 0304 	orr.w	r3, r3, #4
 8005cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8005d00:	4b74      	ldr	r3, [pc, #464]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d04:	4a73      	ldr	r2, [pc, #460]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005d06:	f043 0301 	orr.w	r3, r3, #1
 8005d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d0c:	e00b      	b.n	8005d26 <HAL_RCC_OscConfig+0x32a>
 8005d0e:	4b71      	ldr	r3, [pc, #452]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	4a70      	ldr	r2, [pc, #448]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005d14:	f023 0301 	bic.w	r3, r3, #1
 8005d18:	6713      	str	r3, [r2, #112]	; 0x70
 8005d1a:	4b6e      	ldr	r3, [pc, #440]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1e:	4a6d      	ldr	r2, [pc, #436]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005d20:	f023 0304 	bic.w	r3, r3, #4
 8005d24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	689b      	ldr	r3, [r3, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d015      	beq.n	8005d5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d2e:	f7fd fc9f 	bl	8003670 <HAL_GetTick>
 8005d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d34:	e00a      	b.n	8005d4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d36:	f7fd fc9b 	bl	8003670 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d901      	bls.n	8005d4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005d48:	2303      	movs	r3, #3
 8005d4a:	e0bc      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d4c:	4b61      	ldr	r3, [pc, #388]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d0ee      	beq.n	8005d36 <HAL_RCC_OscConfig+0x33a>
 8005d58:	e014      	b.n	8005d84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d5a:	f7fd fc89 	bl	8003670 <HAL_GetTick>
 8005d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d60:	e00a      	b.n	8005d78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d62:	f7fd fc85 	bl	8003670 <HAL_GetTick>
 8005d66:	4602      	mov	r2, r0
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d901      	bls.n	8005d78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005d74:	2303      	movs	r3, #3
 8005d76:	e0a6      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d78:	4b56      	ldr	r3, [pc, #344]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7c:	f003 0302 	and.w	r3, r3, #2
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1ee      	bne.n	8005d62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005d84:	7dfb      	ldrb	r3, [r7, #23]
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d105      	bne.n	8005d96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d8a:	4b52      	ldr	r3, [pc, #328]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8e:	4a51      	ldr	r2, [pc, #324]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005d90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 8092 	beq.w	8005ec4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005da0:	4b4c      	ldr	r3, [pc, #304]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 030c 	and.w	r3, r3, #12
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d05c      	beq.n	8005e66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	699b      	ldr	r3, [r3, #24]
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d141      	bne.n	8005e38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005db4:	4b48      	ldr	r3, [pc, #288]	; (8005ed8 <HAL_RCC_OscConfig+0x4dc>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dba:	f7fd fc59 	bl	8003670 <HAL_GetTick>
 8005dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dc0:	e008      	b.n	8005dd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dc2:	f7fd fc55 	bl	8003670 <HAL_GetTick>
 8005dc6:	4602      	mov	r2, r0
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	1ad3      	subs	r3, r2, r3
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d901      	bls.n	8005dd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e078      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dd4:	4b3f      	ldr	r3, [pc, #252]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1f0      	bne.n	8005dc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	431a      	orrs	r2, r3
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	019b      	lsls	r3, r3, #6
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005df6:	085b      	lsrs	r3, r3, #1
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	041b      	lsls	r3, r3, #16
 8005dfc:	431a      	orrs	r2, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e02:	061b      	lsls	r3, r3, #24
 8005e04:	4933      	ldr	r1, [pc, #204]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e0a:	4b33      	ldr	r3, [pc, #204]	; (8005ed8 <HAL_RCC_OscConfig+0x4dc>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e10:	f7fd fc2e 	bl	8003670 <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e18:	f7fd fc2a 	bl	8003670 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e04d      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e2a:	4b2a      	ldr	r3, [pc, #168]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0f0      	beq.n	8005e18 <HAL_RCC_OscConfig+0x41c>
 8005e36:	e045      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e38:	4b27      	ldr	r3, [pc, #156]	; (8005ed8 <HAL_RCC_OscConfig+0x4dc>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e3e:	f7fd fc17 	bl	8003670 <HAL_GetTick>
 8005e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e44:	e008      	b.n	8005e58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e46:	f7fd fc13 	bl	8003670 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d901      	bls.n	8005e58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005e54:	2303      	movs	r3, #3
 8005e56:	e036      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e58:	4b1e      	ldr	r3, [pc, #120]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1f0      	bne.n	8005e46 <HAL_RCC_OscConfig+0x44a>
 8005e64:	e02e      	b.n	8005ec4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	699b      	ldr	r3, [r3, #24]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d101      	bne.n	8005e72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e029      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e72:	4b18      	ldr	r3, [pc, #96]	; (8005ed4 <HAL_RCC_OscConfig+0x4d8>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d11c      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d115      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005e94:	68fa      	ldr	r2, [r7, #12]
 8005e96:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d10d      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d106      	bne.n	8005ec0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d001      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3718      	adds	r7, #24
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}
 8005ece:	bf00      	nop
 8005ed0:	40007000 	.word	0x40007000
 8005ed4:	40023800 	.word	0x40023800
 8005ed8:	42470060 	.word	0x42470060

08005edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0cc      	b.n	800608a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ef0:	4b68      	ldr	r3, [pc, #416]	; (8006094 <HAL_RCC_ClockConfig+0x1b8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 030f 	and.w	r3, r3, #15
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d90c      	bls.n	8005f18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005efe:	4b65      	ldr	r3, [pc, #404]	; (8006094 <HAL_RCC_ClockConfig+0x1b8>)
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f06:	4b63      	ldr	r3, [pc, #396]	; (8006094 <HAL_RCC_ClockConfig+0x1b8>)
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d001      	beq.n	8005f18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e0b8      	b.n	800608a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d020      	beq.n	8005f66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f003 0304 	and.w	r3, r3, #4
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d005      	beq.n	8005f3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f30:	4b59      	ldr	r3, [pc, #356]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	4a58      	ldr	r2, [pc, #352]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f36:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0308 	and.w	r3, r3, #8
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d005      	beq.n	8005f54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f48:	4b53      	ldr	r3, [pc, #332]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	4a52      	ldr	r2, [pc, #328]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f4e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f54:	4b50      	ldr	r3, [pc, #320]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	494d      	ldr	r1, [pc, #308]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0301 	and.w	r3, r3, #1
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d044      	beq.n	8005ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d107      	bne.n	8005f8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f7a:	4b47      	ldr	r3, [pc, #284]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d119      	bne.n	8005fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	e07f      	b.n	800608a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d003      	beq.n	8005f9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005f96:	2b03      	cmp	r3, #3
 8005f98:	d107      	bne.n	8005faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f9a:	4b3f      	ldr	r3, [pc, #252]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	e06f      	b.n	800608a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005faa:	4b3b      	ldr	r3, [pc, #236]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e067      	b.n	800608a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fba:	4b37      	ldr	r3, [pc, #220]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	f023 0203 	bic.w	r2, r3, #3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	4934      	ldr	r1, [pc, #208]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005fcc:	f7fd fb50 	bl	8003670 <HAL_GetTick>
 8005fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fd2:	e00a      	b.n	8005fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fd4:	f7fd fb4c 	bl	8003670 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d901      	bls.n	8005fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005fe6:	2303      	movs	r3, #3
 8005fe8:	e04f      	b.n	800608a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fea:	4b2b      	ldr	r3, [pc, #172]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 020c 	and.w	r2, r3, #12
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d1eb      	bne.n	8005fd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ffc:	4b25      	ldr	r3, [pc, #148]	; (8006094 <HAL_RCC_ClockConfig+0x1b8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 030f 	and.w	r3, r3, #15
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	429a      	cmp	r2, r3
 8006008:	d20c      	bcs.n	8006024 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800600a:	4b22      	ldr	r3, [pc, #136]	; (8006094 <HAL_RCC_ClockConfig+0x1b8>)
 800600c:	683a      	ldr	r2, [r7, #0]
 800600e:	b2d2      	uxtb	r2, r2
 8006010:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006012:	4b20      	ldr	r3, [pc, #128]	; (8006094 <HAL_RCC_ClockConfig+0x1b8>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 030f 	and.w	r3, r3, #15
 800601a:	683a      	ldr	r2, [r7, #0]
 800601c:	429a      	cmp	r2, r3
 800601e:	d001      	beq.n	8006024 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e032      	b.n	800608a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0304 	and.w	r3, r3, #4
 800602c:	2b00      	cmp	r3, #0
 800602e:	d008      	beq.n	8006042 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006030:	4b19      	ldr	r3, [pc, #100]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	4916      	ldr	r1, [pc, #88]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 800603e:	4313      	orrs	r3, r2
 8006040:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0308 	and.w	r3, r3, #8
 800604a:	2b00      	cmp	r3, #0
 800604c:	d009      	beq.n	8006062 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800604e:	4b12      	ldr	r3, [pc, #72]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	490e      	ldr	r1, [pc, #56]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 800605e:	4313      	orrs	r3, r2
 8006060:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006062:	f000 f821 	bl	80060a8 <HAL_RCC_GetSysClockFreq>
 8006066:	4601      	mov	r1, r0
 8006068:	4b0b      	ldr	r3, [pc, #44]	; (8006098 <HAL_RCC_ClockConfig+0x1bc>)
 800606a:	689b      	ldr	r3, [r3, #8]
 800606c:	091b      	lsrs	r3, r3, #4
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	4a0a      	ldr	r2, [pc, #40]	; (800609c <HAL_RCC_ClockConfig+0x1c0>)
 8006074:	5cd3      	ldrb	r3, [r2, r3]
 8006076:	fa21 f303 	lsr.w	r3, r1, r3
 800607a:	4a09      	ldr	r2, [pc, #36]	; (80060a0 <HAL_RCC_ClockConfig+0x1c4>)
 800607c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800607e:	4b09      	ldr	r3, [pc, #36]	; (80060a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f7fd f854 	bl	8003130 <HAL_InitTick>

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	40023c00 	.word	0x40023c00
 8006098:	40023800 	.word	0x40023800
 800609c:	0800b9cc 	.word	0x0800b9cc
 80060a0:	200020f8 	.word	0x200020f8
 80060a4:	200020fc 	.word	0x200020fc

080060a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060ae:	2300      	movs	r3, #0
 80060b0:	607b      	str	r3, [r7, #4]
 80060b2:	2300      	movs	r3, #0
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	2300      	movs	r3, #0
 80060b8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80060ba:	2300      	movs	r3, #0
 80060bc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060be:	4b50      	ldr	r3, [pc, #320]	; (8006200 <HAL_RCC_GetSysClockFreq+0x158>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 030c 	and.w	r3, r3, #12
 80060c6:	2b04      	cmp	r3, #4
 80060c8:	d007      	beq.n	80060da <HAL_RCC_GetSysClockFreq+0x32>
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d008      	beq.n	80060e0 <HAL_RCC_GetSysClockFreq+0x38>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	f040 808d 	bne.w	80061ee <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80060d4:	4b4b      	ldr	r3, [pc, #300]	; (8006204 <HAL_RCC_GetSysClockFreq+0x15c>)
 80060d6:	60bb      	str	r3, [r7, #8]
       break;
 80060d8:	e08c      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80060da:	4b4b      	ldr	r3, [pc, #300]	; (8006208 <HAL_RCC_GetSysClockFreq+0x160>)
 80060dc:	60bb      	str	r3, [r7, #8]
      break;
 80060de:	e089      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80060e0:	4b47      	ldr	r3, [pc, #284]	; (8006200 <HAL_RCC_GetSysClockFreq+0x158>)
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80060ea:	4b45      	ldr	r3, [pc, #276]	; (8006200 <HAL_RCC_GetSysClockFreq+0x158>)
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d023      	beq.n	800613e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80060f6:	4b42      	ldr	r3, [pc, #264]	; (8006200 <HAL_RCC_GetSysClockFreq+0x158>)
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	099b      	lsrs	r3, r3, #6
 80060fc:	f04f 0400 	mov.w	r4, #0
 8006100:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	ea03 0501 	and.w	r5, r3, r1
 800610c:	ea04 0602 	and.w	r6, r4, r2
 8006110:	4a3d      	ldr	r2, [pc, #244]	; (8006208 <HAL_RCC_GetSysClockFreq+0x160>)
 8006112:	fb02 f106 	mul.w	r1, r2, r6
 8006116:	2200      	movs	r2, #0
 8006118:	fb02 f205 	mul.w	r2, r2, r5
 800611c:	440a      	add	r2, r1
 800611e:	493a      	ldr	r1, [pc, #232]	; (8006208 <HAL_RCC_GetSysClockFreq+0x160>)
 8006120:	fba5 0101 	umull	r0, r1, r5, r1
 8006124:	1853      	adds	r3, r2, r1
 8006126:	4619      	mov	r1, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f04f 0400 	mov.w	r4, #0
 800612e:	461a      	mov	r2, r3
 8006130:	4623      	mov	r3, r4
 8006132:	f7fa fcd3 	bl	8000adc <__aeabi_uldivmod>
 8006136:	4603      	mov	r3, r0
 8006138:	460c      	mov	r4, r1
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	e049      	b.n	80061d2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800613e:	4b30      	ldr	r3, [pc, #192]	; (8006200 <HAL_RCC_GetSysClockFreq+0x158>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	099b      	lsrs	r3, r3, #6
 8006144:	f04f 0400 	mov.w	r4, #0
 8006148:	f240 11ff 	movw	r1, #511	; 0x1ff
 800614c:	f04f 0200 	mov.w	r2, #0
 8006150:	ea03 0501 	and.w	r5, r3, r1
 8006154:	ea04 0602 	and.w	r6, r4, r2
 8006158:	4629      	mov	r1, r5
 800615a:	4632      	mov	r2, r6
 800615c:	f04f 0300 	mov.w	r3, #0
 8006160:	f04f 0400 	mov.w	r4, #0
 8006164:	0154      	lsls	r4, r2, #5
 8006166:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800616a:	014b      	lsls	r3, r1, #5
 800616c:	4619      	mov	r1, r3
 800616e:	4622      	mov	r2, r4
 8006170:	1b49      	subs	r1, r1, r5
 8006172:	eb62 0206 	sbc.w	r2, r2, r6
 8006176:	f04f 0300 	mov.w	r3, #0
 800617a:	f04f 0400 	mov.w	r4, #0
 800617e:	0194      	lsls	r4, r2, #6
 8006180:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006184:	018b      	lsls	r3, r1, #6
 8006186:	1a5b      	subs	r3, r3, r1
 8006188:	eb64 0402 	sbc.w	r4, r4, r2
 800618c:	f04f 0100 	mov.w	r1, #0
 8006190:	f04f 0200 	mov.w	r2, #0
 8006194:	00e2      	lsls	r2, r4, #3
 8006196:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800619a:	00d9      	lsls	r1, r3, #3
 800619c:	460b      	mov	r3, r1
 800619e:	4614      	mov	r4, r2
 80061a0:	195b      	adds	r3, r3, r5
 80061a2:	eb44 0406 	adc.w	r4, r4, r6
 80061a6:	f04f 0100 	mov.w	r1, #0
 80061aa:	f04f 0200 	mov.w	r2, #0
 80061ae:	02a2      	lsls	r2, r4, #10
 80061b0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80061b4:	0299      	lsls	r1, r3, #10
 80061b6:	460b      	mov	r3, r1
 80061b8:	4614      	mov	r4, r2
 80061ba:	4618      	mov	r0, r3
 80061bc:	4621      	mov	r1, r4
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f04f 0400 	mov.w	r4, #0
 80061c4:	461a      	mov	r2, r3
 80061c6:	4623      	mov	r3, r4
 80061c8:	f7fa fc88 	bl	8000adc <__aeabi_uldivmod>
 80061cc:	4603      	mov	r3, r0
 80061ce:	460c      	mov	r4, r1
 80061d0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80061d2:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <HAL_RCC_GetSysClockFreq+0x158>)
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	0c1b      	lsrs	r3, r3, #16
 80061d8:	f003 0303 	and.w	r3, r3, #3
 80061dc:	3301      	adds	r3, #1
 80061de:	005b      	lsls	r3, r3, #1
 80061e0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80061ea:	60bb      	str	r3, [r7, #8]
      break;
 80061ec:	e002      	b.n	80061f4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061ee:	4b05      	ldr	r3, [pc, #20]	; (8006204 <HAL_RCC_GetSysClockFreq+0x15c>)
 80061f0:	60bb      	str	r3, [r7, #8]
      break;
 80061f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061f4:	68bb      	ldr	r3, [r7, #8]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061fe:	bf00      	nop
 8006200:	40023800 	.word	0x40023800
 8006204:	00f42400 	.word	0x00f42400
 8006208:	017d7840 	.word	0x017d7840

0800620c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800620c:	b480      	push	{r7}
 800620e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006210:	4b03      	ldr	r3, [pc, #12]	; (8006220 <HAL_RCC_GetHCLKFreq+0x14>)
 8006212:	681b      	ldr	r3, [r3, #0]
}
 8006214:	4618      	mov	r0, r3
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop
 8006220:	200020f8 	.word	0x200020f8

08006224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006224:	b580      	push	{r7, lr}
 8006226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006228:	f7ff fff0 	bl	800620c <HAL_RCC_GetHCLKFreq>
 800622c:	4601      	mov	r1, r0
 800622e:	4b05      	ldr	r3, [pc, #20]	; (8006244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	0a9b      	lsrs	r3, r3, #10
 8006234:	f003 0307 	and.w	r3, r3, #7
 8006238:	4a03      	ldr	r2, [pc, #12]	; (8006248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800623a:	5cd3      	ldrb	r3, [r2, r3]
 800623c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006240:	4618      	mov	r0, r3
 8006242:	bd80      	pop	{r7, pc}
 8006244:	40023800 	.word	0x40023800
 8006248:	0800b9dc 	.word	0x0800b9dc

0800624c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006250:	f7ff ffdc 	bl	800620c <HAL_RCC_GetHCLKFreq>
 8006254:	4601      	mov	r1, r0
 8006256:	4b05      	ldr	r3, [pc, #20]	; (800626c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	0b5b      	lsrs	r3, r3, #13
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	4a03      	ldr	r2, [pc, #12]	; (8006270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006262:	5cd3      	ldrb	r3, [r2, r3]
 8006264:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006268:	4618      	mov	r0, r3
 800626a:	bd80      	pop	{r7, pc}
 800626c:	40023800 	.word	0x40023800
 8006270:	0800b9dc 	.word	0x0800b9dc

08006274 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	220f      	movs	r2, #15
 8006282:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006284:	4b12      	ldr	r3, [pc, #72]	; (80062d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 0203 	and.w	r2, r3, #3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006290:	4b0f      	ldr	r3, [pc, #60]	; (80062d0 <HAL_RCC_GetClockConfig+0x5c>)
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800629c:	4b0c      	ldr	r3, [pc, #48]	; (80062d0 <HAL_RCC_GetClockConfig+0x5c>)
 800629e:	689b      	ldr	r3, [r3, #8]
 80062a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80062a8:	4b09      	ldr	r3, [pc, #36]	; (80062d0 <HAL_RCC_GetClockConfig+0x5c>)
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	08db      	lsrs	r3, r3, #3
 80062ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80062b6:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <HAL_RCC_GetClockConfig+0x60>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 020f 	and.w	r2, r3, #15
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	601a      	str	r2, [r3, #0]
}
 80062c2:	bf00      	nop
 80062c4:	370c      	adds	r7, #12
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40023800 	.word	0x40023800
 80062d4:	40023c00 	.word	0x40023c00

080062d8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062e0:	2300      	movs	r3, #0
 80062e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80062e4:	2300      	movs	r3, #0
 80062e6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d105      	bne.n	8006300 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d038      	beq.n	8006372 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006300:	4b68      	ldr	r3, [pc, #416]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006302:	2200      	movs	r2, #0
 8006304:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006306:	f7fd f9b3 	bl	8003670 <HAL_GetTick>
 800630a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800630c:	e008      	b.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800630e:	f7fd f9af 	bl	8003670 <HAL_GetTick>
 8006312:	4602      	mov	r2, r0
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	1ad3      	subs	r3, r2, r3
 8006318:	2b02      	cmp	r3, #2
 800631a:	d901      	bls.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e0bd      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006320:	4b61      	ldr	r3, [pc, #388]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1f0      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	685a      	ldr	r2, [r3, #4]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	019b      	lsls	r3, r3, #6
 8006336:	431a      	orrs	r2, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	68db      	ldr	r3, [r3, #12]
 800633c:	071b      	lsls	r3, r3, #28
 800633e:	495a      	ldr	r1, [pc, #360]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006340:	4313      	orrs	r3, r2
 8006342:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006346:	4b57      	ldr	r3, [pc, #348]	; (80064a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006348:	2201      	movs	r2, #1
 800634a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800634c:	f7fd f990 	bl	8003670 <HAL_GetTick>
 8006350:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006352:	e008      	b.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006354:	f7fd f98c 	bl	8003670 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	2b02      	cmp	r3, #2
 8006360:	d901      	bls.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006362:	2303      	movs	r3, #3
 8006364:	e09a      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006366:	4b50      	ldr	r3, [pc, #320]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d0f0      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b00      	cmp	r3, #0
 800637c:	f000 8083 	beq.w	8006486 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]
 8006384:	4b48      	ldr	r3, [pc, #288]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006388:	4a47      	ldr	r2, [pc, #284]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800638a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800638e:	6413      	str	r3, [r2, #64]	; 0x40
 8006390:	4b45      	ldr	r3, [pc, #276]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006398:	60fb      	str	r3, [r7, #12]
 800639a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800639c:	4b43      	ldr	r3, [pc, #268]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a42      	ldr	r2, [pc, #264]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80063a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063a6:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063a8:	f7fd f962 	bl	8003670 <HAL_GetTick>
 80063ac:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063ae:	e008      	b.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80063b0:	f7fd f95e 	bl	8003670 <HAL_GetTick>
 80063b4:	4602      	mov	r2, r0
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	1ad3      	subs	r3, r2, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d901      	bls.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e06c      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063c2:	4b3a      	ldr	r3, [pc, #232]	; (80064ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d0f0      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063ce:	4b36      	ldr	r3, [pc, #216]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063d6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d02f      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d028      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80063ec:	4b2e      	ldr	r3, [pc, #184]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80063ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063f4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80063f6:	4b2e      	ldr	r3, [pc, #184]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80063f8:	2201      	movs	r2, #1
 80063fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80063fc:	4b2c      	ldr	r3, [pc, #176]	; (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006402:	4a29      	ldr	r2, [pc, #164]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006408:	4b27      	ldr	r3, [pc, #156]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800640a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800640c:	f003 0301 	and.w	r3, r3, #1
 8006410:	2b01      	cmp	r3, #1
 8006412:	d114      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006414:	f7fd f92c 	bl	8003670 <HAL_GetTick>
 8006418:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800641a:	e00a      	b.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800641c:	f7fd f928 	bl	8003670 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	f241 3288 	movw	r2, #5000	; 0x1388
 800642a:	4293      	cmp	r3, r2
 800642c:	d901      	bls.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800642e:	2303      	movs	r3, #3
 8006430:	e034      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006432:	4b1d      	ldr	r3, [pc, #116]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d0ee      	beq.n	800641c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800644a:	d10d      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800644c:	4b16      	ldr	r3, [pc, #88]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691b      	ldr	r3, [r3, #16]
 8006458:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800645c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006460:	4911      	ldr	r1, [pc, #68]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006462:	4313      	orrs	r3, r2
 8006464:	608b      	str	r3, [r1, #8]
 8006466:	e005      	b.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006468:	4b0f      	ldr	r3, [pc, #60]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	4a0e      	ldr	r2, [pc, #56]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800646e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006472:	6093      	str	r3, [r2, #8]
 8006474:	4b0c      	ldr	r3, [pc, #48]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006476:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006480:	4909      	ldr	r1, [pc, #36]	; (80064a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006482:	4313      	orrs	r3, r2
 8006484:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 0308 	and.w	r3, r3, #8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d003      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	7d1a      	ldrb	r2, [r3, #20]
 8006496:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006498:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	42470068 	.word	0x42470068
 80064a8:	40023800 	.word	0x40023800
 80064ac:	40007000 	.word	0x40007000
 80064b0:	42470e40 	.word	0x42470e40
 80064b4:	424711e0 	.word	0x424711e0

080064b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b087      	sub	sp, #28
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80064c8:	2300      	movs	r3, #0
 80064ca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80064cc:	2300      	movs	r3, #0
 80064ce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d13f      	bne.n	8006556 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80064d6:	4b23      	ldr	r3, [pc, #140]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064de:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d004      	beq.n	80064f0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d131      	bne.n	800654e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80064ea:	4b1f      	ldr	r3, [pc, #124]	; (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80064ec:	617b      	str	r3, [r7, #20]
          break;
 80064ee:	e031      	b.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80064f0:	4b1c      	ldr	r3, [pc, #112]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064fc:	d109      	bne.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80064fe:	4b19      	ldr	r3, [pc, #100]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006500:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006504:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006508:	4a18      	ldr	r2, [pc, #96]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800650a:	fbb2 f3f3 	udiv	r3, r2, r3
 800650e:	613b      	str	r3, [r7, #16]
 8006510:	e008      	b.n	8006524 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006512:	4b14      	ldr	r3, [pc, #80]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800651c:	4a14      	ldr	r2, [pc, #80]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800651e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006522:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006524:	4b0f      	ldr	r3, [pc, #60]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800652a:	099b      	lsrs	r3, r3, #6
 800652c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	fb02 f303 	mul.w	r3, r2, r3
 8006536:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006538:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800653a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800653e:	0f1b      	lsrs	r3, r3, #28
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	68ba      	ldr	r2, [r7, #8]
 8006546:	fbb2 f3f3 	udiv	r3, r2, r3
 800654a:	617b      	str	r3, [r7, #20]
          break;
 800654c:	e002      	b.n	8006554 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800654e:	2300      	movs	r3, #0
 8006550:	617b      	str	r3, [r7, #20]
          break;
 8006552:	bf00      	nop
        }
      }
      break;
 8006554:	bf00      	nop
    }
  }
  return frequency;
 8006556:	697b      	ldr	r3, [r7, #20]
}
 8006558:	4618      	mov	r0, r3
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	40023800 	.word	0x40023800
 8006568:	00bb8000 	.word	0x00bb8000
 800656c:	017d7840 	.word	0x017d7840
 8006570:	00f42400 	.word	0x00f42400

08006574 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b082      	sub	sp, #8
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d101      	bne.n	8006586 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	e083      	b.n	800668e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	7f5b      	ldrb	r3, [r3, #29]
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d105      	bne.n	800659c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f7fc fcee 	bl	8002f78 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2202      	movs	r2, #2
 80065a0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	22ca      	movs	r2, #202	; 0xca
 80065a8:	625a      	str	r2, [r3, #36]	; 0x24
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2253      	movs	r2, #83	; 0x53
 80065b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f897 	bl	80066e6 <RTC_EnterInitMode>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d008      	beq.n	80065d0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	22ff      	movs	r2, #255	; 0xff
 80065c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2204      	movs	r2, #4
 80065ca:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80065cc:	2301      	movs	r3, #1
 80065ce:	e05e      	b.n	800668e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	6812      	ldr	r2, [r2, #0]
 80065da:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80065de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065e2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6899      	ldr	r1, [r3, #8]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685a      	ldr	r2, [r3, #4]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	431a      	orrs	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	431a      	orrs	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	430a      	orrs	r2, r1
 8006600:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	68d2      	ldr	r2, [r2, #12]
 800660a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	6919      	ldr	r1, [r3, #16]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	041a      	lsls	r2, r3, #16
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	430a      	orrs	r2, r1
 800661e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68da      	ldr	r2, [r3, #12]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800662e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0320 	and.w	r3, r3, #32
 800663a:	2b00      	cmp	r3, #0
 800663c:	d10e      	bne.n	800665c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 f829 	bl	8006696 <HAL_RTC_WaitForSynchro>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d008      	beq.n	800665c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	22ff      	movs	r2, #255	; 0xff
 8006650:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2204      	movs	r2, #4
 8006656:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	e018      	b.n	800668e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800666a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699a      	ldr	r2, [r3, #24]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	430a      	orrs	r2, r1
 800667c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	22ff      	movs	r2, #255	; 0xff
 8006684:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2201      	movs	r2, #1
 800668a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800668c:	2300      	movs	r3, #0
  }
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}

08006696 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006696:	b580      	push	{r7, lr}
 8006698:	b084      	sub	sp, #16
 800669a:	af00      	add	r7, sp, #0
 800669c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800669e:	2300      	movs	r3, #0
 80066a0:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066b0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80066b2:	f7fc ffdd 	bl	8003670 <HAL_GetTick>
 80066b6:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80066b8:	e009      	b.n	80066ce <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80066ba:	f7fc ffd9 	bl	8003670 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80066c8:	d901      	bls.n	80066ce <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80066ca:	2303      	movs	r3, #3
 80066cc:	e007      	b.n	80066de <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0ee      	beq.n	80066ba <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3710      	adds	r7, #16
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}

080066e6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80066e6:	b580      	push	{r7, lr}
 80066e8:	b084      	sub	sp, #16
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80066ee:	2300      	movs	r3, #0
 80066f0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d119      	bne.n	8006734 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006708:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800670a:	f7fc ffb1 	bl	8003670 <HAL_GetTick>
 800670e:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006710:	e009      	b.n	8006726 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006712:	f7fc ffad 	bl	8003670 <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006720:	d901      	bls.n	8006726 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e007      	b.n	8006736 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006730:	2b00      	cmp	r3, #0
 8006732:	d0ee      	beq.n	8006712 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b082      	sub	sp, #8
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d101      	bne.n	8006750 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800674c:	2301      	movs	r3, #1
 800674e:	e056      	b.n	80067fe <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2200      	movs	r2, #0
 8006754:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d106      	bne.n	8006770 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7fc fc1a 	bl	8002fa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2202      	movs	r2, #2
 8006774:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006786:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	431a      	orrs	r2, r3
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	431a      	orrs	r2, r3
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	431a      	orrs	r2, r3
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	431a      	orrs	r2, r3
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	699b      	ldr	r3, [r3, #24]
 80067a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067ac:	431a      	orrs	r2, r3
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	69db      	ldr	r3, [r3, #28]
 80067b2:	431a      	orrs	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	ea42 0103 	orr.w	r1, r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	430a      	orrs	r2, r1
 80067c6:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	0c1b      	lsrs	r3, r3, #16
 80067ce:	f003 0104 	and.w	r1, r3, #4
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	430a      	orrs	r2, r1
 80067dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69da      	ldr	r2, [r3, #28]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80067ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3708      	adds	r7, #8
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}

08006806 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006806:	b580      	push	{r7, lr}
 8006808:	b08c      	sub	sp, #48	; 0x30
 800680a:	af00      	add	r7, sp, #0
 800680c:	60f8      	str	r0, [r7, #12]
 800680e:	60b9      	str	r1, [r7, #8]
 8006810:	607a      	str	r2, [r7, #4]
 8006812:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006814:	2301      	movs	r3, #1
 8006816:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006818:	2300      	movs	r3, #0
 800681a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006824:	2b01      	cmp	r3, #1
 8006826:	d101      	bne.n	800682c <HAL_SPI_TransmitReceive+0x26>
 8006828:	2302      	movs	r3, #2
 800682a:	e18a      	b.n	8006b42 <HAL_SPI_TransmitReceive+0x33c>
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006834:	f7fc ff1c 	bl	8003670 <HAL_GetTick>
 8006838:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006840:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800684a:	887b      	ldrh	r3, [r7, #2]
 800684c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800684e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006852:	2b01      	cmp	r3, #1
 8006854:	d00f      	beq.n	8006876 <HAL_SPI_TransmitReceive+0x70>
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800685c:	d107      	bne.n	800686e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d103      	bne.n	800686e <HAL_SPI_TransmitReceive+0x68>
 8006866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800686a:	2b04      	cmp	r3, #4
 800686c:	d003      	beq.n	8006876 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800686e:	2302      	movs	r3, #2
 8006870:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006874:	e15b      	b.n	8006b2e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <HAL_SPI_TransmitReceive+0x82>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <HAL_SPI_TransmitReceive+0x82>
 8006882:	887b      	ldrh	r3, [r7, #2]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d103      	bne.n	8006890 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800688e:	e14e      	b.n	8006b2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006896:	b2db      	uxtb	r3, r3
 8006898:	2b04      	cmp	r3, #4
 800689a:	d003      	beq.n	80068a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2205      	movs	r2, #5
 80068a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2200      	movs	r2, #0
 80068a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	687a      	ldr	r2, [r7, #4]
 80068ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	887a      	ldrh	r2, [r7, #2]
 80068b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	887a      	ldrh	r2, [r7, #2]
 80068ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	887a      	ldrh	r2, [r7, #2]
 80068c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	887a      	ldrh	r2, [r7, #2]
 80068cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2200      	movs	r2, #0
 80068d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2200      	movs	r2, #0
 80068d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068e4:	2b40      	cmp	r3, #64	; 0x40
 80068e6:	d007      	beq.n	80068f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006900:	d178      	bne.n	80069f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d002      	beq.n	8006910 <HAL_SPI_TransmitReceive+0x10a>
 800690a:	8b7b      	ldrh	r3, [r7, #26]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d166      	bne.n	80069de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	881a      	ldrh	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006920:	1c9a      	adds	r2, r3, #2
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006934:	e053      	b.n	80069de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	f003 0302 	and.w	r3, r3, #2
 8006940:	2b02      	cmp	r3, #2
 8006942:	d11b      	bne.n	800697c <HAL_SPI_TransmitReceive+0x176>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006948:	b29b      	uxth	r3, r3
 800694a:	2b00      	cmp	r3, #0
 800694c:	d016      	beq.n	800697c <HAL_SPI_TransmitReceive+0x176>
 800694e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006950:	2b01      	cmp	r3, #1
 8006952:	d113      	bne.n	800697c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006958:	881a      	ldrh	r2, [r3, #0]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006964:	1c9a      	adds	r2, r3, #2
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800696e:	b29b      	uxth	r3, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	b29a      	uxth	r2, r3
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006978:	2300      	movs	r3, #0
 800697a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689b      	ldr	r3, [r3, #8]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b01      	cmp	r3, #1
 8006988:	d119      	bne.n	80069be <HAL_SPI_TransmitReceive+0x1b8>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800698e:	b29b      	uxth	r3, r3
 8006990:	2b00      	cmp	r3, #0
 8006992:	d014      	beq.n	80069be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68da      	ldr	r2, [r3, #12]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800699e:	b292      	uxth	r2, r2
 80069a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a6:	1c9a      	adds	r2, r3, #2
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	3b01      	subs	r3, #1
 80069b4:	b29a      	uxth	r2, r3
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069ba:	2301      	movs	r3, #1
 80069bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80069be:	f7fc fe57 	bl	8003670 <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d807      	bhi.n	80069de <HAL_SPI_TransmitReceive+0x1d8>
 80069ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069d4:	d003      	beq.n	80069de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80069dc:	e0a7      	b.n	8006b2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1a6      	bne.n	8006936 <HAL_SPI_TransmitReceive+0x130>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1a1      	bne.n	8006936 <HAL_SPI_TransmitReceive+0x130>
 80069f2:	e07c      	b.n	8006aee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d002      	beq.n	8006a02 <HAL_SPI_TransmitReceive+0x1fc>
 80069fc:	8b7b      	ldrh	r3, [r7, #26]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d16b      	bne.n	8006ada <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	330c      	adds	r3, #12
 8006a0c:	7812      	ldrb	r2, [r2, #0]
 8006a0e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a14:	1c5a      	adds	r2, r3, #1
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	3b01      	subs	r3, #1
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a28:	e057      	b.n	8006ada <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d11c      	bne.n	8006a72 <HAL_SPI_TransmitReceive+0x26c>
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d017      	beq.n	8006a72 <HAL_SPI_TransmitReceive+0x26c>
 8006a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d114      	bne.n	8006a72 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	330c      	adds	r3, #12
 8006a52:	7812      	ldrb	r2, [r2, #0]
 8006a54:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d119      	bne.n	8006ab4 <HAL_SPI_TransmitReceive+0x2ae>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d014      	beq.n	8006ab4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	68da      	ldr	r2, [r3, #12]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ab4:	f7fc fddc 	bl	8003670 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d803      	bhi.n	8006acc <HAL_SPI_TransmitReceive+0x2c6>
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aca:	d102      	bne.n	8006ad2 <HAL_SPI_TransmitReceive+0x2cc>
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d103      	bne.n	8006ada <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006ad2:	2303      	movs	r3, #3
 8006ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006ad8:	e029      	b.n	8006b2e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d1a2      	bne.n	8006a2a <HAL_SPI_TransmitReceive+0x224>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d19d      	bne.n	8006a2a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006af0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 f894 	bl	8006c20 <SPI_EndRxTxTransaction>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d006      	beq.n	8006b0c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2220      	movs	r2, #32
 8006b08:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8006b0a:	e010      	b.n	8006b2e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10b      	bne.n	8006b2c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	68db      	ldr	r3, [r3, #12]
 8006b1e:	617b      	str	r3, [r7, #20]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	617b      	str	r3, [r7, #20]
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	e000      	b.n	8006b2e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8006b2c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006b3e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3730      	adds	r7, #48	; 0x30
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}

08006b4a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	60f8      	str	r0, [r7, #12]
 8006b52:	60b9      	str	r1, [r7, #8]
 8006b54:	603b      	str	r3, [r7, #0]
 8006b56:	4613      	mov	r3, r2
 8006b58:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006b5a:	e04c      	b.n	8006bf6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b62:	d048      	beq.n	8006bf6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006b64:	f7fc fd84 	bl	8003670 <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	69bb      	ldr	r3, [r7, #24]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d902      	bls.n	8006b7a <SPI_WaitFlagStateUntilTimeout+0x30>
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d13d      	bne.n	8006bf6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	685a      	ldr	r2, [r3, #4]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b88:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b92:	d111      	bne.n	8006bb8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b9c:	d004      	beq.n	8006ba8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ba6:	d107      	bne.n	8006bb8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681a      	ldr	r2, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bc0:	d10f      	bne.n	8006be2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006bd0:	601a      	str	r2, [r3, #0]
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006be0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	e00f      	b.n	8006c16 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	4013      	ands	r3, r2
 8006c00:	68ba      	ldr	r2, [r7, #8]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	bf0c      	ite	eq
 8006c06:	2301      	moveq	r3, #1
 8006c08:	2300      	movne	r3, #0
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	79fb      	ldrb	r3, [r7, #7]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	d1a3      	bne.n	8006b5c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006c2c:	4b1b      	ldr	r3, [pc, #108]	; (8006c9c <SPI_EndRxTxTransaction+0x7c>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <SPI_EndRxTxTransaction+0x80>)
 8006c32:	fba2 2303 	umull	r2, r3, r2, r3
 8006c36:	0d5b      	lsrs	r3, r3, #21
 8006c38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006c3c:	fb02 f303 	mul.w	r3, r2, r3
 8006c40:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c4a:	d112      	bne.n	8006c72 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	9300      	str	r3, [sp, #0]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2200      	movs	r2, #0
 8006c54:	2180      	movs	r1, #128	; 0x80
 8006c56:	68f8      	ldr	r0, [r7, #12]
 8006c58:	f7ff ff77 	bl	8006b4a <SPI_WaitFlagStateUntilTimeout>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d016      	beq.n	8006c90 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c66:	f043 0220 	orr.w	r2, r3, #32
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e00f      	b.n	8006c92 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00a      	beq.n	8006c8e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	3b01      	subs	r3, #1
 8006c7c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c88:	2b80      	cmp	r3, #128	; 0x80
 8006c8a:	d0f2      	beq.n	8006c72 <SPI_EndRxTxTransaction+0x52>
 8006c8c:	e000      	b.n	8006c90 <SPI_EndRxTxTransaction+0x70>
        break;
 8006c8e:	bf00      	nop
  }

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3718      	adds	r7, #24
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
 8006c9a:	bf00      	nop
 8006c9c:	200020f8 	.word	0x200020f8
 8006ca0:	165e9f81 	.word	0x165e9f81

08006ca4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b082      	sub	sp, #8
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d101      	bne.n	8006cb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e01d      	b.n	8006cf2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d106      	bne.n	8006cd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f815 	bl	8006cfa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2202      	movs	r2, #2
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3304      	adds	r3, #4
 8006ce0:	4619      	mov	r1, r3
 8006ce2:	4610      	mov	r0, r2
 8006ce4:	f000 f9fa 	bl	80070dc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3708      	adds	r7, #8
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006cfa:	b480      	push	{r7}
 8006cfc:	b083      	sub	sp, #12
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006d02:	bf00      	nop
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d0e:	b480      	push	{r7}
 8006d10:	b085      	sub	sp, #20
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f042 0201 	orr.w	r2, r2, #1
 8006d24:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f003 0307 	and.w	r3, r3, #7
 8006d30:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2b06      	cmp	r3, #6
 8006d36:	d007      	beq.n	8006d48 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681a      	ldr	r2, [r3, #0]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f042 0201 	orr.w	r2, r2, #1
 8006d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006d48:	2300      	movs	r3, #0
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3714      	adds	r7, #20
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d54:	4770      	bx	lr

08006d56 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b086      	sub	sp, #24
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d101      	bne.n	8006d6a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006d66:	2301      	movs	r3, #1
 8006d68:	e083      	b.n	8006e72 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d106      	bne.n	8006d84 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7fc f98e 	bl	80030a0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2202      	movs	r2, #2
 8006d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6812      	ldr	r2, [r2, #0]
 8006d96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d9a:	f023 0307 	bic.w	r3, r3, #7
 8006d9e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	3304      	adds	r3, #4
 8006da8:	4619      	mov	r1, r3
 8006daa:	4610      	mov	r0, r2
 8006dac:	f000 f996 	bl	80070dc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6a1b      	ldr	r3, [r3, #32]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	697a      	ldr	r2, [r7, #20]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dd8:	f023 0303 	bic.w	r3, r3, #3
 8006ddc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	689a      	ldr	r2, [r3, #8]
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	021b      	lsls	r3, r3, #8
 8006de8:	4313      	orrs	r3, r2
 8006dea:	693a      	ldr	r2, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006df6:	f023 030c 	bic.w	r3, r3, #12
 8006dfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	69db      	ldr	r3, [r3, #28]
 8006e10:	021b      	lsls	r3, r3, #8
 8006e12:	4313      	orrs	r3, r2
 8006e14:	693a      	ldr	r2, [r7, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	011a      	lsls	r2, r3, #4
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	031b      	lsls	r3, r3, #12
 8006e26:	4313      	orrs	r3, r2
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006e34:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e3c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	011b      	lsls	r3, r3, #4
 8006e48:	4313      	orrs	r3, r2
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	693a      	ldr	r2, [r7, #16]
 8006e5e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e70:	2300      	movs	r3, #0
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3718      	adds	r7, #24
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}

08006e7a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e7a:	b580      	push	{r7, lr}
 8006e7c:	b082      	sub	sp, #8
 8006e7e:	af00      	add	r7, sp, #0
 8006e80:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f003 0302 	and.w	r3, r3, #2
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d122      	bne.n	8006ed6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d11b      	bne.n	8006ed6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f06f 0202 	mvn.w	r2, #2
 8006ea6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	f003 0303 	and.w	r3, r3, #3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d003      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ebc:	6878      	ldr	r0, [r7, #4]
 8006ebe:	f000 f8ee 	bl	800709e <HAL_TIM_IC_CaptureCallback>
 8006ec2:	e005      	b.n	8006ed0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 f8e0 	bl	800708a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f8f1 	bl	80070b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b04      	cmp	r3, #4
 8006ee2:	d122      	bne.n	8006f2a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68db      	ldr	r3, [r3, #12]
 8006eea:	f003 0304 	and.w	r3, r3, #4
 8006eee:	2b04      	cmp	r3, #4
 8006ef0:	d11b      	bne.n	8006f2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f06f 0204 	mvn.w	r2, #4
 8006efa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d003      	beq.n	8006f18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 f8c4 	bl	800709e <HAL_TIM_IC_CaptureCallback>
 8006f16:	e005      	b.n	8006f24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f8b6 	bl	800708a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f000 f8c7 	bl	80070b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	f003 0308 	and.w	r3, r3, #8
 8006f34:	2b08      	cmp	r3, #8
 8006f36:	d122      	bne.n	8006f7e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f003 0308 	and.w	r3, r3, #8
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d11b      	bne.n	8006f7e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f06f 0208 	mvn.w	r2, #8
 8006f4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2204      	movs	r2, #4
 8006f54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69db      	ldr	r3, [r3, #28]
 8006f5c:	f003 0303 	and.w	r3, r3, #3
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 f89a 	bl	800709e <HAL_TIM_IC_CaptureCallback>
 8006f6a:	e005      	b.n	8006f78 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 f88c 	bl	800708a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f89d 	bl	80070b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	691b      	ldr	r3, [r3, #16]
 8006f84:	f003 0310 	and.w	r3, r3, #16
 8006f88:	2b10      	cmp	r3, #16
 8006f8a:	d122      	bne.n	8006fd2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f003 0310 	and.w	r3, r3, #16
 8006f96:	2b10      	cmp	r3, #16
 8006f98:	d11b      	bne.n	8006fd2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f06f 0210 	mvn.w	r2, #16
 8006fa2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2208      	movs	r2, #8
 8006fa8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	69db      	ldr	r3, [r3, #28]
 8006fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f000 f870 	bl	800709e <HAL_TIM_IC_CaptureCallback>
 8006fbe:	e005      	b.n	8006fcc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f000 f862 	bl	800708a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f873 	bl	80070b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	691b      	ldr	r3, [r3, #16]
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d10e      	bne.n	8006ffe <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d107      	bne.n	8006ffe <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f06f 0201 	mvn.w	r2, #1
 8006ff6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f7fb fe4b 	bl	8002c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007008:	2b80      	cmp	r3, #128	; 0x80
 800700a:	d10e      	bne.n	800702a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007016:	2b80      	cmp	r3, #128	; 0x80
 8007018:	d107      	bne.n	800702a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007022:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f000 f951 	bl	80072cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007034:	2b40      	cmp	r3, #64	; 0x40
 8007036:	d10e      	bne.n	8007056 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007042:	2b40      	cmp	r3, #64	; 0x40
 8007044:	d107      	bne.n	8007056 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800704e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f838 	bl	80070c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	f003 0320 	and.w	r3, r3, #32
 8007060:	2b20      	cmp	r3, #32
 8007062:	d10e      	bne.n	8007082 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f003 0320 	and.w	r3, r3, #32
 800706e:	2b20      	cmp	r3, #32
 8007070:	d107      	bne.n	8007082 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f06f 0220 	mvn.w	r2, #32
 800707a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f91b 	bl	80072b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007082:	bf00      	nop
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800708a:	b480      	push	{r7}
 800708c:	b083      	sub	sp, #12
 800708e:	af00      	add	r7, sp, #0
 8007090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007092:	bf00      	nop
 8007094:	370c      	adds	r7, #12
 8007096:	46bd      	mov	sp, r7
 8007098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709c:	4770      	bx	lr

0800709e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800709e:	b480      	push	{r7}
 80070a0:	b083      	sub	sp, #12
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr

080070b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070b2:	b480      	push	{r7}
 80070b4:	b083      	sub	sp, #12
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr

080070c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070c6:	b480      	push	{r7}
 80070c8:	b083      	sub	sp, #12
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070ce:	bf00      	nop
 80070d0:	370c      	adds	r7, #12
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr
	...

080070dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a34      	ldr	r2, [pc, #208]	; (80071c0 <TIM_Base_SetConfig+0xe4>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d00f      	beq.n	8007114 <TIM_Base_SetConfig+0x38>
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070fa:	d00b      	beq.n	8007114 <TIM_Base_SetConfig+0x38>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a31      	ldr	r2, [pc, #196]	; (80071c4 <TIM_Base_SetConfig+0xe8>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d007      	beq.n	8007114 <TIM_Base_SetConfig+0x38>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a30      	ldr	r2, [pc, #192]	; (80071c8 <TIM_Base_SetConfig+0xec>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d003      	beq.n	8007114 <TIM_Base_SetConfig+0x38>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a2f      	ldr	r2, [pc, #188]	; (80071cc <TIM_Base_SetConfig+0xf0>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d108      	bne.n	8007126 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800711a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	68fa      	ldr	r2, [r7, #12]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a25      	ldr	r2, [pc, #148]	; (80071c0 <TIM_Base_SetConfig+0xe4>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d01b      	beq.n	8007166 <TIM_Base_SetConfig+0x8a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007134:	d017      	beq.n	8007166 <TIM_Base_SetConfig+0x8a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a22      	ldr	r2, [pc, #136]	; (80071c4 <TIM_Base_SetConfig+0xe8>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d013      	beq.n	8007166 <TIM_Base_SetConfig+0x8a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a21      	ldr	r2, [pc, #132]	; (80071c8 <TIM_Base_SetConfig+0xec>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00f      	beq.n	8007166 <TIM_Base_SetConfig+0x8a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a20      	ldr	r2, [pc, #128]	; (80071cc <TIM_Base_SetConfig+0xf0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00b      	beq.n	8007166 <TIM_Base_SetConfig+0x8a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a1f      	ldr	r2, [pc, #124]	; (80071d0 <TIM_Base_SetConfig+0xf4>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d007      	beq.n	8007166 <TIM_Base_SetConfig+0x8a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a1e      	ldr	r2, [pc, #120]	; (80071d4 <TIM_Base_SetConfig+0xf8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d003      	beq.n	8007166 <TIM_Base_SetConfig+0x8a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a1d      	ldr	r2, [pc, #116]	; (80071d8 <TIM_Base_SetConfig+0xfc>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d108      	bne.n	8007178 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800716c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a08      	ldr	r2, [pc, #32]	; (80071c0 <TIM_Base_SetConfig+0xe4>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d103      	bne.n	80071ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	691a      	ldr	r2, [r3, #16]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	615a      	str	r2, [r3, #20]
}
 80071b2:	bf00      	nop
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop
 80071c0:	40010000 	.word	0x40010000
 80071c4:	40000400 	.word	0x40000400
 80071c8:	40000800 	.word	0x40000800
 80071cc:	40000c00 	.word	0x40000c00
 80071d0:	40014000 	.word	0x40014000
 80071d4:	40014400 	.word	0x40014400
 80071d8:	40014800 	.word	0x40014800

080071dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e050      	b.n	8007296 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	68fa      	ldr	r2, [r7, #12]
 8007222:	4313      	orrs	r3, r2
 8007224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a1c      	ldr	r2, [pc, #112]	; (80072a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d018      	beq.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007240:	d013      	beq.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	4a18      	ldr	r2, [pc, #96]	; (80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007248:	4293      	cmp	r3, r2
 800724a:	d00e      	beq.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a16      	ldr	r2, [pc, #88]	; (80072ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d009      	beq.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a15      	ldr	r2, [pc, #84]	; (80072b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d004      	beq.n	800726a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a13      	ldr	r2, [pc, #76]	; (80072b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d10c      	bne.n	8007284 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	68ba      	ldr	r2, [r7, #8]
 8007278:	4313      	orrs	r3, r2
 800727a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68ba      	ldr	r2, [r7, #8]
 8007282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2201      	movs	r2, #1
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40010000 	.word	0x40010000
 80072a8:	40000400 	.word	0x40000400
 80072ac:	40000800 	.word	0x40000800
 80072b0:	40000c00 	.word	0x40000c00
 80072b4:	40014000 	.word	0x40014000

080072b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	4603      	mov	r3, r0
 80072e8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80072ea:	2300      	movs	r3, #0
 80072ec:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80072ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80072f2:	2b84      	cmp	r3, #132	; 0x84
 80072f4:	d005      	beq.n	8007302 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80072f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4413      	add	r3, r2
 80072fe:	3303      	adds	r3, #3
 8007300:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007302:	68fb      	ldr	r3, [r7, #12]
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007314:	f000 fada 	bl	80078cc <vTaskStartScheduler>
  
  return osOK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	bd80      	pop	{r7, pc}

0800731e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800731e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007320:	b089      	sub	sp, #36	; 0x24
 8007322:	af04      	add	r7, sp, #16
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	695b      	ldr	r3, [r3, #20]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d020      	beq.n	8007372 <osThreadCreate+0x54>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d01c      	beq.n	8007372 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	685c      	ldr	r4, [r3, #4]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681d      	ldr	r5, [r3, #0]
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	691e      	ldr	r6, [r3, #16]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800734a:	4618      	mov	r0, r3
 800734c:	f7ff ffc8 	bl	80072e0 <makeFreeRtosPriority>
 8007350:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800735a:	9202      	str	r2, [sp, #8]
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	9100      	str	r1, [sp, #0]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	4632      	mov	r2, r6
 8007364:	4629      	mov	r1, r5
 8007366:	4620      	mov	r0, r4
 8007368:	f000 f8ed 	bl	8007546 <xTaskCreateStatic>
 800736c:	4603      	mov	r3, r0
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e01c      	b.n	80073ac <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685c      	ldr	r4, [r3, #4]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800737e:	b29e      	uxth	r6, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007386:	4618      	mov	r0, r3
 8007388:	f7ff ffaa 	bl	80072e0 <makeFreeRtosPriority>
 800738c:	4602      	mov	r2, r0
 800738e:	f107 030c 	add.w	r3, r7, #12
 8007392:	9301      	str	r3, [sp, #4]
 8007394:	9200      	str	r2, [sp, #0]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	4632      	mov	r2, r6
 800739a:	4629      	mov	r1, r5
 800739c:	4620      	mov	r0, r4
 800739e:	f000 f92c 	bl	80075fa <xTaskCreate>
 80073a2:	4603      	mov	r3, r0
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d001      	beq.n	80073ac <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80073a8:	2300      	movs	r3, #0
 80073aa:	e000      	b.n	80073ae <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80073ac:	68fb      	ldr	r3, [r7, #12]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080073b6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d001      	beq.n	80073cc <osDelay+0x16>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	e000      	b.n	80073ce <osDelay+0x18>
 80073cc:	2301      	movs	r3, #1
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 fa48 	bl	8007864 <vTaskDelay>
  
  return osOK;
 80073d4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3710      	adds	r7, #16
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073de:	b480      	push	{r7}
 80073e0:	b083      	sub	sp, #12
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f103 0208 	add.w	r2, r3, #8
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073f6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f103 0208 	add.w	r2, r3, #8
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f103 0208 	add.w	r2, r3, #8
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007412:	bf00      	nop
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr

0800741e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800741e:	b480      	push	{r7}
 8007420:	b083      	sub	sp, #12
 8007422:	af00      	add	r7, sp, #0
 8007424:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2200      	movs	r2, #0
 800742a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800742c:	bf00      	nop
 800742e:	370c      	adds	r7, #12
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007438:	b480      	push	{r7}
 800743a:	b085      	sub	sp, #20
 800743c:	af00      	add	r7, sp, #0
 800743e:	6078      	str	r0, [r7, #4]
 8007440:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	689a      	ldr	r2, [r3, #8]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	683a      	ldr	r2, [r7, #0]
 8007462:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	1c5a      	adds	r2, r3, #1
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	601a      	str	r2, [r3, #0]
}
 8007474:	bf00      	nop
 8007476:	3714      	adds	r7, #20
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
 8007488:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007496:	d103      	bne.n	80074a0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	60fb      	str	r3, [r7, #12]
 800749e:	e00c      	b.n	80074ba <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	3308      	adds	r3, #8
 80074a4:	60fb      	str	r3, [r7, #12]
 80074a6:	e002      	b.n	80074ae <vListInsert+0x2e>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d2f6      	bcs.n	80074a8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	685a      	ldr	r2, [r3, #4]
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68fa      	ldr	r2, [r7, #12]
 80074ce:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	1c5a      	adds	r2, r3, #1
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	601a      	str	r2, [r3, #0]
}
 80074e6:	bf00      	nop
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f0:	4770      	bx	lr

080074f2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074f2:	b480      	push	{r7}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	6892      	ldr	r2, [r2, #8]
 8007508:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	6852      	ldr	r2, [r2, #4]
 8007512:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	429a      	cmp	r2, r3
 800751c:	d103      	bne.n	8007526 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	689a      	ldr	r2, [r3, #8]
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	1e5a      	subs	r2, r3, #1
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
}
 800753a:	4618      	mov	r0, r3
 800753c:	3714      	adds	r7, #20
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007546:	b580      	push	{r7, lr}
 8007548:	b08e      	sub	sp, #56	; 0x38
 800754a:	af04      	add	r7, sp, #16
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	607a      	str	r2, [r7, #4]
 8007552:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007556:	2b00      	cmp	r3, #0
 8007558:	d109      	bne.n	800756e <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	623b      	str	r3, [r7, #32]
 800756c:	e7fe      	b.n	800756c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800756e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007570:	2b00      	cmp	r3, #0
 8007572:	d109      	bne.n	8007588 <xTaskCreateStatic+0x42>
 8007574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	61fb      	str	r3, [r7, #28]
 8007586:	e7fe      	b.n	8007586 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007588:	2354      	movs	r3, #84	; 0x54
 800758a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	2b54      	cmp	r3, #84	; 0x54
 8007590:	d009      	beq.n	80075a6 <xTaskCreateStatic+0x60>
 8007592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007596:	f383 8811 	msr	BASEPRI, r3
 800759a:	f3bf 8f6f 	isb	sy
 800759e:	f3bf 8f4f 	dsb	sy
 80075a2:	61bb      	str	r3, [r7, #24]
 80075a4:	e7fe      	b.n	80075a4 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80075a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80075a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d01e      	beq.n	80075ec <xTaskCreateStatic+0xa6>
 80075ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d01b      	beq.n	80075ec <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80075b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80075b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80075be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c0:	2202      	movs	r2, #2
 80075c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80075c6:	2300      	movs	r3, #0
 80075c8:	9303      	str	r3, [sp, #12]
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	9302      	str	r3, [sp, #8]
 80075ce:	f107 0314 	add.w	r3, r7, #20
 80075d2:	9301      	str	r3, [sp, #4]
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	68b9      	ldr	r1, [r7, #8]
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 f850 	bl	8007684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075e6:	f000 f8d3 	bl	8007790 <prvAddNewTaskToReadyList>
 80075ea:	e001      	b.n	80075f0 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80075ec:	2300      	movs	r3, #0
 80075ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80075f0:	697b      	ldr	r3, [r7, #20]
	}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3728      	adds	r7, #40	; 0x28
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80075fa:	b580      	push	{r7, lr}
 80075fc:	b08c      	sub	sp, #48	; 0x30
 80075fe:	af04      	add	r7, sp, #16
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	603b      	str	r3, [r7, #0]
 8007606:	4613      	mov	r3, r2
 8007608:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800760a:	88fb      	ldrh	r3, [r7, #6]
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4618      	mov	r0, r3
 8007610:	f000 ffd6 	bl	80085c0 <pvPortMalloc>
 8007614:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d00e      	beq.n	800763a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800761c:	2054      	movs	r0, #84	; 0x54
 800761e:	f000 ffcf 	bl	80085c0 <pvPortMalloc>
 8007622:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007624:	69fb      	ldr	r3, [r7, #28]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d003      	beq.n	8007632 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	631a      	str	r2, [r3, #48]	; 0x30
 8007630:	e005      	b.n	800763e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007632:	6978      	ldr	r0, [r7, #20]
 8007634:	f001 f886 	bl	8008744 <vPortFree>
 8007638:	e001      	b.n	800763e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800763a:	2300      	movs	r3, #0
 800763c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d017      	beq.n	8007674 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	2200      	movs	r2, #0
 8007648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800764c:	88fa      	ldrh	r2, [r7, #6]
 800764e:	2300      	movs	r3, #0
 8007650:	9303      	str	r3, [sp, #12]
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	9302      	str	r3, [sp, #8]
 8007656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68b9      	ldr	r1, [r7, #8]
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 f80e 	bl	8007684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007668:	69f8      	ldr	r0, [r7, #28]
 800766a:	f000 f891 	bl	8007790 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800766e:	2301      	movs	r3, #1
 8007670:	61bb      	str	r3, [r7, #24]
 8007672:	e002      	b.n	800767a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007678:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800767a:	69bb      	ldr	r3, [r7, #24]
	}
 800767c:	4618      	mov	r0, r3
 800767e:	3720      	adds	r7, #32
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b088      	sub	sp, #32
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	607a      	str	r2, [r7, #4]
 8007690:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007694:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800769c:	3b01      	subs	r3, #1
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	f023 0307 	bic.w	r3, r3, #7
 80076aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	f003 0307 	and.w	r3, r3, #7
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d009      	beq.n	80076ca <prvInitialiseNewTask+0x46>
 80076b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ba:	f383 8811 	msr	BASEPRI, r3
 80076be:	f3bf 8f6f 	isb	sy
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	e7fe      	b.n	80076c8 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d01f      	beq.n	8007710 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076d0:	2300      	movs	r3, #0
 80076d2:	61fb      	str	r3, [r7, #28]
 80076d4:	e012      	b.n	80076fc <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80076d6:	68ba      	ldr	r2, [r7, #8]
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	4413      	add	r3, r2
 80076dc:	7819      	ldrb	r1, [r3, #0]
 80076de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	4413      	add	r3, r2
 80076e4:	3334      	adds	r3, #52	; 0x34
 80076e6:	460a      	mov	r2, r1
 80076e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	4413      	add	r3, r2
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d006      	beq.n	8007704 <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80076f6:	69fb      	ldr	r3, [r7, #28]
 80076f8:	3301      	adds	r3, #1
 80076fa:	61fb      	str	r3, [r7, #28]
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	2b0f      	cmp	r3, #15
 8007700:	d9e9      	bls.n	80076d6 <prvInitialiseNewTask+0x52>
 8007702:	e000      	b.n	8007706 <prvInitialiseNewTask+0x82>
			{
				break;
 8007704:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800770e:	e003      	b.n	8007718 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	2b06      	cmp	r3, #6
 800771c:	d901      	bls.n	8007722 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800771e:	2306      	movs	r3, #6
 8007720:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007726:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800772c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007730:	2200      	movs	r2, #0
 8007732:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	3304      	adds	r3, #4
 8007738:	4618      	mov	r0, r3
 800773a:	f7ff fe70 	bl	800741e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007740:	3318      	adds	r3, #24
 8007742:	4618      	mov	r0, r3
 8007744:	f7ff fe6b 	bl	800741e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800774c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007750:	f1c3 0207 	rsb	r2, r3, #7
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800775c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007760:	2200      	movs	r2, #0
 8007762:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800776c:	683a      	ldr	r2, [r7, #0]
 800776e:	68f9      	ldr	r1, [r7, #12]
 8007770:	69b8      	ldr	r0, [r7, #24]
 8007772:	f000 fce3 	bl	800813c <pxPortInitialiseStack>
 8007776:	4602      	mov	r2, r0
 8007778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800777c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007786:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007788:	bf00      	nop
 800778a:	3720      	adds	r7, #32
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007798:	f000 fdf8 	bl	800838c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800779c:	4b2a      	ldr	r3, [pc, #168]	; (8007848 <prvAddNewTaskToReadyList+0xb8>)
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	3301      	adds	r3, #1
 80077a2:	4a29      	ldr	r2, [pc, #164]	; (8007848 <prvAddNewTaskToReadyList+0xb8>)
 80077a4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80077a6:	4b29      	ldr	r3, [pc, #164]	; (800784c <prvAddNewTaskToReadyList+0xbc>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d109      	bne.n	80077c2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80077ae:	4a27      	ldr	r2, [pc, #156]	; (800784c <prvAddNewTaskToReadyList+0xbc>)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80077b4:	4b24      	ldr	r3, [pc, #144]	; (8007848 <prvAddNewTaskToReadyList+0xb8>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d110      	bne.n	80077de <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80077bc:	f000 fab8 	bl	8007d30 <prvInitialiseTaskLists>
 80077c0:	e00d      	b.n	80077de <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80077c2:	4b23      	ldr	r3, [pc, #140]	; (8007850 <prvAddNewTaskToReadyList+0xc0>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d109      	bne.n	80077de <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80077ca:	4b20      	ldr	r3, [pc, #128]	; (800784c <prvAddNewTaskToReadyList+0xbc>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d802      	bhi.n	80077de <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80077d8:	4a1c      	ldr	r2, [pc, #112]	; (800784c <prvAddNewTaskToReadyList+0xbc>)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80077de:	4b1d      	ldr	r3, [pc, #116]	; (8007854 <prvAddNewTaskToReadyList+0xc4>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	3301      	adds	r3, #1
 80077e4:	4a1b      	ldr	r2, [pc, #108]	; (8007854 <prvAddNewTaskToReadyList+0xc4>)
 80077e6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077ec:	2201      	movs	r2, #1
 80077ee:	409a      	lsls	r2, r3
 80077f0:	4b19      	ldr	r3, [pc, #100]	; (8007858 <prvAddNewTaskToReadyList+0xc8>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4313      	orrs	r3, r2
 80077f6:	4a18      	ldr	r2, [pc, #96]	; (8007858 <prvAddNewTaskToReadyList+0xc8>)
 80077f8:	6013      	str	r3, [r2, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077fe:	4613      	mov	r3, r2
 8007800:	009b      	lsls	r3, r3, #2
 8007802:	4413      	add	r3, r2
 8007804:	009b      	lsls	r3, r3, #2
 8007806:	4a15      	ldr	r2, [pc, #84]	; (800785c <prvAddNewTaskToReadyList+0xcc>)
 8007808:	441a      	add	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	3304      	adds	r3, #4
 800780e:	4619      	mov	r1, r3
 8007810:	4610      	mov	r0, r2
 8007812:	f7ff fe11 	bl	8007438 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007816:	f000 fde7 	bl	80083e8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800781a:	4b0d      	ldr	r3, [pc, #52]	; (8007850 <prvAddNewTaskToReadyList+0xc0>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00e      	beq.n	8007840 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007822:	4b0a      	ldr	r3, [pc, #40]	; (800784c <prvAddNewTaskToReadyList+0xbc>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	429a      	cmp	r2, r3
 800782e:	d207      	bcs.n	8007840 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007830:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <prvAddNewTaskToReadyList+0xd0>)
 8007832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20003904 	.word	0x20003904
 800784c:	20003804 	.word	0x20003804
 8007850:	20003910 	.word	0x20003910
 8007854:	20003920 	.word	0x20003920
 8007858:	2000390c 	.word	0x2000390c
 800785c:	20003808 	.word	0x20003808
 8007860:	e000ed04 	.word	0xe000ed04

08007864 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007864:	b580      	push	{r7, lr}
 8007866:	b084      	sub	sp, #16
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800786c:	2300      	movs	r3, #0
 800786e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d016      	beq.n	80078a4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007876:	4b13      	ldr	r3, [pc, #76]	; (80078c4 <vTaskDelay+0x60>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d009      	beq.n	8007892 <vTaskDelay+0x2e>
 800787e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	60bb      	str	r3, [r7, #8]
 8007890:	e7fe      	b.n	8007890 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8007892:	f000 f879 	bl	8007988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007896:	2100      	movs	r1, #0
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 fbe9 	bl	8008070 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800789e:	f000 f881 	bl	80079a4 <xTaskResumeAll>
 80078a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d107      	bne.n	80078ba <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80078aa:	4b07      	ldr	r3, [pc, #28]	; (80078c8 <vTaskDelay+0x64>)
 80078ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	f3bf 8f4f 	dsb	sy
 80078b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80078ba:	bf00      	nop
 80078bc:	3710      	adds	r7, #16
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	2000392c 	.word	0x2000392c
 80078c8:	e000ed04 	.word	0xe000ed04

080078cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b08a      	sub	sp, #40	; 0x28
 80078d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80078d6:	2300      	movs	r3, #0
 80078d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80078da:	463a      	mov	r2, r7
 80078dc:	1d39      	adds	r1, r7, #4
 80078de:	f107 0308 	add.w	r3, r7, #8
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fa fe80 	bl	80025e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80078e8:	6839      	ldr	r1, [r7, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	68ba      	ldr	r2, [r7, #8]
 80078ee:	9202      	str	r2, [sp, #8]
 80078f0:	9301      	str	r3, [sp, #4]
 80078f2:	2300      	movs	r3, #0
 80078f4:	9300      	str	r3, [sp, #0]
 80078f6:	2300      	movs	r3, #0
 80078f8:	460a      	mov	r2, r1
 80078fa:	491d      	ldr	r1, [pc, #116]	; (8007970 <vTaskStartScheduler+0xa4>)
 80078fc:	481d      	ldr	r0, [pc, #116]	; (8007974 <vTaskStartScheduler+0xa8>)
 80078fe:	f7ff fe22 	bl	8007546 <xTaskCreateStatic>
 8007902:	4602      	mov	r2, r0
 8007904:	4b1c      	ldr	r3, [pc, #112]	; (8007978 <vTaskStartScheduler+0xac>)
 8007906:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007908:	4b1b      	ldr	r3, [pc, #108]	; (8007978 <vTaskStartScheduler+0xac>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007910:	2301      	movs	r3, #1
 8007912:	617b      	str	r3, [r7, #20]
 8007914:	e001      	b.n	800791a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007916:	2300      	movs	r3, #0
 8007918:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d115      	bne.n	800794c <vTaskStartScheduler+0x80>
 8007920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007924:	f383 8811 	msr	BASEPRI, r3
 8007928:	f3bf 8f6f 	isb	sy
 800792c:	f3bf 8f4f 	dsb	sy
 8007930:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007932:	4b12      	ldr	r3, [pc, #72]	; (800797c <vTaskStartScheduler+0xb0>)
 8007934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007938:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800793a:	4b11      	ldr	r3, [pc, #68]	; (8007980 <vTaskStartScheduler+0xb4>)
 800793c:	2201      	movs	r2, #1
 800793e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007940:	4b10      	ldr	r3, [pc, #64]	; (8007984 <vTaskStartScheduler+0xb8>)
 8007942:	2200      	movs	r2, #0
 8007944:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007946:	f000 fc83 	bl	8008250 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800794a:	e00d      	b.n	8007968 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007952:	d109      	bne.n	8007968 <vTaskStartScheduler+0x9c>
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	f383 8811 	msr	BASEPRI, r3
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	f3bf 8f4f 	dsb	sy
 8007964:	60fb      	str	r3, [r7, #12]
 8007966:	e7fe      	b.n	8007966 <vTaskStartScheduler+0x9a>
}
 8007968:	bf00      	nop
 800796a:	3718      	adds	r7, #24
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}
 8007970:	08009b90 	.word	0x08009b90
 8007974:	08007d01 	.word	0x08007d01
 8007978:	20003928 	.word	0x20003928
 800797c:	20003924 	.word	0x20003924
 8007980:	20003910 	.word	0x20003910
 8007984:	20003908 	.word	0x20003908

08007988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800798c:	4b04      	ldr	r3, [pc, #16]	; (80079a0 <vTaskSuspendAll+0x18>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3301      	adds	r3, #1
 8007992:	4a03      	ldr	r2, [pc, #12]	; (80079a0 <vTaskSuspendAll+0x18>)
 8007994:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8007996:	bf00      	nop
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr
 80079a0:	2000392c 	.word	0x2000392c

080079a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80079ae:	2300      	movs	r3, #0
 80079b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80079b2:	4b41      	ldr	r3, [pc, #260]	; (8007ab8 <xTaskResumeAll+0x114>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d109      	bne.n	80079ce <xTaskResumeAll+0x2a>
 80079ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	e7fe      	b.n	80079cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80079ce:	f000 fcdd 	bl	800838c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80079d2:	4b39      	ldr	r3, [pc, #228]	; (8007ab8 <xTaskResumeAll+0x114>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	4a37      	ldr	r2, [pc, #220]	; (8007ab8 <xTaskResumeAll+0x114>)
 80079da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079dc:	4b36      	ldr	r3, [pc, #216]	; (8007ab8 <xTaskResumeAll+0x114>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d161      	bne.n	8007aa8 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80079e4:	4b35      	ldr	r3, [pc, #212]	; (8007abc <xTaskResumeAll+0x118>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d05d      	beq.n	8007aa8 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079ec:	e02e      	b.n	8007a4c <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079ee:	4b34      	ldr	r3, [pc, #208]	; (8007ac0 <xTaskResumeAll+0x11c>)
 80079f0:	68db      	ldr	r3, [r3, #12]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3318      	adds	r3, #24
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff fd79 	bl	80074f2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	3304      	adds	r3, #4
 8007a04:	4618      	mov	r0, r3
 8007a06:	f7ff fd74 	bl	80074f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a0e:	2201      	movs	r2, #1
 8007a10:	409a      	lsls	r2, r3
 8007a12:	4b2c      	ldr	r3, [pc, #176]	; (8007ac4 <xTaskResumeAll+0x120>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4313      	orrs	r3, r2
 8007a18:	4a2a      	ldr	r2, [pc, #168]	; (8007ac4 <xTaskResumeAll+0x120>)
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a20:	4613      	mov	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	4413      	add	r3, r2
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	4a27      	ldr	r2, [pc, #156]	; (8007ac8 <xTaskResumeAll+0x124>)
 8007a2a:	441a      	add	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4619      	mov	r1, r3
 8007a32:	4610      	mov	r0, r2
 8007a34:	f7ff fd00 	bl	8007438 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a3c:	4b23      	ldr	r3, [pc, #140]	; (8007acc <xTaskResumeAll+0x128>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a42:	429a      	cmp	r2, r3
 8007a44:	d302      	bcc.n	8007a4c <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8007a46:	4b22      	ldr	r3, [pc, #136]	; (8007ad0 <xTaskResumeAll+0x12c>)
 8007a48:	2201      	movs	r2, #1
 8007a4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007a4c:	4b1c      	ldr	r3, [pc, #112]	; (8007ac0 <xTaskResumeAll+0x11c>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1cc      	bne.n	80079ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a5a:	f000 fa03 	bl	8007e64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007a5e:	4b1d      	ldr	r3, [pc, #116]	; (8007ad4 <xTaskResumeAll+0x130>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d010      	beq.n	8007a8c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a6a:	f000 f837 	bl	8007adc <xTaskIncrementTick>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d002      	beq.n	8007a7a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8007a74:	4b16      	ldr	r3, [pc, #88]	; (8007ad0 <xTaskResumeAll+0x12c>)
 8007a76:	2201      	movs	r2, #1
 8007a78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1f1      	bne.n	8007a6a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8007a86:	4b13      	ldr	r3, [pc, #76]	; (8007ad4 <xTaskResumeAll+0x130>)
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a8c:	4b10      	ldr	r3, [pc, #64]	; (8007ad0 <xTaskResumeAll+0x12c>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d009      	beq.n	8007aa8 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a94:	2301      	movs	r3, #1
 8007a96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a98:	4b0f      	ldr	r3, [pc, #60]	; (8007ad8 <xTaskResumeAll+0x134>)
 8007a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a9e:	601a      	str	r2, [r3, #0]
 8007aa0:	f3bf 8f4f 	dsb	sy
 8007aa4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007aa8:	f000 fc9e 	bl	80083e8 <vPortExitCritical>

	return xAlreadyYielded;
 8007aac:	68bb      	ldr	r3, [r7, #8]
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}
 8007ab6:	bf00      	nop
 8007ab8:	2000392c 	.word	0x2000392c
 8007abc:	20003904 	.word	0x20003904
 8007ac0:	200038c4 	.word	0x200038c4
 8007ac4:	2000390c 	.word	0x2000390c
 8007ac8:	20003808 	.word	0x20003808
 8007acc:	20003804 	.word	0x20003804
 8007ad0:	20003918 	.word	0x20003918
 8007ad4:	20003914 	.word	0x20003914
 8007ad8:	e000ed04 	.word	0xe000ed04

08007adc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ae6:	4b4e      	ldr	r3, [pc, #312]	; (8007c20 <xTaskIncrementTick+0x144>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	f040 8087 	bne.w	8007bfe <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007af0:	4b4c      	ldr	r3, [pc, #304]	; (8007c24 <xTaskIncrementTick+0x148>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3301      	adds	r3, #1
 8007af6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007af8:	4a4a      	ldr	r2, [pc, #296]	; (8007c24 <xTaskIncrementTick+0x148>)
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d11f      	bne.n	8007b44 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007b04:	4b48      	ldr	r3, [pc, #288]	; (8007c28 <xTaskIncrementTick+0x14c>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d009      	beq.n	8007b22 <xTaskIncrementTick+0x46>
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	e7fe      	b.n	8007b20 <xTaskIncrementTick+0x44>
 8007b22:	4b41      	ldr	r3, [pc, #260]	; (8007c28 <xTaskIncrementTick+0x14c>)
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	4b40      	ldr	r3, [pc, #256]	; (8007c2c <xTaskIncrementTick+0x150>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a3e      	ldr	r2, [pc, #248]	; (8007c28 <xTaskIncrementTick+0x14c>)
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	4a3e      	ldr	r2, [pc, #248]	; (8007c2c <xTaskIncrementTick+0x150>)
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	4b3e      	ldr	r3, [pc, #248]	; (8007c30 <xTaskIncrementTick+0x154>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	3301      	adds	r3, #1
 8007b3c:	4a3c      	ldr	r2, [pc, #240]	; (8007c30 <xTaskIncrementTick+0x154>)
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	f000 f990 	bl	8007e64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b44:	4b3b      	ldr	r3, [pc, #236]	; (8007c34 <xTaskIncrementTick+0x158>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	693a      	ldr	r2, [r7, #16]
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d348      	bcc.n	8007be0 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b4e:	4b36      	ldr	r3, [pc, #216]	; (8007c28 <xTaskIncrementTick+0x14c>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d104      	bne.n	8007b62 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b58:	4b36      	ldr	r3, [pc, #216]	; (8007c34 <xTaskIncrementTick+0x158>)
 8007b5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b5e:	601a      	str	r2, [r3, #0]
					break;
 8007b60:	e03e      	b.n	8007be0 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b62:	4b31      	ldr	r3, [pc, #196]	; (8007c28 <xTaskIncrementTick+0x14c>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b72:	693a      	ldr	r2, [r7, #16]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d203      	bcs.n	8007b82 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b7a:	4a2e      	ldr	r2, [pc, #184]	; (8007c34 <xTaskIncrementTick+0x158>)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b80:	e02e      	b.n	8007be0 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4618      	mov	r0, r3
 8007b88:	f7ff fcb3 	bl	80074f2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d004      	beq.n	8007b9e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	3318      	adds	r3, #24
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7ff fcaa 	bl	80074f2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	409a      	lsls	r2, r3
 8007ba6:	4b24      	ldr	r3, [pc, #144]	; (8007c38 <xTaskIncrementTick+0x15c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4313      	orrs	r3, r2
 8007bac:	4a22      	ldr	r2, [pc, #136]	; (8007c38 <xTaskIncrementTick+0x15c>)
 8007bae:	6013      	str	r3, [r2, #0]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bb4:	4613      	mov	r3, r2
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	009b      	lsls	r3, r3, #2
 8007bbc:	4a1f      	ldr	r2, [pc, #124]	; (8007c3c <xTaskIncrementTick+0x160>)
 8007bbe:	441a      	add	r2, r3
 8007bc0:	68bb      	ldr	r3, [r7, #8]
 8007bc2:	3304      	adds	r3, #4
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4610      	mov	r0, r2
 8007bc8:	f7ff fc36 	bl	8007438 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd0:	4b1b      	ldr	r3, [pc, #108]	; (8007c40 <xTaskIncrementTick+0x164>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd6:	429a      	cmp	r2, r3
 8007bd8:	d3b9      	bcc.n	8007b4e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bde:	e7b6      	b.n	8007b4e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007be0:	4b17      	ldr	r3, [pc, #92]	; (8007c40 <xTaskIncrementTick+0x164>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be6:	4915      	ldr	r1, [pc, #84]	; (8007c3c <xTaskIncrementTick+0x160>)
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	440b      	add	r3, r1
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d907      	bls.n	8007c08 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	e004      	b.n	8007c08 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007bfe:	4b11      	ldr	r3, [pc, #68]	; (8007c44 <xTaskIncrementTick+0x168>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3301      	adds	r3, #1
 8007c04:	4a0f      	ldr	r2, [pc, #60]	; (8007c44 <xTaskIncrementTick+0x168>)
 8007c06:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007c08:	4b0f      	ldr	r3, [pc, #60]	; (8007c48 <xTaskIncrementTick+0x16c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8007c10:	2301      	movs	r3, #1
 8007c12:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007c14:	697b      	ldr	r3, [r7, #20]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	2000392c 	.word	0x2000392c
 8007c24:	20003908 	.word	0x20003908
 8007c28:	200038bc 	.word	0x200038bc
 8007c2c:	200038c0 	.word	0x200038c0
 8007c30:	2000391c 	.word	0x2000391c
 8007c34:	20003924 	.word	0x20003924
 8007c38:	2000390c 	.word	0x2000390c
 8007c3c:	20003808 	.word	0x20003808
 8007c40:	20003804 	.word	0x20003804
 8007c44:	20003914 	.word	0x20003914
 8007c48:	20003918 	.word	0x20003918

08007c4c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c52:	4b26      	ldr	r3, [pc, #152]	; (8007cec <vTaskSwitchContext+0xa0>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d003      	beq.n	8007c62 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c5a:	4b25      	ldr	r3, [pc, #148]	; (8007cf0 <vTaskSwitchContext+0xa4>)
 8007c5c:	2201      	movs	r2, #1
 8007c5e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c60:	e03e      	b.n	8007ce0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8007c62:	4b23      	ldr	r3, [pc, #140]	; (8007cf0 <vTaskSwitchContext+0xa4>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c68:	4b22      	ldr	r3, [pc, #136]	; (8007cf4 <vTaskSwitchContext+0xa8>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	fab3 f383 	clz	r3, r3
 8007c74:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007c76:	7afb      	ldrb	r3, [r7, #11]
 8007c78:	f1c3 031f 	rsb	r3, r3, #31
 8007c7c:	617b      	str	r3, [r7, #20]
 8007c7e:	491e      	ldr	r1, [pc, #120]	; (8007cf8 <vTaskSwitchContext+0xac>)
 8007c80:	697a      	ldr	r2, [r7, #20]
 8007c82:	4613      	mov	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d109      	bne.n	8007ca6 <vTaskSwitchContext+0x5a>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	607b      	str	r3, [r7, #4]
 8007ca4:	e7fe      	b.n	8007ca4 <vTaskSwitchContext+0x58>
 8007ca6:	697a      	ldr	r2, [r7, #20]
 8007ca8:	4613      	mov	r3, r2
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	4413      	add	r3, r2
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4a11      	ldr	r2, [pc, #68]	; (8007cf8 <vTaskSwitchContext+0xac>)
 8007cb2:	4413      	add	r3, r2
 8007cb4:	613b      	str	r3, [r7, #16]
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	685a      	ldr	r2, [r3, #4]
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	605a      	str	r2, [r3, #4]
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d104      	bne.n	8007cd6 <vTaskSwitchContext+0x8a>
 8007ccc:	693b      	ldr	r3, [r7, #16]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	685a      	ldr	r2, [r3, #4]
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	605a      	str	r2, [r3, #4]
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	4a07      	ldr	r2, [pc, #28]	; (8007cfc <vTaskSwitchContext+0xb0>)
 8007cde:	6013      	str	r3, [r2, #0]
}
 8007ce0:	bf00      	nop
 8007ce2:	371c      	adds	r7, #28
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr
 8007cec:	2000392c 	.word	0x2000392c
 8007cf0:	20003918 	.word	0x20003918
 8007cf4:	2000390c 	.word	0x2000390c
 8007cf8:	20003808 	.word	0x20003808
 8007cfc:	20003804 	.word	0x20003804

08007d00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007d08:	f000 f852 	bl	8007db0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007d0c:	4b06      	ldr	r3, [pc, #24]	; (8007d28 <prvIdleTask+0x28>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d9f9      	bls.n	8007d08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007d14:	4b05      	ldr	r3, [pc, #20]	; (8007d2c <prvIdleTask+0x2c>)
 8007d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d1a:	601a      	str	r2, [r3, #0]
 8007d1c:	f3bf 8f4f 	dsb	sy
 8007d20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007d24:	e7f0      	b.n	8007d08 <prvIdleTask+0x8>
 8007d26:	bf00      	nop
 8007d28:	20003808 	.word	0x20003808
 8007d2c:	e000ed04 	.word	0xe000ed04

08007d30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d36:	2300      	movs	r3, #0
 8007d38:	607b      	str	r3, [r7, #4]
 8007d3a:	e00c      	b.n	8007d56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	009b      	lsls	r3, r3, #2
 8007d42:	4413      	add	r3, r2
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	4a12      	ldr	r2, [pc, #72]	; (8007d90 <prvInitialiseTaskLists+0x60>)
 8007d48:	4413      	add	r3, r2
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff fb47 	bl	80073de <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	3301      	adds	r3, #1
 8007d54:	607b      	str	r3, [r7, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2b06      	cmp	r3, #6
 8007d5a:	d9ef      	bls.n	8007d3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007d5c:	480d      	ldr	r0, [pc, #52]	; (8007d94 <prvInitialiseTaskLists+0x64>)
 8007d5e:	f7ff fb3e 	bl	80073de <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007d62:	480d      	ldr	r0, [pc, #52]	; (8007d98 <prvInitialiseTaskLists+0x68>)
 8007d64:	f7ff fb3b 	bl	80073de <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007d68:	480c      	ldr	r0, [pc, #48]	; (8007d9c <prvInitialiseTaskLists+0x6c>)
 8007d6a:	f7ff fb38 	bl	80073de <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007d6e:	480c      	ldr	r0, [pc, #48]	; (8007da0 <prvInitialiseTaskLists+0x70>)
 8007d70:	f7ff fb35 	bl	80073de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007d74:	480b      	ldr	r0, [pc, #44]	; (8007da4 <prvInitialiseTaskLists+0x74>)
 8007d76:	f7ff fb32 	bl	80073de <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007d7a:	4b0b      	ldr	r3, [pc, #44]	; (8007da8 <prvInitialiseTaskLists+0x78>)
 8007d7c:	4a05      	ldr	r2, [pc, #20]	; (8007d94 <prvInitialiseTaskLists+0x64>)
 8007d7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007d80:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <prvInitialiseTaskLists+0x7c>)
 8007d82:	4a05      	ldr	r2, [pc, #20]	; (8007d98 <prvInitialiseTaskLists+0x68>)
 8007d84:	601a      	str	r2, [r3, #0]
}
 8007d86:	bf00      	nop
 8007d88:	3708      	adds	r7, #8
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	20003808 	.word	0x20003808
 8007d94:	20003894 	.word	0x20003894
 8007d98:	200038a8 	.word	0x200038a8
 8007d9c:	200038c4 	.word	0x200038c4
 8007da0:	200038d8 	.word	0x200038d8
 8007da4:	200038f0 	.word	0x200038f0
 8007da8:	200038bc 	.word	0x200038bc
 8007dac:	200038c0 	.word	0x200038c0

08007db0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007db6:	e019      	b.n	8007dec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007db8:	f000 fae8 	bl	800838c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007dbc:	4b0f      	ldr	r3, [pc, #60]	; (8007dfc <prvCheckTasksWaitingTermination+0x4c>)
 8007dbe:	68db      	ldr	r3, [r3, #12]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	4618      	mov	r0, r3
 8007dca:	f7ff fb92 	bl	80074f2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007dce:	4b0c      	ldr	r3, [pc, #48]	; (8007e00 <prvCheckTasksWaitingTermination+0x50>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	4a0a      	ldr	r2, [pc, #40]	; (8007e00 <prvCheckTasksWaitingTermination+0x50>)
 8007dd6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007dd8:	4b0a      	ldr	r3, [pc, #40]	; (8007e04 <prvCheckTasksWaitingTermination+0x54>)
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	3b01      	subs	r3, #1
 8007dde:	4a09      	ldr	r2, [pc, #36]	; (8007e04 <prvCheckTasksWaitingTermination+0x54>)
 8007de0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007de2:	f000 fb01 	bl	80083e8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f000 f80e 	bl	8007e08 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007dec:	4b05      	ldr	r3, [pc, #20]	; (8007e04 <prvCheckTasksWaitingTermination+0x54>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1e1      	bne.n	8007db8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007df4:	bf00      	nop
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	200038d8 	.word	0x200038d8
 8007e00:	20003904 	.word	0x20003904
 8007e04:	200038ec 	.word	0x200038ec

08007e08 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b084      	sub	sp, #16
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d108      	bne.n	8007e2c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f000 fc90 	bl	8008744 <vPortFree>
				vPortFree( pxTCB );
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f000 fc8d 	bl	8008744 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007e2a:	e017      	b.n	8007e5c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e32:	2b01      	cmp	r3, #1
 8007e34:	d103      	bne.n	8007e3e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fc84 	bl	8008744 <vPortFree>
	}
 8007e3c:	e00e      	b.n	8007e5c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007e44:	2b02      	cmp	r3, #2
 8007e46:	d009      	beq.n	8007e5c <prvDeleteTCB+0x54>
 8007e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	60fb      	str	r3, [r7, #12]
 8007e5a:	e7fe      	b.n	8007e5a <prvDeleteTCB+0x52>
	}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e6a:	4b0c      	ldr	r3, [pc, #48]	; (8007e9c <prvResetNextTaskUnblockTime+0x38>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d104      	bne.n	8007e7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007e74:	4b0a      	ldr	r3, [pc, #40]	; (8007ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8007e76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007e7c:	e008      	b.n	8007e90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e7e:	4b07      	ldr	r3, [pc, #28]	; (8007e9c <prvResetNextTaskUnblockTime+0x38>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	4a04      	ldr	r2, [pc, #16]	; (8007ea0 <prvResetNextTaskUnblockTime+0x3c>)
 8007e8e:	6013      	str	r3, [r2, #0]
}
 8007e90:	bf00      	nop
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr
 8007e9c:	200038bc 	.word	0x200038bc
 8007ea0:	20003924 	.word	0x20003924

08007ea4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b083      	sub	sp, #12
 8007ea8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007eaa:	4b05      	ldr	r3, [pc, #20]	; (8007ec0 <xTaskGetCurrentTaskHandle+0x1c>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007eb0:	687b      	ldr	r3, [r7, #4]
	}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	20003804 	.word	0x20003804

08007ec4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8007ece:	f000 fa5d 	bl	800838c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8007ed2:	4b1e      	ldr	r3, [pc, #120]	; (8007f4c <ulTaskNotifyTake+0x88>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d113      	bne.n	8007f04 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8007edc:	4b1b      	ldr	r3, [pc, #108]	; (8007f4c <ulTaskNotifyTake+0x88>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2201      	movs	r2, #1
 8007ee2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d00b      	beq.n	8007f04 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007eec:	2101      	movs	r1, #1
 8007eee:	6838      	ldr	r0, [r7, #0]
 8007ef0:	f000 f8be 	bl	8008070 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007ef4:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <ulTaskNotifyTake+0x8c>)
 8007ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007efa:	601a      	str	r2, [r3, #0]
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007f04:	f000 fa70 	bl	80083e8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007f08:	f000 fa40 	bl	800838c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8007f0c:	4b0f      	ldr	r3, [pc, #60]	; (8007f4c <ulTaskNotifyTake+0x88>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f12:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00c      	beq.n	8007f34 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d004      	beq.n	8007f2a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8007f20:	4b0a      	ldr	r3, [pc, #40]	; (8007f4c <ulTaskNotifyTake+0x88>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2200      	movs	r2, #0
 8007f26:	64da      	str	r2, [r3, #76]	; 0x4c
 8007f28:	e004      	b.n	8007f34 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8007f2a:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <ulTaskNotifyTake+0x88>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	3a01      	subs	r2, #1
 8007f32:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007f34:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <ulTaskNotifyTake+0x88>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 8007f3e:	f000 fa53 	bl	80083e8 <vPortExitCritical>

		return ulReturn;
 8007f42:	68fb      	ldr	r3, [r7, #12]
	}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3710      	adds	r7, #16
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	20003804 	.word	0x20003804
 8007f50:	e000ed04 	.word	0xe000ed04

08007f54 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b08a      	sub	sp, #40	; 0x28
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d109      	bne.n	8007f78 <vTaskNotifyGiveFromISR+0x24>
 8007f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f68:	f383 8811 	msr	BASEPRI, r3
 8007f6c:	f3bf 8f6f 	isb	sy
 8007f70:	f3bf 8f4f 	dsb	sy
 8007f74:	61bb      	str	r3, [r7, #24]
 8007f76:	e7fe      	b.n	8007f76 <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007f78:	f000 fae4 	bl	8008544 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	627b      	str	r3, [r7, #36]	; 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007f80:	f3ef 8211 	mrs	r2, BASEPRI
 8007f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f88:	f383 8811 	msr	BASEPRI, r3
 8007f8c:	f3bf 8f6f 	isb	sy
 8007f90:	f3bf 8f4f 	dsb	sy
 8007f94:	617a      	str	r2, [r7, #20]
 8007f96:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007f98:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f9a:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007fa2:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb4:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007fb6:	7ffb      	ldrb	r3, [r7, #31]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d144      	bne.n	8008046 <vTaskNotifyGiveFromISR+0xf2>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d009      	beq.n	8007fd8 <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 8007fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc8:	f383 8811 	msr	BASEPRI, r3
 8007fcc:	f3bf 8f6f 	isb	sy
 8007fd0:	f3bf 8f4f 	dsb	sy
 8007fd4:	60fb      	str	r3, [r7, #12]
 8007fd6:	e7fe      	b.n	8007fd6 <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fd8:	4b1f      	ldr	r3, [pc, #124]	; (8008058 <vTaskNotifyGiveFromISR+0x104>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d11c      	bne.n	800801a <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	3304      	adds	r3, #4
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f7ff fa84 	bl	80074f2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fee:	2201      	movs	r2, #1
 8007ff0:	409a      	lsls	r2, r3
 8007ff2:	4b1a      	ldr	r3, [pc, #104]	; (800805c <vTaskNotifyGiveFromISR+0x108>)
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	4a18      	ldr	r2, [pc, #96]	; (800805c <vTaskNotifyGiveFromISR+0x108>)
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008000:	4613      	mov	r3, r2
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	4413      	add	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4a15      	ldr	r2, [pc, #84]	; (8008060 <vTaskNotifyGiveFromISR+0x10c>)
 800800a:	441a      	add	r2, r3
 800800c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800800e:	3304      	adds	r3, #4
 8008010:	4619      	mov	r1, r3
 8008012:	4610      	mov	r0, r2
 8008014:	f7ff fa10 	bl	8007438 <vListInsertEnd>
 8008018:	e005      	b.n	8008026 <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	3318      	adds	r3, #24
 800801e:	4619      	mov	r1, r3
 8008020:	4810      	ldr	r0, [pc, #64]	; (8008064 <vTaskNotifyGiveFromISR+0x110>)
 8008022:	f7ff fa09 	bl	8007438 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802a:	4b0f      	ldr	r3, [pc, #60]	; (8008068 <vTaskNotifyGiveFromISR+0x114>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008030:	429a      	cmp	r2, r3
 8008032:	d908      	bls.n	8008046 <vTaskNotifyGiveFromISR+0xf2>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d002      	beq.n	8008040 <vTaskNotifyGiveFromISR+0xec>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	2201      	movs	r2, #1
 800803e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8008040:	4b0a      	ldr	r3, [pc, #40]	; (800806c <vTaskNotifyGiveFromISR+0x118>)
 8008042:	2201      	movs	r2, #1
 8008044:	601a      	str	r2, [r3, #0]
 8008046:	6a3b      	ldr	r3, [r7, #32]
 8008048:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8008050:	bf00      	nop
 8008052:	3728      	adds	r7, #40	; 0x28
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}
 8008058:	2000392c 	.word	0x2000392c
 800805c:	2000390c 	.word	0x2000390c
 8008060:	20003808 	.word	0x20003808
 8008064:	200038c4 	.word	0x200038c4
 8008068:	20003804 	.word	0x20003804
 800806c:	20003918 	.word	0x20003918

08008070 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800807a:	4b29      	ldr	r3, [pc, #164]	; (8008120 <prvAddCurrentTaskToDelayedList+0xb0>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008080:	4b28      	ldr	r3, [pc, #160]	; (8008124 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3304      	adds	r3, #4
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff fa33 	bl	80074f2 <uxListRemove>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d10b      	bne.n	80080aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008092:	4b24      	ldr	r3, [pc, #144]	; (8008124 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008098:	2201      	movs	r2, #1
 800809a:	fa02 f303 	lsl.w	r3, r2, r3
 800809e:	43da      	mvns	r2, r3
 80080a0:	4b21      	ldr	r3, [pc, #132]	; (8008128 <prvAddCurrentTaskToDelayedList+0xb8>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4013      	ands	r3, r2
 80080a6:	4a20      	ldr	r2, [pc, #128]	; (8008128 <prvAddCurrentTaskToDelayedList+0xb8>)
 80080a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080b0:	d10a      	bne.n	80080c8 <prvAddCurrentTaskToDelayedList+0x58>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d007      	beq.n	80080c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080b8:	4b1a      	ldr	r3, [pc, #104]	; (8008124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3304      	adds	r3, #4
 80080be:	4619      	mov	r1, r3
 80080c0:	481a      	ldr	r0, [pc, #104]	; (800812c <prvAddCurrentTaskToDelayedList+0xbc>)
 80080c2:	f7ff f9b9 	bl	8007438 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80080c6:	e026      	b.n	8008116 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4413      	add	r3, r2
 80080ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80080d0:	4b14      	ldr	r3, [pc, #80]	; (8008124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68ba      	ldr	r2, [r7, #8]
 80080d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	429a      	cmp	r2, r3
 80080de:	d209      	bcs.n	80080f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080e0:	4b13      	ldr	r3, [pc, #76]	; (8008130 <prvAddCurrentTaskToDelayedList+0xc0>)
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	4b0f      	ldr	r3, [pc, #60]	; (8008124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3304      	adds	r3, #4
 80080ea:	4619      	mov	r1, r3
 80080ec:	4610      	mov	r0, r2
 80080ee:	f7ff f9c7 	bl	8007480 <vListInsert>
}
 80080f2:	e010      	b.n	8008116 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80080f4:	4b0f      	ldr	r3, [pc, #60]	; (8008134 <prvAddCurrentTaskToDelayedList+0xc4>)
 80080f6:	681a      	ldr	r2, [r3, #0]
 80080f8:	4b0a      	ldr	r3, [pc, #40]	; (8008124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	3304      	adds	r3, #4
 80080fe:	4619      	mov	r1, r3
 8008100:	4610      	mov	r0, r2
 8008102:	f7ff f9bd 	bl	8007480 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008106:	4b0c      	ldr	r3, [pc, #48]	; (8008138 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	429a      	cmp	r2, r3
 800810e:	d202      	bcs.n	8008116 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008110:	4a09      	ldr	r2, [pc, #36]	; (8008138 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	6013      	str	r3, [r2, #0]
}
 8008116:	bf00      	nop
 8008118:	3710      	adds	r7, #16
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	20003908 	.word	0x20003908
 8008124:	20003804 	.word	0x20003804
 8008128:	2000390c 	.word	0x2000390c
 800812c:	200038f0 	.word	0x200038f0
 8008130:	200038c0 	.word	0x200038c0
 8008134:	200038bc 	.word	0x200038bc
 8008138:	20003924 	.word	0x20003924

0800813c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	60f8      	str	r0, [r7, #12]
 8008144:	60b9      	str	r1, [r7, #8]
 8008146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	3b04      	subs	r3, #4
 800814c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	3b04      	subs	r3, #4
 800815a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f023 0201 	bic.w	r2, r3, #1
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	3b04      	subs	r3, #4
 800816a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800816c:	4a0c      	ldr	r2, [pc, #48]	; (80081a0 <pxPortInitialiseStack+0x64>)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	3b14      	subs	r3, #20
 8008176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008178:	687a      	ldr	r2, [r7, #4]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	3b04      	subs	r3, #4
 8008182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f06f 0202 	mvn.w	r2, #2
 800818a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3b20      	subs	r3, #32
 8008190:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008192:	68fb      	ldr	r3, [r7, #12]
}
 8008194:	4618      	mov	r0, r3
 8008196:	3714      	adds	r7, #20
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	080081a5 	.word	0x080081a5

080081a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80081aa:	2300      	movs	r3, #0
 80081ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80081ae:	4b11      	ldr	r3, [pc, #68]	; (80081f4 <prvTaskExitError+0x50>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081b6:	d009      	beq.n	80081cc <prvTaskExitError+0x28>
	__asm volatile
 80081b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081bc:	f383 8811 	msr	BASEPRI, r3
 80081c0:	f3bf 8f6f 	isb	sy
 80081c4:	f3bf 8f4f 	dsb	sy
 80081c8:	60fb      	str	r3, [r7, #12]
 80081ca:	e7fe      	b.n	80081ca <prvTaskExitError+0x26>
 80081cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d0:	f383 8811 	msr	BASEPRI, r3
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	f3bf 8f4f 	dsb	sy
 80081dc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80081de:	bf00      	nop
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d0fc      	beq.n	80081e0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80081e6:	bf00      	nop
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20002104 	.word	0x20002104
	...

08008200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008200:	4b07      	ldr	r3, [pc, #28]	; (8008220 <pxCurrentTCBConst2>)
 8008202:	6819      	ldr	r1, [r3, #0]
 8008204:	6808      	ldr	r0, [r1, #0]
 8008206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800820a:	f380 8809 	msr	PSP, r0
 800820e:	f3bf 8f6f 	isb	sy
 8008212:	f04f 0000 	mov.w	r0, #0
 8008216:	f380 8811 	msr	BASEPRI, r0
 800821a:	4770      	bx	lr
 800821c:	f3af 8000 	nop.w

08008220 <pxCurrentTCBConst2>:
 8008220:	20003804 	.word	0x20003804
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008224:	bf00      	nop
 8008226:	bf00      	nop

08008228 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008228:	4808      	ldr	r0, [pc, #32]	; (800824c <prvPortStartFirstTask+0x24>)
 800822a:	6800      	ldr	r0, [r0, #0]
 800822c:	6800      	ldr	r0, [r0, #0]
 800822e:	f380 8808 	msr	MSP, r0
 8008232:	f04f 0000 	mov.w	r0, #0
 8008236:	f380 8814 	msr	CONTROL, r0
 800823a:	b662      	cpsie	i
 800823c:	b661      	cpsie	f
 800823e:	f3bf 8f4f 	dsb	sy
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	df00      	svc	0
 8008248:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800824a:	bf00      	nop
 800824c:	e000ed08 	.word	0xe000ed08

08008250 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008256:	4b44      	ldr	r3, [pc, #272]	; (8008368 <xPortStartScheduler+0x118>)
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a44      	ldr	r2, [pc, #272]	; (800836c <xPortStartScheduler+0x11c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d109      	bne.n	8008274 <xPortStartScheduler+0x24>
 8008260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008264:	f383 8811 	msr	BASEPRI, r3
 8008268:	f3bf 8f6f 	isb	sy
 800826c:	f3bf 8f4f 	dsb	sy
 8008270:	613b      	str	r3, [r7, #16]
 8008272:	e7fe      	b.n	8008272 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008274:	4b3c      	ldr	r3, [pc, #240]	; (8008368 <xPortStartScheduler+0x118>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a3d      	ldr	r2, [pc, #244]	; (8008370 <xPortStartScheduler+0x120>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d109      	bne.n	8008292 <xPortStartScheduler+0x42>
 800827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008282:	f383 8811 	msr	BASEPRI, r3
 8008286:	f3bf 8f6f 	isb	sy
 800828a:	f3bf 8f4f 	dsb	sy
 800828e:	60fb      	str	r3, [r7, #12]
 8008290:	e7fe      	b.n	8008290 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008292:	4b38      	ldr	r3, [pc, #224]	; (8008374 <xPortStartScheduler+0x124>)
 8008294:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	781b      	ldrb	r3, [r3, #0]
 800829a:	b2db      	uxtb	r3, r3
 800829c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	22ff      	movs	r2, #255	; 0xff
 80082a2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	b2db      	uxtb	r3, r3
 80082aa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082ac:	78fb      	ldrb	r3, [r7, #3]
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80082b4:	b2da      	uxtb	r2, r3
 80082b6:	4b30      	ldr	r3, [pc, #192]	; (8008378 <xPortStartScheduler+0x128>)
 80082b8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082ba:	4b30      	ldr	r3, [pc, #192]	; (800837c <xPortStartScheduler+0x12c>)
 80082bc:	2207      	movs	r2, #7
 80082be:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082c0:	e009      	b.n	80082d6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80082c2:	4b2e      	ldr	r3, [pc, #184]	; (800837c <xPortStartScheduler+0x12c>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	3b01      	subs	r3, #1
 80082c8:	4a2c      	ldr	r2, [pc, #176]	; (800837c <xPortStartScheduler+0x12c>)
 80082ca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082cc:	78fb      	ldrb	r3, [r7, #3]
 80082ce:	b2db      	uxtb	r3, r3
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082d6:	78fb      	ldrb	r3, [r7, #3]
 80082d8:	b2db      	uxtb	r3, r3
 80082da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082de:	2b80      	cmp	r3, #128	; 0x80
 80082e0:	d0ef      	beq.n	80082c2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80082e2:	4b26      	ldr	r3, [pc, #152]	; (800837c <xPortStartScheduler+0x12c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f1c3 0307 	rsb	r3, r3, #7
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d009      	beq.n	8008302 <xPortStartScheduler+0xb2>
 80082ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	60bb      	str	r3, [r7, #8]
 8008300:	e7fe      	b.n	8008300 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008302:	4b1e      	ldr	r3, [pc, #120]	; (800837c <xPortStartScheduler+0x12c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	021b      	lsls	r3, r3, #8
 8008308:	4a1c      	ldr	r2, [pc, #112]	; (800837c <xPortStartScheduler+0x12c>)
 800830a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800830c:	4b1b      	ldr	r3, [pc, #108]	; (800837c <xPortStartScheduler+0x12c>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008314:	4a19      	ldr	r2, [pc, #100]	; (800837c <xPortStartScheduler+0x12c>)
 8008316:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	b2da      	uxtb	r2, r3
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008320:	4b17      	ldr	r3, [pc, #92]	; (8008380 <xPortStartScheduler+0x130>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	4a16      	ldr	r2, [pc, #88]	; (8008380 <xPortStartScheduler+0x130>)
 8008326:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800832a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800832c:	4b14      	ldr	r3, [pc, #80]	; (8008380 <xPortStartScheduler+0x130>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a13      	ldr	r2, [pc, #76]	; (8008380 <xPortStartScheduler+0x130>)
 8008332:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008336:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008338:	f000 f8d6 	bl	80084e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800833c:	4b11      	ldr	r3, [pc, #68]	; (8008384 <xPortStartScheduler+0x134>)
 800833e:	2200      	movs	r2, #0
 8008340:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008342:	f000 f8f5 	bl	8008530 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008346:	4b10      	ldr	r3, [pc, #64]	; (8008388 <xPortStartScheduler+0x138>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a0f      	ldr	r2, [pc, #60]	; (8008388 <xPortStartScheduler+0x138>)
 800834c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008350:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008352:	f7ff ff69 	bl	8008228 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008356:	f7ff fc79 	bl	8007c4c <vTaskSwitchContext>
	prvTaskExitError();
 800835a:	f7ff ff23 	bl	80081a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3718      	adds	r7, #24
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	e000ed00 	.word	0xe000ed00
 800836c:	410fc271 	.word	0x410fc271
 8008370:	410fc270 	.word	0x410fc270
 8008374:	e000e400 	.word	0xe000e400
 8008378:	20003930 	.word	0x20003930
 800837c:	20003934 	.word	0x20003934
 8008380:	e000ed20 	.word	0xe000ed20
 8008384:	20002104 	.word	0x20002104
 8008388:	e000ef34 	.word	0xe000ef34

0800838c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800838c:	b480      	push	{r7}
 800838e:	b083      	sub	sp, #12
 8008390:	af00      	add	r7, sp, #0
 8008392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008396:	f383 8811 	msr	BASEPRI, r3
 800839a:	f3bf 8f6f 	isb	sy
 800839e:	f3bf 8f4f 	dsb	sy
 80083a2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80083a4:	4b0e      	ldr	r3, [pc, #56]	; (80083e0 <vPortEnterCritical+0x54>)
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	3301      	adds	r3, #1
 80083aa:	4a0d      	ldr	r2, [pc, #52]	; (80083e0 <vPortEnterCritical+0x54>)
 80083ac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80083ae:	4b0c      	ldr	r3, [pc, #48]	; (80083e0 <vPortEnterCritical+0x54>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d10e      	bne.n	80083d4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083b6:	4b0b      	ldr	r3, [pc, #44]	; (80083e4 <vPortEnterCritical+0x58>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d009      	beq.n	80083d4 <vPortEnterCritical+0x48>
 80083c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	603b      	str	r3, [r7, #0]
 80083d2:	e7fe      	b.n	80083d2 <vPortEnterCritical+0x46>
	}
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr
 80083e0:	20002104 	.word	0x20002104
 80083e4:	e000ed04 	.word	0xe000ed04

080083e8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80083ee:	4b11      	ldr	r3, [pc, #68]	; (8008434 <vPortExitCritical+0x4c>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d109      	bne.n	800840a <vPortExitCritical+0x22>
 80083f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083fa:	f383 8811 	msr	BASEPRI, r3
 80083fe:	f3bf 8f6f 	isb	sy
 8008402:	f3bf 8f4f 	dsb	sy
 8008406:	607b      	str	r3, [r7, #4]
 8008408:	e7fe      	b.n	8008408 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800840a:	4b0a      	ldr	r3, [pc, #40]	; (8008434 <vPortExitCritical+0x4c>)
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	3b01      	subs	r3, #1
 8008410:	4a08      	ldr	r2, [pc, #32]	; (8008434 <vPortExitCritical+0x4c>)
 8008412:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008414:	4b07      	ldr	r3, [pc, #28]	; (8008434 <vPortExitCritical+0x4c>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d104      	bne.n	8008426 <vPortExitCritical+0x3e>
 800841c:	2300      	movs	r3, #0
 800841e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008426:	bf00      	nop
 8008428:	370c      	adds	r7, #12
 800842a:	46bd      	mov	sp, r7
 800842c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008430:	4770      	bx	lr
 8008432:	bf00      	nop
 8008434:	20002104 	.word	0x20002104
	...

08008440 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008440:	f3ef 8009 	mrs	r0, PSP
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	4b15      	ldr	r3, [pc, #84]	; (80084a0 <pxCurrentTCBConst>)
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	f01e 0f10 	tst.w	lr, #16
 8008450:	bf08      	it	eq
 8008452:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008456:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800845a:	6010      	str	r0, [r2, #0]
 800845c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008460:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008464:	f380 8811 	msr	BASEPRI, r0
 8008468:	f3bf 8f4f 	dsb	sy
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f7ff fbec 	bl	8007c4c <vTaskSwitchContext>
 8008474:	f04f 0000 	mov.w	r0, #0
 8008478:	f380 8811 	msr	BASEPRI, r0
 800847c:	bc09      	pop	{r0, r3}
 800847e:	6819      	ldr	r1, [r3, #0]
 8008480:	6808      	ldr	r0, [r1, #0]
 8008482:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008486:	f01e 0f10 	tst.w	lr, #16
 800848a:	bf08      	it	eq
 800848c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008490:	f380 8809 	msr	PSP, r0
 8008494:	f3bf 8f6f 	isb	sy
 8008498:	4770      	bx	lr
 800849a:	bf00      	nop
 800849c:	f3af 8000 	nop.w

080084a0 <pxCurrentTCBConst>:
 80084a0:	20003804 	.word	0x20003804
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop

080084a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
	__asm volatile
 80084ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b2:	f383 8811 	msr	BASEPRI, r3
 80084b6:	f3bf 8f6f 	isb	sy
 80084ba:	f3bf 8f4f 	dsb	sy
 80084be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084c0:	f7ff fb0c 	bl	8007adc <xTaskIncrementTick>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d003      	beq.n	80084d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80084ca:	4b06      	ldr	r3, [pc, #24]	; (80084e4 <SysTick_Handler+0x3c>)
 80084cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80084d0:	601a      	str	r2, [r3, #0]
 80084d2:	2300      	movs	r3, #0
 80084d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}
 80084e4:	e000ed04 	.word	0xe000ed04

080084e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80084e8:	b480      	push	{r7}
 80084ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80084ec:	4b0b      	ldr	r3, [pc, #44]	; (800851c <vPortSetupTimerInterrupt+0x34>)
 80084ee:	2200      	movs	r2, #0
 80084f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80084f2:	4b0b      	ldr	r3, [pc, #44]	; (8008520 <vPortSetupTimerInterrupt+0x38>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80084f8:	4b0a      	ldr	r3, [pc, #40]	; (8008524 <vPortSetupTimerInterrupt+0x3c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a0a      	ldr	r2, [pc, #40]	; (8008528 <vPortSetupTimerInterrupt+0x40>)
 80084fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008502:	099b      	lsrs	r3, r3, #6
 8008504:	4a09      	ldr	r2, [pc, #36]	; (800852c <vPortSetupTimerInterrupt+0x44>)
 8008506:	3b01      	subs	r3, #1
 8008508:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800850a:	4b04      	ldr	r3, [pc, #16]	; (800851c <vPortSetupTimerInterrupt+0x34>)
 800850c:	2207      	movs	r2, #7
 800850e:	601a      	str	r2, [r3, #0]
}
 8008510:	bf00      	nop
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	e000e010 	.word	0xe000e010
 8008520:	e000e018 	.word	0xe000e018
 8008524:	200020f8 	.word	0x200020f8
 8008528:	10624dd3 	.word	0x10624dd3
 800852c:	e000e014 	.word	0xe000e014

08008530 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008530:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008540 <vPortEnableVFP+0x10>
 8008534:	6801      	ldr	r1, [r0, #0]
 8008536:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800853a:	6001      	str	r1, [r0, #0]
 800853c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800853e:	bf00      	nop
 8008540:	e000ed88 	.word	0xe000ed88

08008544 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800854a:	f3ef 8305 	mrs	r3, IPSR
 800854e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b0f      	cmp	r3, #15
 8008554:	d913      	bls.n	800857e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008556:	4a16      	ldr	r2, [pc, #88]	; (80085b0 <vPortValidateInterruptPriority+0x6c>)
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4413      	add	r3, r2
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008560:	4b14      	ldr	r3, [pc, #80]	; (80085b4 <vPortValidateInterruptPriority+0x70>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	7afa      	ldrb	r2, [r7, #11]
 8008566:	429a      	cmp	r2, r3
 8008568:	d209      	bcs.n	800857e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	607b      	str	r3, [r7, #4]
 800857c:	e7fe      	b.n	800857c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800857e:	4b0e      	ldr	r3, [pc, #56]	; (80085b8 <vPortValidateInterruptPriority+0x74>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008586:	4b0d      	ldr	r3, [pc, #52]	; (80085bc <vPortValidateInterruptPriority+0x78>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	429a      	cmp	r2, r3
 800858c:	d909      	bls.n	80085a2 <vPortValidateInterruptPriority+0x5e>
 800858e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008592:	f383 8811 	msr	BASEPRI, r3
 8008596:	f3bf 8f6f 	isb	sy
 800859a:	f3bf 8f4f 	dsb	sy
 800859e:	603b      	str	r3, [r7, #0]
 80085a0:	e7fe      	b.n	80085a0 <vPortValidateInterruptPriority+0x5c>
	}
 80085a2:	bf00      	nop
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	e000e3f0 	.word	0xe000e3f0
 80085b4:	20003930 	.word	0x20003930
 80085b8:	e000ed0c 	.word	0xe000ed0c
 80085bc:	20003934 	.word	0x20003934

080085c0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b08a      	sub	sp, #40	; 0x28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80085c8:	2300      	movs	r3, #0
 80085ca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80085cc:	f7ff f9dc 	bl	8007988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80085d0:	4b57      	ldr	r3, [pc, #348]	; (8008730 <pvPortMalloc+0x170>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d101      	bne.n	80085dc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80085d8:	f000 f90c 	bl	80087f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80085dc:	4b55      	ldr	r3, [pc, #340]	; (8008734 <pvPortMalloc+0x174>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4013      	ands	r3, r2
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f040 808c 	bne.w	8008702 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d01c      	beq.n	800862a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80085f0:	2208      	movs	r2, #8
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4413      	add	r3, r2
 80085f6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f003 0307 	and.w	r3, r3, #7
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d013      	beq.n	800862a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f023 0307 	bic.w	r3, r3, #7
 8008608:	3308      	adds	r3, #8
 800860a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f003 0307 	and.w	r3, r3, #7
 8008612:	2b00      	cmp	r3, #0
 8008614:	d009      	beq.n	800862a <pvPortMalloc+0x6a>
 8008616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800861a:	f383 8811 	msr	BASEPRI, r3
 800861e:	f3bf 8f6f 	isb	sy
 8008622:	f3bf 8f4f 	dsb	sy
 8008626:	617b      	str	r3, [r7, #20]
 8008628:	e7fe      	b.n	8008628 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d068      	beq.n	8008702 <pvPortMalloc+0x142>
 8008630:	4b41      	ldr	r3, [pc, #260]	; (8008738 <pvPortMalloc+0x178>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	429a      	cmp	r2, r3
 8008638:	d863      	bhi.n	8008702 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800863a:	4b40      	ldr	r3, [pc, #256]	; (800873c <pvPortMalloc+0x17c>)
 800863c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800863e:	4b3f      	ldr	r3, [pc, #252]	; (800873c <pvPortMalloc+0x17c>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008644:	e004      	b.n	8008650 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800864a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	429a      	cmp	r2, r3
 8008658:	d903      	bls.n	8008662 <pvPortMalloc+0xa2>
 800865a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d1f1      	bne.n	8008646 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008662:	4b33      	ldr	r3, [pc, #204]	; (8008730 <pvPortMalloc+0x170>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008668:	429a      	cmp	r2, r3
 800866a:	d04a      	beq.n	8008702 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800866c:	6a3b      	ldr	r3, [r7, #32]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2208      	movs	r2, #8
 8008672:	4413      	add	r3, r2
 8008674:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008678:	681a      	ldr	r2, [r3, #0]
 800867a:	6a3b      	ldr	r3, [r7, #32]
 800867c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800867e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	1ad2      	subs	r2, r2, r3
 8008686:	2308      	movs	r3, #8
 8008688:	005b      	lsls	r3, r3, #1
 800868a:	429a      	cmp	r2, r3
 800868c:	d91e      	bls.n	80086cc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800868e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4413      	add	r3, r2
 8008694:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	f003 0307 	and.w	r3, r3, #7
 800869c:	2b00      	cmp	r3, #0
 800869e:	d009      	beq.n	80086b4 <pvPortMalloc+0xf4>
 80086a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a4:	f383 8811 	msr	BASEPRI, r3
 80086a8:	f3bf 8f6f 	isb	sy
 80086ac:	f3bf 8f4f 	dsb	sy
 80086b0:	613b      	str	r3, [r7, #16]
 80086b2:	e7fe      	b.n	80086b2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80086b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b6:	685a      	ldr	r2, [r3, #4]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	1ad2      	subs	r2, r2, r3
 80086bc:	69bb      	ldr	r3, [r7, #24]
 80086be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	687a      	ldr	r2, [r7, #4]
 80086c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80086c6:	69b8      	ldr	r0, [r7, #24]
 80086c8:	f000 f8f6 	bl	80088b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80086cc:	4b1a      	ldr	r3, [pc, #104]	; (8008738 <pvPortMalloc+0x178>)
 80086ce:	681a      	ldr	r2, [r3, #0]
 80086d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	4a18      	ldr	r2, [pc, #96]	; (8008738 <pvPortMalloc+0x178>)
 80086d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086da:	4b17      	ldr	r3, [pc, #92]	; (8008738 <pvPortMalloc+0x178>)
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	4b18      	ldr	r3, [pc, #96]	; (8008740 <pvPortMalloc+0x180>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	429a      	cmp	r2, r3
 80086e4:	d203      	bcs.n	80086ee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086e6:	4b14      	ldr	r3, [pc, #80]	; (8008738 <pvPortMalloc+0x178>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a15      	ldr	r2, [pc, #84]	; (8008740 <pvPortMalloc+0x180>)
 80086ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80086ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	4b10      	ldr	r3, [pc, #64]	; (8008734 <pvPortMalloc+0x174>)
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	431a      	orrs	r2, r3
 80086f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80086fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086fe:	2200      	movs	r2, #0
 8008700:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008702:	f7ff f94f 	bl	80079a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008706:	69fb      	ldr	r3, [r7, #28]
 8008708:	f003 0307 	and.w	r3, r3, #7
 800870c:	2b00      	cmp	r3, #0
 800870e:	d009      	beq.n	8008724 <pvPortMalloc+0x164>
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	e7fe      	b.n	8008722 <pvPortMalloc+0x162>
	return pvReturn;
 8008724:	69fb      	ldr	r3, [r7, #28]
}
 8008726:	4618      	mov	r0, r3
 8008728:	3728      	adds	r7, #40	; 0x28
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20007540 	.word	0x20007540
 8008734:	2000754c 	.word	0x2000754c
 8008738:	20007544 	.word	0x20007544
 800873c:	20007538 	.word	0x20007538
 8008740:	20007548 	.word	0x20007548

08008744 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b086      	sub	sp, #24
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d046      	beq.n	80087e4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008756:	2308      	movs	r3, #8
 8008758:	425b      	negs	r3, r3
 800875a:	697a      	ldr	r2, [r7, #20]
 800875c:	4413      	add	r3, r2
 800875e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008764:	693b      	ldr	r3, [r7, #16]
 8008766:	685a      	ldr	r2, [r3, #4]
 8008768:	4b20      	ldr	r3, [pc, #128]	; (80087ec <vPortFree+0xa8>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4013      	ands	r3, r2
 800876e:	2b00      	cmp	r3, #0
 8008770:	d109      	bne.n	8008786 <vPortFree+0x42>
 8008772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	60fb      	str	r3, [r7, #12]
 8008784:	e7fe      	b.n	8008784 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d009      	beq.n	80087a2 <vPortFree+0x5e>
 800878e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008792:	f383 8811 	msr	BASEPRI, r3
 8008796:	f3bf 8f6f 	isb	sy
 800879a:	f3bf 8f4f 	dsb	sy
 800879e:	60bb      	str	r3, [r7, #8]
 80087a0:	e7fe      	b.n	80087a0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	4b11      	ldr	r3, [pc, #68]	; (80087ec <vPortFree+0xa8>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4013      	ands	r3, r2
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d019      	beq.n	80087e4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d115      	bne.n	80087e4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	685a      	ldr	r2, [r3, #4]
 80087bc:	4b0b      	ldr	r3, [pc, #44]	; (80087ec <vPortFree+0xa8>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	43db      	mvns	r3, r3
 80087c2:	401a      	ands	r2, r3
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80087c8:	f7ff f8de 	bl	8007988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	4b07      	ldr	r3, [pc, #28]	; (80087f0 <vPortFree+0xac>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4413      	add	r3, r2
 80087d6:	4a06      	ldr	r2, [pc, #24]	; (80087f0 <vPortFree+0xac>)
 80087d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087da:	6938      	ldr	r0, [r7, #16]
 80087dc:	f000 f86c 	bl	80088b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80087e0:	f7ff f8e0 	bl	80079a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80087e4:	bf00      	nop
 80087e6:	3718      	adds	r7, #24
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	2000754c 	.word	0x2000754c
 80087f0:	20007544 	.word	0x20007544

080087f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80087fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80087fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008800:	4b27      	ldr	r3, [pc, #156]	; (80088a0 <prvHeapInit+0xac>)
 8008802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f003 0307 	and.w	r3, r3, #7
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00c      	beq.n	8008828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3307      	adds	r3, #7
 8008812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f023 0307 	bic.w	r3, r3, #7
 800881a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	4a1f      	ldr	r2, [pc, #124]	; (80088a0 <prvHeapInit+0xac>)
 8008824:	4413      	add	r3, r2
 8008826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800882c:	4a1d      	ldr	r2, [pc, #116]	; (80088a4 <prvHeapInit+0xb0>)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008832:	4b1c      	ldr	r3, [pc, #112]	; (80088a4 <prvHeapInit+0xb0>)
 8008834:	2200      	movs	r2, #0
 8008836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	68ba      	ldr	r2, [r7, #8]
 800883c:	4413      	add	r3, r2
 800883e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008840:	2208      	movs	r2, #8
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	1a9b      	subs	r3, r3, r2
 8008846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f023 0307 	bic.w	r3, r3, #7
 800884e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	4a15      	ldr	r2, [pc, #84]	; (80088a8 <prvHeapInit+0xb4>)
 8008854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008856:	4b14      	ldr	r3, [pc, #80]	; (80088a8 <prvHeapInit+0xb4>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	2200      	movs	r2, #0
 800885c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800885e:	4b12      	ldr	r3, [pc, #72]	; (80088a8 <prvHeapInit+0xb4>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	68fa      	ldr	r2, [r7, #12]
 800886e:	1ad2      	subs	r2, r2, r3
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008874:	4b0c      	ldr	r3, [pc, #48]	; (80088a8 <prvHeapInit+0xb4>)
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	685b      	ldr	r3, [r3, #4]
 8008880:	4a0a      	ldr	r2, [pc, #40]	; (80088ac <prvHeapInit+0xb8>)
 8008882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	685b      	ldr	r3, [r3, #4]
 8008888:	4a09      	ldr	r2, [pc, #36]	; (80088b0 <prvHeapInit+0xbc>)
 800888a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800888c:	4b09      	ldr	r3, [pc, #36]	; (80088b4 <prvHeapInit+0xc0>)
 800888e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008892:	601a      	str	r2, [r3, #0]
}
 8008894:	bf00      	nop
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr
 80088a0:	20003938 	.word	0x20003938
 80088a4:	20007538 	.word	0x20007538
 80088a8:	20007540 	.word	0x20007540
 80088ac:	20007548 	.word	0x20007548
 80088b0:	20007544 	.word	0x20007544
 80088b4:	2000754c 	.word	0x2000754c

080088b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80088c0:	4b28      	ldr	r3, [pc, #160]	; (8008964 <prvInsertBlockIntoFreeList+0xac>)
 80088c2:	60fb      	str	r3, [r7, #12]
 80088c4:	e002      	b.n	80088cc <prvInsertBlockIntoFreeList+0x14>
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	687a      	ldr	r2, [r7, #4]
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d8f7      	bhi.n	80088c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	68ba      	ldr	r2, [r7, #8]
 80088e0:	4413      	add	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d108      	bne.n	80088fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	441a      	add	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	441a      	add	r2, r3
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	429a      	cmp	r2, r3
 800890c:	d118      	bne.n	8008940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	4b15      	ldr	r3, [pc, #84]	; (8008968 <prvInsertBlockIntoFreeList+0xb0>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	429a      	cmp	r2, r3
 8008918:	d00d      	beq.n	8008936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	441a      	add	r2, r3
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681a      	ldr	r2, [r3, #0]
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	601a      	str	r2, [r3, #0]
 8008934:	e008      	b.n	8008948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008936:	4b0c      	ldr	r3, [pc, #48]	; (8008968 <prvInsertBlockIntoFreeList+0xb0>)
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	e003      	b.n	8008948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681a      	ldr	r2, [r3, #0]
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	429a      	cmp	r2, r3
 800894e:	d002      	beq.n	8008956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008956:	bf00      	nop
 8008958:	3714      	adds	r7, #20
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	20007538 	.word	0x20007538
 8008968:	20007540 	.word	0x20007540

0800896c <arm_copy_q15>:
 800896c:	b4f0      	push	{r4, r5, r6, r7}
 800896e:	0897      	lsrs	r7, r2, #2
 8008970:	d015      	beq.n	800899e <arm_copy_q15+0x32>
 8008972:	f101 0408 	add.w	r4, r1, #8
 8008976:	f100 0308 	add.w	r3, r0, #8
 800897a:	463d      	mov	r5, r7
 800897c:	f853 6c08 	ldr.w	r6, [r3, #-8]
 8008980:	f844 6c08 	str.w	r6, [r4, #-8]
 8008984:	f853 6c04 	ldr.w	r6, [r3, #-4]
 8008988:	f844 6c04 	str.w	r6, [r4, #-4]
 800898c:	3d01      	subs	r5, #1
 800898e:	f103 0308 	add.w	r3, r3, #8
 8008992:	f104 0408 	add.w	r4, r4, #8
 8008996:	d1f1      	bne.n	800897c <arm_copy_q15+0x10>
 8008998:	00ff      	lsls	r7, r7, #3
 800899a:	4439      	add	r1, r7
 800899c:	4438      	add	r0, r7
 800899e:	f012 0203 	ands.w	r2, r2, #3
 80089a2:	d006      	beq.n	80089b2 <arm_copy_q15+0x46>
 80089a4:	3902      	subs	r1, #2
 80089a6:	f930 3b02 	ldrsh.w	r3, [r0], #2
 80089aa:	f821 3f02 	strh.w	r3, [r1, #2]!
 80089ae:	3a01      	subs	r2, #1
 80089b0:	d1f9      	bne.n	80089a6 <arm_copy_q15+0x3a>
 80089b2:	bcf0      	pop	{r4, r5, r6, r7}
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop

080089b8 <arm_copy_q7>:
 80089b8:	b4f0      	push	{r4, r5, r6, r7}
 80089ba:	0897      	lsrs	r7, r2, #2
 80089bc:	d00b      	beq.n	80089d6 <arm_copy_q7+0x1e>
 80089be:	1f0d      	subs	r5, r1, #4
 80089c0:	4604      	mov	r4, r0
 80089c2:	463b      	mov	r3, r7
 80089c4:	f854 6b04 	ldr.w	r6, [r4], #4
 80089c8:	f845 6f04 	str.w	r6, [r5, #4]!
 80089cc:	3b01      	subs	r3, #1
 80089ce:	d1f9      	bne.n	80089c4 <arm_copy_q7+0xc>
 80089d0:	00bf      	lsls	r7, r7, #2
 80089d2:	4439      	add	r1, r7
 80089d4:	4438      	add	r0, r7
 80089d6:	f012 0203 	ands.w	r2, r2, #3
 80089da:	d007      	beq.n	80089ec <arm_copy_q7+0x34>
 80089dc:	3901      	subs	r1, #1
 80089de:	4402      	add	r2, r0
 80089e0:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80089e4:	f801 3f01 	strb.w	r3, [r1, #1]!
 80089e8:	4290      	cmp	r0, r2
 80089ea:	d1f9      	bne.n	80089e0 <arm_copy_q7+0x28>
 80089ec:	bcf0      	pop	{r4, r5, r6, r7}
 80089ee:	4770      	bx	lr

080089f0 <arm_max_f32>:
 80089f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f4:	1e4f      	subs	r7, r1, #1
 80089f6:	ea5f 0897 	movs.w	r8, r7, lsr #2
 80089fa:	f100 0e04 	add.w	lr, r0, #4
 80089fe:	edd0 7a00 	vldr	s15, [r0]
 8008a02:	d058      	beq.n	8008ab6 <arm_max_f32+0xc6>
 8008a04:	3014      	adds	r0, #20
 8008a06:	46c4      	mov	ip, r8
 8008a08:	2604      	movs	r6, #4
 8008a0a:	2400      	movs	r4, #0
 8008a0c:	ed10 6a04 	vldr	s12, [r0, #-16]
 8008a10:	ed50 6a03 	vldr	s13, [r0, #-12]
 8008a14:	ed10 7a02 	vldr	s14, [r0, #-8]
 8008a18:	ed50 5a01 	vldr	s11, [r0, #-4]
 8008a1c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8008a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a24:	bfc8      	it	gt
 8008a26:	eef0 7a46 	vmovgt.f32	s15, s12
 8008a2a:	f1a6 0503 	sub.w	r5, r6, #3
 8008a2e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008a32:	bfc8      	it	gt
 8008a34:	462c      	movgt	r4, r5
 8008a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a3a:	bf48      	it	mi
 8008a3c:	eef0 7a66 	vmovmi.f32	s15, s13
 8008a40:	f1a6 0502 	sub.w	r5, r6, #2
 8008a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008a48:	bf48      	it	mi
 8008a4a:	462c      	movmi	r4, r5
 8008a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a50:	bf48      	it	mi
 8008a52:	eef0 7a47 	vmovmi.f32	s15, s14
 8008a56:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 8008a5a:	eef4 7ae5 	vcmpe.f32	s15, s11
 8008a5e:	bf48      	it	mi
 8008a60:	462c      	movmi	r4, r5
 8008a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a66:	bf48      	it	mi
 8008a68:	4634      	movmi	r4, r6
 8008a6a:	bf48      	it	mi
 8008a6c:	eef0 7a65 	vmovmi.f32	s15, s11
 8008a70:	f1bc 0c01 	subs.w	ip, ip, #1
 8008a74:	f100 0010 	add.w	r0, r0, #16
 8008a78:	f106 0604 	add.w	r6, r6, #4
 8008a7c:	d1c6      	bne.n	8008a0c <arm_max_f32+0x1c>
 8008a7e:	eb0e 1e08 	add.w	lr, lr, r8, lsl #4
 8008a82:	f017 0003 	ands.w	r0, r7, #3
 8008a86:	d018      	beq.n	8008aba <arm_max_f32+0xca>
 8008a88:	1a08      	subs	r0, r1, r0
 8008a8a:	ecbe 7a01 	vldmia	lr!, {s14}
 8008a8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a96:	bfc8      	it	gt
 8008a98:	4604      	movgt	r4, r0
 8008a9a:	f100 0001 	add.w	r0, r0, #1
 8008a9e:	bfd8      	it	le
 8008aa0:	eeb0 7a67 	vmovle.f32	s14, s15
 8008aa4:	4281      	cmp	r1, r0
 8008aa6:	eef0 7a47 	vmov.f32	s15, s14
 8008aaa:	d1ee      	bne.n	8008a8a <arm_max_f32+0x9a>
 8008aac:	ed82 7a00 	vstr	s14, [r2]
 8008ab0:	601c      	str	r4, [r3, #0]
 8008ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab6:	4644      	mov	r4, r8
 8008ab8:	e7e3      	b.n	8008a82 <arm_max_f32+0x92>
 8008aba:	eeb0 7a67 	vmov.f32	s14, s15
 8008abe:	e7f5      	b.n	8008aac <arm_max_f32+0xbc>

08008ac0 <arm_cfft_radix8by2_f32>:
 8008ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ac4:	ed2d 8b08 	vpush	{d8-d11}
 8008ac8:	4607      	mov	r7, r0
 8008aca:	4608      	mov	r0, r1
 8008acc:	f8b7 e000 	ldrh.w	lr, [r7]
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	ea4f 015e 	mov.w	r1, lr, lsr #1
 8008ad6:	eb00 088e 	add.w	r8, r0, lr, lsl #2
 8008ada:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8008ade:	f000 80b0 	beq.w	8008c42 <arm_cfft_radix8by2_f32+0x182>
 8008ae2:	008b      	lsls	r3, r1, #2
 8008ae4:	3310      	adds	r3, #16
 8008ae6:	18c6      	adds	r6, r0, r3
 8008ae8:	3210      	adds	r2, #16
 8008aea:	4443      	add	r3, r8
 8008aec:	f100 0510 	add.w	r5, r0, #16
 8008af0:	f108 0410 	add.w	r4, r8, #16
 8008af4:	ed54 1a04 	vldr	s3, [r4, #-16]
 8008af8:	ed54 6a03 	vldr	s13, [r4, #-12]
 8008afc:	ed13 4a04 	vldr	s8, [r3, #-16]
 8008b00:	ed53 3a03 	vldr	s7, [r3, #-12]
 8008b04:	ed53 5a02 	vldr	s11, [r3, #-8]
 8008b08:	ed13 5a01 	vldr	s10, [r3, #-4]
 8008b0c:	ed14 0a02 	vldr	s0, [r4, #-8]
 8008b10:	ed54 7a01 	vldr	s15, [r4, #-4]
 8008b14:	ed16 2a04 	vldr	s4, [r6, #-16]
 8008b18:	ed56 2a03 	vldr	s5, [r6, #-12]
 8008b1c:	ed15 6a03 	vldr	s12, [r5, #-12]
 8008b20:	ed15 7a01 	vldr	s14, [r5, #-4]
 8008b24:	ed15 3a04 	vldr	s6, [r5, #-16]
 8008b28:	ed56 0a02 	vldr	s1, [r6, #-8]
 8008b2c:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008b30:	ed55 4a02 	vldr	s9, [r5, #-8]
 8008b34:	ee73 ba21 	vadd.f32	s23, s6, s3
 8008b38:	ee36 ba26 	vadd.f32	s22, s12, s13
 8008b3c:	ee37 aa27 	vadd.f32	s20, s14, s15
 8008b40:	ee72 9a04 	vadd.f32	s19, s4, s8
 8008b44:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8008b48:	ee31 8a05 	vadd.f32	s16, s2, s10
 8008b4c:	ee74 aa80 	vadd.f32	s21, s9, s0
 8008b50:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8008b54:	ed45 ba04 	vstr	s23, [r5, #-16]
 8008b58:	ed05 ba03 	vstr	s22, [r5, #-12]
 8008b5c:	ed45 aa02 	vstr	s21, [r5, #-8]
 8008b60:	ed05 aa01 	vstr	s20, [r5, #-4]
 8008b64:	ed06 8a01 	vstr	s16, [r6, #-4]
 8008b68:	ed46 9a04 	vstr	s19, [r6, #-16]
 8008b6c:	ed06 9a03 	vstr	s18, [r6, #-12]
 8008b70:	ed46 8a02 	vstr	s17, [r6, #-8]
 8008b74:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008b78:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8008b7c:	ed12 6a03 	vldr	s12, [r2, #-12]
 8008b80:	ed52 2a04 	vldr	s5, [r2, #-16]
 8008b84:	ee33 3a61 	vsub.f32	s6, s6, s3
 8008b88:	ee34 4a42 	vsub.f32	s8, s8, s4
 8008b8c:	ee26 8a86 	vmul.f32	s16, s13, s12
 8008b90:	ee24 2a06 	vmul.f32	s4, s8, s12
 8008b94:	ee63 1a22 	vmul.f32	s3, s6, s5
 8008b98:	ee24 4a22 	vmul.f32	s8, s8, s5
 8008b9c:	ee23 3a06 	vmul.f32	s6, s6, s12
 8008ba0:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8008ba4:	ee23 6a86 	vmul.f32	s12, s7, s12
 8008ba8:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8008bac:	ee36 6a04 	vadd.f32	s12, s12, s8
 8008bb0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8008bb4:	ee72 3a63 	vsub.f32	s7, s4, s7
 8008bb8:	ee71 2a88 	vadd.f32	s5, s3, s16
 8008bbc:	ed44 6a03 	vstr	s13, [r4, #-12]
 8008bc0:	ed44 2a04 	vstr	s5, [r4, #-16]
 8008bc4:	ed43 3a04 	vstr	s7, [r3, #-16]
 8008bc8:	ed03 6a03 	vstr	s12, [r3, #-12]
 8008bcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008bd0:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8008bd4:	ed12 7a01 	vldr	s14, [r2, #-4]
 8008bd8:	ed52 5a02 	vldr	s11, [r2, #-8]
 8008bdc:	ee35 6a41 	vsub.f32	s12, s10, s2
 8008be0:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8008be4:	ee67 3a87 	vmul.f32	s7, s15, s14
 8008be8:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008bec:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8008bf0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008bf4:	ee64 4a87 	vmul.f32	s9, s9, s14
 8008bf8:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8008bfc:	ee26 7a07 	vmul.f32	s14, s12, s14
 8008c00:	ee26 6a25 	vmul.f32	s12, s12, s11
 8008c04:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008c08:	ee74 5a23 	vadd.f32	s11, s8, s7
 8008c0c:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008c10:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008c14:	f1be 0e01 	subs.w	lr, lr, #1
 8008c18:	ed44 5a02 	vstr	s11, [r4, #-8]
 8008c1c:	f105 0510 	add.w	r5, r5, #16
 8008c20:	ed44 7a01 	vstr	s15, [r4, #-4]
 8008c24:	f106 0610 	add.w	r6, r6, #16
 8008c28:	ed03 6a02 	vstr	s12, [r3, #-8]
 8008c2c:	ed03 7a01 	vstr	s14, [r3, #-4]
 8008c30:	f102 0210 	add.w	r2, r2, #16
 8008c34:	f104 0410 	add.w	r4, r4, #16
 8008c38:	f103 0310 	add.w	r3, r3, #16
 8008c3c:	f47f af5a 	bne.w	8008af4 <arm_cfft_radix8by2_f32+0x34>
 8008c40:	687a      	ldr	r2, [r7, #4]
 8008c42:	b28c      	uxth	r4, r1
 8008c44:	4621      	mov	r1, r4
 8008c46:	2302      	movs	r3, #2
 8008c48:	f000 fbca 	bl	80093e0 <arm_radix8_butterfly_f32>
 8008c4c:	ecbd 8b08 	vpop	{d8-d11}
 8008c50:	4621      	mov	r1, r4
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	4640      	mov	r0, r8
 8008c56:	2302      	movs	r3, #2
 8008c58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c5c:	f000 bbc0 	b.w	80093e0 <arm_radix8_butterfly_f32>

08008c60 <arm_cfft_radix8by4_f32>:
 8008c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c64:	ed2d 8b0a 	vpush	{d8-d12}
 8008c68:	8802      	ldrh	r2, [r0, #0]
 8008c6a:	ed91 6a00 	vldr	s12, [r1]
 8008c6e:	b08f      	sub	sp, #60	; 0x3c
 8008c70:	460f      	mov	r7, r1
 8008c72:	0852      	lsrs	r2, r2, #1
 8008c74:	6841      	ldr	r1, [r0, #4]
 8008c76:	900c      	str	r0, [sp, #48]	; 0x30
 8008c78:	0093      	lsls	r3, r2, #2
 8008c7a:	4638      	mov	r0, r7
 8008c7c:	4418      	add	r0, r3
 8008c7e:	4606      	mov	r6, r0
 8008c80:	9009      	str	r0, [sp, #36]	; 0x24
 8008c82:	4418      	add	r0, r3
 8008c84:	edd0 6a00 	vldr	s13, [r0]
 8008c88:	ed96 4a00 	vldr	s8, [r6]
 8008c8c:	edd6 2a01 	vldr	s5, [r6, #4]
 8008c90:	edd0 7a01 	vldr	s15, [r0, #4]
 8008c94:	900a      	str	r0, [sp, #40]	; 0x28
 8008c96:	ee76 5a26 	vadd.f32	s11, s12, s13
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	4625      	mov	r5, r4
 8008c9e:	441c      	add	r4, r3
 8008ca0:	edd4 4a00 	vldr	s9, [r4]
 8008ca4:	ed97 7a01 	vldr	s14, [r7, #4]
 8008ca8:	ed94 3a01 	vldr	s6, [r4, #4]
 8008cac:	9401      	str	r4, [sp, #4]
 8008cae:	ee35 5a84 	vadd.f32	s10, s11, s8
 8008cb2:	4630      	mov	r0, r6
 8008cb4:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008cb8:	463e      	mov	r6, r7
 8008cba:	ee15 ea10 	vmov	lr, s10
 8008cbe:	ee76 6a66 	vsub.f32	s13, s12, s13
 8008cc2:	f846 eb08 	str.w	lr, [r6], #8
 8008cc6:	ee37 6a27 	vadd.f32	s12, s14, s15
 8008cca:	ed90 5a01 	vldr	s10, [r0, #4]
 8008cce:	9605      	str	r6, [sp, #20]
 8008cd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008cd4:	9e01      	ldr	r6, [sp, #4]
 8008cd6:	9707      	str	r7, [sp, #28]
 8008cd8:	ee76 3aa2 	vadd.f32	s7, s13, s5
 8008cdc:	ed96 2a01 	vldr	s4, [r6, #4]
 8008ce0:	ee36 7a05 	vadd.f32	s14, s12, s10
 8008ce4:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8008ce8:	ee37 5ac4 	vsub.f32	s10, s15, s8
 8008cec:	ee77 7a84 	vadd.f32	s15, s15, s8
 8008cf0:	ee33 4ac3 	vsub.f32	s8, s7, s6
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	46a3      	mov	fp, r4
 8008cf8:	ee37 7a02 	vadd.f32	s14, s14, s4
 8008cfc:	ee35 5a24 	vadd.f32	s10, s10, s9
 8008d00:	ee14 8a10 	vmov	r8, s8
 8008d04:	46a4      	mov	ip, r4
 8008d06:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8008d0a:	ed87 7a01 	vstr	s14, [r7, #4]
 8008d0e:	f84b 8b08 	str.w	r8, [fp], #8
 8008d12:	f1ac 0704 	sub.w	r7, ip, #4
 8008d16:	ed8c 5a01 	vstr	s10, [ip, #4]
 8008d1a:	f101 0c08 	add.w	ip, r1, #8
 8008d1e:	462c      	mov	r4, r5
 8008d20:	f8cd c010 	str.w	ip, [sp, #16]
 8008d24:	ee15 ca90 	vmov	ip, s11
 8008d28:	ee36 6a62 	vsub.f32	s12, s12, s5
 8008d2c:	f844 cb08 	str.w	ip, [r4], #8
 8008d30:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8008d34:	ee36 6a43 	vsub.f32	s12, s12, s6
 8008d38:	9406      	str	r4, [sp, #24]
 8008d3a:	ee76 6a83 	vadd.f32	s13, s13, s6
 8008d3e:	f101 0410 	add.w	r4, r1, #16
 8008d42:	0852      	lsrs	r2, r2, #1
 8008d44:	9402      	str	r4, [sp, #8]
 8008d46:	ed85 6a01 	vstr	s12, [r5, #4]
 8008d4a:	462c      	mov	r4, r5
 8008d4c:	f101 0518 	add.w	r5, r1, #24
 8008d50:	920b      	str	r2, [sp, #44]	; 0x2c
 8008d52:	46b2      	mov	sl, r6
 8008d54:	9503      	str	r5, [sp, #12]
 8008d56:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8008d5a:	3a02      	subs	r2, #2
 8008d5c:	ee16 5a90 	vmov	r5, s13
 8008d60:	46b6      	mov	lr, r6
 8008d62:	4630      	mov	r0, r6
 8008d64:	0852      	lsrs	r2, r2, #1
 8008d66:	f84a 5b08 	str.w	r5, [sl], #8
 8008d6a:	f1a0 0604 	sub.w	r6, r0, #4
 8008d6e:	edce 7a01 	vstr	s15, [lr, #4]
 8008d72:	9208      	str	r2, [sp, #32]
 8008d74:	f000 8130 	beq.w	8008fd8 <arm_cfft_radix8by4_f32+0x378>
 8008d78:	4691      	mov	r9, r2
 8008d7a:	9a07      	ldr	r2, [sp, #28]
 8008d7c:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008d80:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8008d84:	3b08      	subs	r3, #8
 8008d86:	f102 0510 	add.w	r5, r2, #16
 8008d8a:	f101 0c20 	add.w	ip, r1, #32
 8008d8e:	f1a4 020c 	sub.w	r2, r4, #12
 8008d92:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8008d96:	4433      	add	r3, r6
 8008d98:	3410      	adds	r4, #16
 8008d9a:	4650      	mov	r0, sl
 8008d9c:	4659      	mov	r1, fp
 8008d9e:	ed55 3a02 	vldr	s7, [r5, #-8]
 8008da2:	ed14 5a02 	vldr	s10, [r4, #-8]
 8008da6:	ed91 7a00 	vldr	s14, [r1]
 8008daa:	edd0 7a00 	vldr	s15, [r0]
 8008dae:	ed54 5a01 	vldr	s11, [r4, #-4]
 8008db2:	ed15 4a01 	vldr	s8, [r5, #-4]
 8008db6:	edd0 6a01 	vldr	s13, [r0, #4]
 8008dba:	ed91 6a01 	vldr	s12, [r1, #4]
 8008dbe:	ee33 8a85 	vadd.f32	s16, s7, s10
 8008dc2:	ee34 0a25 	vadd.f32	s0, s8, s11
 8008dc6:	ee78 4a07 	vadd.f32	s9, s16, s14
 8008dca:	ee74 5a65 	vsub.f32	s11, s8, s11
 8008dce:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8008dd2:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8008dd6:	ed45 4a02 	vstr	s9, [r5, #-8]
 8008dda:	edd1 4a01 	vldr	s9, [r1, #4]
 8008dde:	ed90 4a01 	vldr	s8, [r0, #4]
 8008de2:	ee70 4a24 	vadd.f32	s9, s0, s9
 8008de6:	ee75 aa06 	vadd.f32	s21, s10, s12
 8008dea:	ee74 4a84 	vadd.f32	s9, s9, s8
 8008dee:	ee35 aac7 	vsub.f32	s20, s11, s14
 8008df2:	ed45 4a01 	vstr	s9, [r5, #-4]
 8008df6:	edd6 1a00 	vldr	s3, [r6]
 8008dfa:	edd7 0a00 	vldr	s1, [r7]
 8008dfe:	ed92 4a02 	vldr	s8, [r2, #8]
 8008e02:	edd3 3a02 	vldr	s7, [r3, #8]
 8008e06:	ed93 2a01 	vldr	s4, [r3, #4]
 8008e0a:	ed16 1a01 	vldr	s2, [r6, #-4]
 8008e0e:	edd2 2a01 	vldr	s5, [r2, #4]
 8008e12:	ed57 9a01 	vldr	s19, [r7, #-4]
 8008e16:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8008e1a:	ee39 3a81 	vadd.f32	s6, s19, s2
 8008e1e:	ee74 8a84 	vadd.f32	s17, s9, s8
 8008e22:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8008e26:	ee78 8aa3 	vadd.f32	s17, s17, s7
 8008e2a:	ee7a aae6 	vsub.f32	s21, s21, s13
 8008e2e:	ee18 aa90 	vmov	sl, s17
 8008e32:	f847 a908 	str.w	sl, [r7], #-8
 8008e36:	edd2 8a01 	vldr	s17, [r2, #4]
 8008e3a:	ed93 9a01 	vldr	s18, [r3, #4]
 8008e3e:	ee73 8a28 	vadd.f32	s17, s6, s17
 8008e42:	ee3a aa27 	vadd.f32	s20, s20, s15
 8008e46:	ee78 8a89 	vadd.f32	s17, s17, s18
 8008e4a:	ee74 0a63 	vsub.f32	s1, s8, s7
 8008e4e:	edc7 8a01 	vstr	s17, [r7, #4]
 8008e52:	ed18 ba02 	vldr	s22, [r8, #-8]
 8008e56:	ed58 8a01 	vldr	s17, [r8, #-4]
 8008e5a:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8008e5e:	ee6a ba28 	vmul.f32	s23, s20, s17
 8008e62:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8008e66:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8008e6a:	ee31 9a20 	vadd.f32	s18, s2, s1
 8008e6e:	ee79 9a82 	vadd.f32	s19, s19, s4
 8008e72:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8008e76:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8008e7a:	ee69 baa8 	vmul.f32	s23, s19, s17
 8008e7e:	ee2a aa0b 	vmul.f32	s20, s20, s22
 8008e82:	ee69 9a8b 	vmul.f32	s19, s19, s22
 8008e86:	ee69 8a28 	vmul.f32	s17, s18, s17
 8008e8a:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8008e8e:	ee1c aa10 	vmov	sl, s24
 8008e92:	ee78 8aa9 	vadd.f32	s17, s17, s19
 8008e96:	f841 ab08 	str.w	sl, [r1], #8
 8008e9a:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8008e9e:	ee3b bacb 	vsub.f32	s22, s23, s22
 8008ea2:	ee34 4ac4 	vsub.f32	s8, s9, s8
 8008ea6:	ee33 3a62 	vsub.f32	s6, s6, s5
 8008eaa:	ed01 aa01 	vstr	s20, [r1, #-4]
 8008eae:	edc2 8a01 	vstr	s17, [r2, #4]
 8008eb2:	ed82 ba02 	vstr	s22, [r2, #8]
 8008eb6:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8008eba:	ee74 3a63 	vsub.f32	s7, s8, s7
 8008ebe:	ee38 8a47 	vsub.f32	s16, s16, s14
 8008ec2:	ed1c 4a03 	vldr	s8, [ip, #-12]
 8008ec6:	ee30 0a46 	vsub.f32	s0, s0, s12
 8008eca:	ee33 3a42 	vsub.f32	s6, s6, s4
 8008ece:	ee38 8a67 	vsub.f32	s16, s16, s15
 8008ed2:	ee30 0a66 	vsub.f32	s0, s0, s13
 8008ed6:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8008eda:	ee63 8a04 	vmul.f32	s17, s6, s8
 8008ede:	ee28 aa24 	vmul.f32	s20, s16, s9
 8008ee2:	ee60 9a04 	vmul.f32	s19, s0, s8
 8008ee6:	ee28 8a04 	vmul.f32	s16, s16, s8
 8008eea:	ee20 0a24 	vmul.f32	s0, s0, s9
 8008eee:	ee63 3a84 	vmul.f32	s7, s7, s8
 8008ef2:	ee39 4a68 	vsub.f32	s8, s18, s17
 8008ef6:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8008efa:	ee14 aa10 	vmov	sl, s8
 8008efe:	ee30 0a48 	vsub.f32	s0, s0, s16
 8008f02:	ee63 4a24 	vmul.f32	s9, s6, s9
 8008f06:	ed44 9a02 	vstr	s19, [r4, #-8]
 8008f0a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8008f0e:	ed04 0a01 	vstr	s0, [r4, #-4]
 8008f12:	f846 a908 	str.w	sl, [r6], #-8
 8008f16:	ee35 6a46 	vsub.f32	s12, s10, s12
 8008f1a:	ee35 7a87 	vadd.f32	s14, s11, s14
 8008f1e:	edc6 3a01 	vstr	s7, [r6, #4]
 8008f22:	ee76 6a26 	vadd.f32	s13, s12, s13
 8008f26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f2a:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 8008f2e:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 8008f32:	ee67 5a86 	vmul.f32	s11, s15, s12
 8008f36:	ee26 5a87 	vmul.f32	s10, s13, s14
 8008f3a:	ee72 2a62 	vsub.f32	s5, s4, s5
 8008f3e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008f42:	ee72 2ae1 	vsub.f32	s5, s5, s3
 8008f46:	ee75 5a25 	vadd.f32	s11, s10, s11
 8008f4a:	ee62 0a86 	vmul.f32	s1, s5, s12
 8008f4e:	ee66 6a86 	vmul.f32	s13, s13, s12
 8008f52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f56:	ee21 6a06 	vmul.f32	s12, s2, s12
 8008f5a:	ee62 2a87 	vmul.f32	s5, s5, s14
 8008f5e:	ee21 1a07 	vmul.f32	s2, s2, s14
 8008f62:	ee15 aa90 	vmov	sl, s11
 8008f66:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008f6a:	f840 ab08 	str.w	sl, [r0], #8
 8008f6e:	ee30 1ac1 	vsub.f32	s2, s1, s2
 8008f72:	ee76 2a22 	vadd.f32	s5, s12, s5
 8008f76:	f1b9 0901 	subs.w	r9, r9, #1
 8008f7a:	ed40 7a01 	vstr	s15, [r0, #-4]
 8008f7e:	f105 0508 	add.w	r5, r5, #8
 8008f82:	ed83 1a02 	vstr	s2, [r3, #8]
 8008f86:	edc3 2a01 	vstr	s5, [r3, #4]
 8008f8a:	f108 0808 	add.w	r8, r8, #8
 8008f8e:	f1a2 0208 	sub.w	r2, r2, #8
 8008f92:	f10c 0c10 	add.w	ip, ip, #16
 8008f96:	f104 0408 	add.w	r4, r4, #8
 8008f9a:	f10e 0e18 	add.w	lr, lr, #24
 8008f9e:	f1a3 0308 	sub.w	r3, r3, #8
 8008fa2:	f47f aefc 	bne.w	8008d9e <arm_cfft_radix8by4_f32+0x13e>
 8008fa6:	9908      	ldr	r1, [sp, #32]
 8008fa8:	9802      	ldr	r0, [sp, #8]
 8008faa:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8008fae:	00cb      	lsls	r3, r1, #3
 8008fb0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8008fb4:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8008fb8:	9102      	str	r1, [sp, #8]
 8008fba:	9905      	ldr	r1, [sp, #20]
 8008fbc:	4419      	add	r1, r3
 8008fbe:	9105      	str	r1, [sp, #20]
 8008fc0:	9904      	ldr	r1, [sp, #16]
 8008fc2:	4419      	add	r1, r3
 8008fc4:	9104      	str	r1, [sp, #16]
 8008fc6:	9906      	ldr	r1, [sp, #24]
 8008fc8:	449b      	add	fp, r3
 8008fca:	4419      	add	r1, r3
 8008fcc:	449a      	add	sl, r3
 8008fce:	9b03      	ldr	r3, [sp, #12]
 8008fd0:	9106      	str	r1, [sp, #24]
 8008fd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008fd6:	9303      	str	r3, [sp, #12]
 8008fd8:	9a05      	ldr	r2, [sp, #20]
 8008fda:	9806      	ldr	r0, [sp, #24]
 8008fdc:	ed92 4a00 	vldr	s8, [r2]
 8008fe0:	ed90 7a00 	vldr	s14, [r0]
 8008fe4:	ed9b 3a00 	vldr	s6, [fp]
 8008fe8:	edda 3a00 	vldr	s7, [sl]
 8008fec:	edd2 4a01 	vldr	s9, [r2, #4]
 8008ff0:	edd0 6a01 	vldr	s13, [r0, #4]
 8008ff4:	ed9a 2a01 	vldr	s4, [sl, #4]
 8008ff8:	eddb 7a01 	vldr	s15, [fp, #4]
 8008ffc:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8009000:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009002:	ee34 6a07 	vadd.f32	s12, s8, s14
 8009006:	ee74 5aa6 	vadd.f32	s11, s9, s13
 800900a:	ee36 5a03 	vadd.f32	s10, s12, s6
 800900e:	ee74 6ae6 	vsub.f32	s13, s9, s13
 8009012:	ee35 5a23 	vadd.f32	s10, s10, s7
 8009016:	ee34 7a47 	vsub.f32	s14, s8, s14
 800901a:	ed82 5a00 	vstr	s10, [r2]
 800901e:	ed9b 5a01 	vldr	s10, [fp, #4]
 8009022:	edda 4a01 	vldr	s9, [sl, #4]
 8009026:	ee35 5a85 	vadd.f32	s10, s11, s10
 800902a:	ee37 4a27 	vadd.f32	s8, s14, s15
 800902e:	ee35 5a24 	vadd.f32	s10, s10, s9
 8009032:	ee76 4ac3 	vsub.f32	s9, s13, s6
 8009036:	ed82 5a01 	vstr	s10, [r2, #4]
 800903a:	9a04      	ldr	r2, [sp, #16]
 800903c:	ee34 5aa3 	vadd.f32	s10, s9, s7
 8009040:	edd2 1a00 	vldr	s3, [r2]
 8009044:	edd2 2a01 	vldr	s5, [r2, #4]
 8009048:	9a02      	ldr	r2, [sp, #8]
 800904a:	ee34 4a42 	vsub.f32	s8, s8, s4
 800904e:	ee36 6a43 	vsub.f32	s12, s12, s6
 8009052:	ee64 4a21 	vmul.f32	s9, s8, s3
 8009056:	ee24 4a22 	vmul.f32	s8, s8, s5
 800905a:	ee65 2a22 	vmul.f32	s5, s10, s5
 800905e:	ee25 5a21 	vmul.f32	s10, s10, s3
 8009062:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8009066:	ee35 5a44 	vsub.f32	s10, s10, s8
 800906a:	ee75 5ae7 	vsub.f32	s11, s11, s15
 800906e:	edcb 2a00 	vstr	s5, [fp]
 8009072:	ed8b 5a01 	vstr	s10, [fp, #4]
 8009076:	ed92 4a01 	vldr	s8, [r2, #4]
 800907a:	ed92 5a00 	vldr	s10, [r2]
 800907e:	9a03      	ldr	r2, [sp, #12]
 8009080:	ee36 6a63 	vsub.f32	s12, s12, s7
 8009084:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8009088:	ee66 4a05 	vmul.f32	s9, s12, s10
 800908c:	ee25 5a85 	vmul.f32	s10, s11, s10
 8009090:	ee26 6a04 	vmul.f32	s12, s12, s8
 8009094:	ee65 5a84 	vmul.f32	s11, s11, s8
 8009098:	ee35 6a46 	vsub.f32	s12, s10, s12
 800909c:	ee74 5aa5 	vadd.f32	s11, s9, s11
 80090a0:	ee76 6a83 	vadd.f32	s13, s13, s6
 80090a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80090a8:	ed80 6a01 	vstr	s12, [r0, #4]
 80090ac:	edc0 5a00 	vstr	s11, [r0]
 80090b0:	edd2 5a01 	vldr	s11, [r2, #4]
 80090b4:	9807      	ldr	r0, [sp, #28]
 80090b6:	ee77 7a02 	vadd.f32	s15, s14, s4
 80090ba:	ee36 7ae3 	vsub.f32	s14, s13, s7
 80090be:	edd2 6a00 	vldr	s13, [r2]
 80090c2:	ee27 6aa6 	vmul.f32	s12, s15, s13
 80090c6:	ee67 6a26 	vmul.f32	s13, s14, s13
 80090ca:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80090ce:	ee27 7a25 	vmul.f32	s14, s14, s11
 80090d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80090d6:	ee36 7a07 	vadd.f32	s14, s12, s14
 80090da:	edca 7a01 	vstr	s15, [sl, #4]
 80090de:	ed8a 7a00 	vstr	s14, [sl]
 80090e2:	6872      	ldr	r2, [r6, #4]
 80090e4:	4621      	mov	r1, r4
 80090e6:	2304      	movs	r3, #4
 80090e8:	f000 f97a 	bl	80093e0 <arm_radix8_butterfly_f32>
 80090ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090ee:	6872      	ldr	r2, [r6, #4]
 80090f0:	4621      	mov	r1, r4
 80090f2:	2304      	movs	r3, #4
 80090f4:	f000 f974 	bl	80093e0 <arm_radix8_butterfly_f32>
 80090f8:	980a      	ldr	r0, [sp, #40]	; 0x28
 80090fa:	6872      	ldr	r2, [r6, #4]
 80090fc:	4621      	mov	r1, r4
 80090fe:	2304      	movs	r3, #4
 8009100:	f000 f96e 	bl	80093e0 <arm_radix8_butterfly_f32>
 8009104:	6872      	ldr	r2, [r6, #4]
 8009106:	9801      	ldr	r0, [sp, #4]
 8009108:	4621      	mov	r1, r4
 800910a:	2304      	movs	r3, #4
 800910c:	b00f      	add	sp, #60	; 0x3c
 800910e:	ecbd 8b0a 	vpop	{d8-d12}
 8009112:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009116:	f000 b963 	b.w	80093e0 <arm_radix8_butterfly_f32>
 800911a:	bf00      	nop

0800911c <arm_cfft_f32>:
 800911c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009120:	2a01      	cmp	r2, #1
 8009122:	4606      	mov	r6, r0
 8009124:	4617      	mov	r7, r2
 8009126:	460c      	mov	r4, r1
 8009128:	4698      	mov	r8, r3
 800912a:	8805      	ldrh	r5, [r0, #0]
 800912c:	d054      	beq.n	80091d8 <arm_cfft_f32+0xbc>
 800912e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8009132:	d04c      	beq.n	80091ce <arm_cfft_f32+0xb2>
 8009134:	d916      	bls.n	8009164 <arm_cfft_f32+0x48>
 8009136:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800913a:	d01a      	beq.n	8009172 <arm_cfft_f32+0x56>
 800913c:	d95c      	bls.n	80091f8 <arm_cfft_f32+0xdc>
 800913e:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8009142:	d044      	beq.n	80091ce <arm_cfft_f32+0xb2>
 8009144:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8009148:	d105      	bne.n	8009156 <arm_cfft_f32+0x3a>
 800914a:	2301      	movs	r3, #1
 800914c:	6872      	ldr	r2, [r6, #4]
 800914e:	4629      	mov	r1, r5
 8009150:	4620      	mov	r0, r4
 8009152:	f000 f945 	bl	80093e0 <arm_radix8_butterfly_f32>
 8009156:	f1b8 0f00 	cmp.w	r8, #0
 800915a:	d111      	bne.n	8009180 <arm_cfft_f32+0x64>
 800915c:	2f01      	cmp	r7, #1
 800915e:	d016      	beq.n	800918e <arm_cfft_f32+0x72>
 8009160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009164:	2d20      	cmp	r5, #32
 8009166:	d032      	beq.n	80091ce <arm_cfft_f32+0xb2>
 8009168:	d94a      	bls.n	8009200 <arm_cfft_f32+0xe4>
 800916a:	2d40      	cmp	r5, #64	; 0x40
 800916c:	d0ed      	beq.n	800914a <arm_cfft_f32+0x2e>
 800916e:	2d80      	cmp	r5, #128	; 0x80
 8009170:	d1f1      	bne.n	8009156 <arm_cfft_f32+0x3a>
 8009172:	4621      	mov	r1, r4
 8009174:	4630      	mov	r0, r6
 8009176:	f7ff fca3 	bl	8008ac0 <arm_cfft_radix8by2_f32>
 800917a:	f1b8 0f00 	cmp.w	r8, #0
 800917e:	d0ed      	beq.n	800915c <arm_cfft_f32+0x40>
 8009180:	68b2      	ldr	r2, [r6, #8]
 8009182:	89b1      	ldrh	r1, [r6, #12]
 8009184:	4620      	mov	r0, r4
 8009186:	f7f7 f82b 	bl	80001e0 <arm_bitreversal_32>
 800918a:	2f01      	cmp	r7, #1
 800918c:	d1e8      	bne.n	8009160 <arm_cfft_f32+0x44>
 800918e:	ee07 5a90 	vmov	s15, r5
 8009192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800919a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800919e:	2d00      	cmp	r5, #0
 80091a0:	d0de      	beq.n	8009160 <arm_cfft_f32+0x44>
 80091a2:	f104 0108 	add.w	r1, r4, #8
 80091a6:	2300      	movs	r3, #0
 80091a8:	3301      	adds	r3, #1
 80091aa:	429d      	cmp	r5, r3
 80091ac:	f101 0108 	add.w	r1, r1, #8
 80091b0:	ed11 7a04 	vldr	s14, [r1, #-16]
 80091b4:	ed51 7a03 	vldr	s15, [r1, #-12]
 80091b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80091bc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80091c0:	ed01 7a04 	vstr	s14, [r1, #-16]
 80091c4:	ed41 7a03 	vstr	s15, [r1, #-12]
 80091c8:	d1ee      	bne.n	80091a8 <arm_cfft_f32+0x8c>
 80091ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091ce:	4621      	mov	r1, r4
 80091d0:	4630      	mov	r0, r6
 80091d2:	f7ff fd45 	bl	8008c60 <arm_cfft_radix8by4_f32>
 80091d6:	e7be      	b.n	8009156 <arm_cfft_f32+0x3a>
 80091d8:	b1ad      	cbz	r5, 8009206 <arm_cfft_f32+0xea>
 80091da:	f101 030c 	add.w	r3, r1, #12
 80091de:	2200      	movs	r2, #0
 80091e0:	ed53 7a02 	vldr	s15, [r3, #-8]
 80091e4:	3201      	adds	r2, #1
 80091e6:	eef1 7a67 	vneg.f32	s15, s15
 80091ea:	4295      	cmp	r5, r2
 80091ec:	ed43 7a02 	vstr	s15, [r3, #-8]
 80091f0:	f103 0308 	add.w	r3, r3, #8
 80091f4:	d1f4      	bne.n	80091e0 <arm_cfft_f32+0xc4>
 80091f6:	e79a      	b.n	800912e <arm_cfft_f32+0x12>
 80091f8:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 80091fc:	d0a5      	beq.n	800914a <arm_cfft_f32+0x2e>
 80091fe:	e7aa      	b.n	8009156 <arm_cfft_f32+0x3a>
 8009200:	2d10      	cmp	r5, #16
 8009202:	d0b6      	beq.n	8009172 <arm_cfft_f32+0x56>
 8009204:	e7a7      	b.n	8009156 <arm_cfft_f32+0x3a>
 8009206:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 800920a:	d894      	bhi.n	8009136 <arm_cfft_f32+0x1a>
 800920c:	e7aa      	b.n	8009164 <arm_cfft_f32+0x48>
 800920e:	bf00      	nop

08009210 <arm_cmplx_mag_f32>:
 8009210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009214:	ea5f 0892 	movs.w	r8, r2, lsr #2
 8009218:	b084      	sub	sp, #16
 800921a:	d07f      	beq.n	800931c <arm_cmplx_mag_f32+0x10c>
 800921c:	2700      	movs	r7, #0
 800921e:	f100 0420 	add.w	r4, r0, #32
 8009222:	f101 0510 	add.w	r5, r1, #16
 8009226:	4646      	mov	r6, r8
 8009228:	e05a      	b.n	80092e0 <arm_cmplx_mag_f32+0xd0>
 800922a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800922e:	eeb4 0a40 	vcmp.f32	s0, s0
 8009232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009236:	f040 80a4 	bne.w	8009382 <arm_cmplx_mag_f32+0x172>
 800923a:	ed05 0a04 	vstr	s0, [r5, #-16]
 800923e:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 8009242:	ed14 0a05 	vldr	s0, [r4, #-20]	; 0xffffffec
 8009246:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800924a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800924e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009252:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800925a:	f2c0 808f 	blt.w	800937c <arm_cmplx_mag_f32+0x16c>
 800925e:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8009262:	eeb4 0a40 	vcmp.f32	s0, s0
 8009266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800926a:	f040 80af 	bne.w	80093cc <arm_cmplx_mag_f32+0x1bc>
 800926e:	ed05 0a03 	vstr	s0, [r5, #-12]
 8009272:	ed54 7a04 	vldr	s15, [r4, #-16]
 8009276:	ed14 0a03 	vldr	s0, [r4, #-12]
 800927a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800927e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009282:	ee77 7a80 	vadd.f32	s15, s15, s0
 8009286:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800928a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800928e:	db72      	blt.n	8009376 <arm_cmplx_mag_f32+0x166>
 8009290:	eeb1 0ae7 	vsqrt.f32	s0, s15
 8009294:	eeb4 0a40 	vcmp.f32	s0, s0
 8009298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800929c:	f040 808c 	bne.w	80093b8 <arm_cmplx_mag_f32+0x1a8>
 80092a0:	ed05 0a02 	vstr	s0, [r5, #-8]
 80092a4:	ed54 7a02 	vldr	s15, [r4, #-8]
 80092a8:	ed14 0a01 	vldr	s0, [r4, #-4]
 80092ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80092b0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80092b4:	ee77 7a80 	vadd.f32	s15, s15, s0
 80092b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c0:	db20      	blt.n	8009304 <arm_cmplx_mag_f32+0xf4>
 80092c2:	eeb1 0ae7 	vsqrt.f32	s0, s15
 80092c6:	eeb4 0a40 	vcmp.f32	s0, s0
 80092ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092ce:	d169      	bne.n	80093a4 <arm_cmplx_mag_f32+0x194>
 80092d0:	3e01      	subs	r6, #1
 80092d2:	ed05 0a01 	vstr	s0, [r5, #-4]
 80092d6:	f104 0420 	add.w	r4, r4, #32
 80092da:	f105 0510 	add.w	r5, r5, #16
 80092de:	d019      	beq.n	8009314 <arm_cmplx_mag_f32+0x104>
 80092e0:	ed54 7a08 	vldr	s15, [r4, #-32]	; 0xffffffe0
 80092e4:	ed14 0a07 	vldr	s0, [r4, #-28]	; 0xffffffe4
 80092e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80092ec:	ee20 0a00 	vmul.f32	s0, s0, s0
 80092f0:	ee77 7a80 	vadd.f32	s15, s15, s0
 80092f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80092f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092fc:	da95      	bge.n	800922a <arm_cmplx_mag_f32+0x1a>
 80092fe:	f845 7c10 	str.w	r7, [r5, #-16]
 8009302:	e79c      	b.n	800923e <arm_cmplx_mag_f32+0x2e>
 8009304:	3e01      	subs	r6, #1
 8009306:	f845 7c04 	str.w	r7, [r5, #-4]
 800930a:	f104 0420 	add.w	r4, r4, #32
 800930e:	f105 0510 	add.w	r5, r5, #16
 8009312:	d1e5      	bne.n	80092e0 <arm_cmplx_mag_f32+0xd0>
 8009314:	eb00 1048 	add.w	r0, r0, r8, lsl #5
 8009318:	eb01 1108 	add.w	r1, r1, r8, lsl #4
 800931c:	f012 0503 	ands.w	r5, r2, #3
 8009320:	d026      	beq.n	8009370 <arm_cmplx_mag_f32+0x160>
 8009322:	2600      	movs	r6, #0
 8009324:	f100 0408 	add.w	r4, r0, #8
 8009328:	e00c      	b.n	8009344 <arm_cmplx_mag_f32+0x134>
 800932a:	eeb1 0ae7 	vsqrt.f32	s0, s15
 800932e:	eeb4 0a40 	vcmp.f32	s0, s0
 8009332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009336:	d12e      	bne.n	8009396 <arm_cmplx_mag_f32+0x186>
 8009338:	3d01      	subs	r5, #1
 800933a:	ed01 0a01 	vstr	s0, [r1, #-4]
 800933e:	f104 0408 	add.w	r4, r4, #8
 8009342:	d015      	beq.n	8009370 <arm_cmplx_mag_f32+0x160>
 8009344:	ed54 7a02 	vldr	s15, [r4, #-8]
 8009348:	ed14 0a01 	vldr	s0, [r4, #-4]
 800934c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009350:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009354:	3104      	adds	r1, #4
 8009356:	ee77 7a80 	vadd.f32	s15, s15, s0
 800935a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800935e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009362:	dae2      	bge.n	800932a <arm_cmplx_mag_f32+0x11a>
 8009364:	3d01      	subs	r5, #1
 8009366:	f841 6c04 	str.w	r6, [r1, #-4]
 800936a:	f104 0408 	add.w	r4, r4, #8
 800936e:	d1e9      	bne.n	8009344 <arm_cmplx_mag_f32+0x134>
 8009370:	b004      	add	sp, #16
 8009372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009376:	f845 7c08 	str.w	r7, [r5, #-8]
 800937a:	e793      	b.n	80092a4 <arm_cmplx_mag_f32+0x94>
 800937c:	f845 7c0c 	str.w	r7, [r5, #-12]
 8009380:	e777      	b.n	8009272 <arm_cmplx_mag_f32+0x62>
 8009382:	eeb0 0a67 	vmov.f32	s0, s15
 8009386:	9203      	str	r2, [sp, #12]
 8009388:	9102      	str	r1, [sp, #8]
 800938a:	9001      	str	r0, [sp, #4]
 800938c:	f000 fb1a 	bl	80099c4 <sqrtf>
 8009390:	a801      	add	r0, sp, #4
 8009392:	c807      	ldmia	r0, {r0, r1, r2}
 8009394:	e751      	b.n	800923a <arm_cmplx_mag_f32+0x2a>
 8009396:	eeb0 0a67 	vmov.f32	s0, s15
 800939a:	9101      	str	r1, [sp, #4]
 800939c:	f000 fb12 	bl	80099c4 <sqrtf>
 80093a0:	9901      	ldr	r1, [sp, #4]
 80093a2:	e7c9      	b.n	8009338 <arm_cmplx_mag_f32+0x128>
 80093a4:	eeb0 0a67 	vmov.f32	s0, s15
 80093a8:	9203      	str	r2, [sp, #12]
 80093aa:	9102      	str	r1, [sp, #8]
 80093ac:	9001      	str	r0, [sp, #4]
 80093ae:	f000 fb09 	bl	80099c4 <sqrtf>
 80093b2:	a801      	add	r0, sp, #4
 80093b4:	c807      	ldmia	r0, {r0, r1, r2}
 80093b6:	e78b      	b.n	80092d0 <arm_cmplx_mag_f32+0xc0>
 80093b8:	eeb0 0a67 	vmov.f32	s0, s15
 80093bc:	9203      	str	r2, [sp, #12]
 80093be:	9102      	str	r1, [sp, #8]
 80093c0:	9001      	str	r0, [sp, #4]
 80093c2:	f000 faff 	bl	80099c4 <sqrtf>
 80093c6:	a801      	add	r0, sp, #4
 80093c8:	c807      	ldmia	r0, {r0, r1, r2}
 80093ca:	e769      	b.n	80092a0 <arm_cmplx_mag_f32+0x90>
 80093cc:	eeb0 0a67 	vmov.f32	s0, s15
 80093d0:	9203      	str	r2, [sp, #12]
 80093d2:	9102      	str	r1, [sp, #8]
 80093d4:	9001      	str	r0, [sp, #4]
 80093d6:	f000 faf5 	bl	80099c4 <sqrtf>
 80093da:	a801      	add	r0, sp, #4
 80093dc:	c807      	ldmia	r0, {r0, r1, r2}
 80093de:	e746      	b.n	800926e <arm_cmplx_mag_f32+0x5e>

080093e0 <arm_radix8_butterfly_f32>:
 80093e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	ed2d 8b10 	vpush	{d8-d15}
 80093e8:	461c      	mov	r4, r3
 80093ea:	b09d      	sub	sp, #116	; 0x74
 80093ec:	4603      	mov	r3, r0
 80093ee:	3304      	adds	r3, #4
 80093f0:	ed9f bac4 	vldr	s22, [pc, #784]	; 8009704 <arm_radix8_butterfly_f32+0x324>
 80093f4:	9019      	str	r0, [sp, #100]	; 0x64
 80093f6:	921a      	str	r2, [sp, #104]	; 0x68
 80093f8:	468b      	mov	fp, r1
 80093fa:	931b      	str	r3, [sp, #108]	; 0x6c
 80093fc:	468a      	mov	sl, r1
 80093fe:	46a1      	mov	r9, r4
 8009400:	4607      	mov	r7, r0
 8009402:	ea4f 03db 	mov.w	r3, fp, lsr #3
 8009406:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800940a:	eb03 0508 	add.w	r5, r3, r8
 800940e:	195c      	adds	r4, r3, r5
 8009410:	00de      	lsls	r6, r3, #3
 8009412:	191a      	adds	r2, r3, r4
 8009414:	9600      	str	r6, [sp, #0]
 8009416:	1898      	adds	r0, r3, r2
 8009418:	4619      	mov	r1, r3
 800941a:	9e00      	ldr	r6, [sp, #0]
 800941c:	9311      	str	r3, [sp, #68]	; 0x44
 800941e:	4401      	add	r1, r0
 8009420:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8009424:	eb07 01c1 	add.w	r1, r7, r1, lsl #3
 8009428:	19be      	adds	r6, r7, r6
 800942a:	eb07 05c5 	add.w	r5, r7, r5, lsl #3
 800942e:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
 8009432:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
 8009436:	9f00      	ldr	r7, [sp, #0]
 8009438:	011b      	lsls	r3, r3, #4
 800943a:	eb06 0e07 	add.w	lr, r6, r7
 800943e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8009440:	9302      	str	r3, [sp, #8]
 8009442:	3204      	adds	r2, #4
 8009444:	3104      	adds	r1, #4
 8009446:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800944a:	f04f 0c00 	mov.w	ip, #0
 800944e:	edde 7a00 	vldr	s15, [lr]
 8009452:	edd6 6a00 	vldr	s13, [r6]
 8009456:	ed95 2a00 	vldr	s4, [r5]
 800945a:	ed17 aa01 	vldr	s20, [r7, #-4]
 800945e:	edd4 4a00 	vldr	s9, [r4]
 8009462:	ed90 5a00 	vldr	s10, [r0]
 8009466:	ed12 7a01 	vldr	s14, [r2, #-4]
 800946a:	ed51 0a01 	vldr	s1, [r1, #-4]
 800946e:	ee77 8a85 	vadd.f32	s17, s15, s10
 8009472:	ee76 3a87 	vadd.f32	s7, s13, s14
 8009476:	ee32 4a20 	vadd.f32	s8, s4, s1
 800947a:	ee3a 3a24 	vadd.f32	s6, s20, s9
 800947e:	ee33 6a84 	vadd.f32	s12, s7, s8
 8009482:	ee73 5a28 	vadd.f32	s11, s6, s17
 8009486:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800948a:	ee75 6a86 	vadd.f32	s13, s11, s12
 800948e:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8009492:	ed47 6a01 	vstr	s13, [r7, #-4]
 8009496:	edc4 5a00 	vstr	s11, [r4]
 800949a:	ed92 9a00 	vldr	s18, [r2]
 800949e:	ed95 1a01 	vldr	s2, [r5, #4]
 80094a2:	edd6 5a01 	vldr	s11, [r6, #4]
 80094a6:	ed91 6a00 	vldr	s12, [r1]
 80094aa:	edd7 2a00 	vldr	s5, [r7]
 80094ae:	edd4 1a01 	vldr	s3, [r4, #4]
 80094b2:	edde 6a01 	vldr	s13, [lr, #4]
 80094b6:	edd0 9a01 	vldr	s19, [r0, #4]
 80094ba:	ee72 0a60 	vsub.f32	s1, s4, s1
 80094be:	ee71 aa46 	vsub.f32	s21, s2, s12
 80094c2:	ee35 2ac9 	vsub.f32	s4, s11, s18
 80094c6:	ee37 0a60 	vsub.f32	s0, s14, s1
 80094ca:	ee32 8a2a 	vadd.f32	s16, s4, s21
 80094ce:	ee37 7a20 	vadd.f32	s14, s14, s1
 80094d2:	ee32 2a6a 	vsub.f32	s4, s4, s21
 80094d6:	ee37 5ac5 	vsub.f32	s10, s15, s10
 80094da:	ee75 5a89 	vadd.f32	s11, s11, s18
 80094de:	ee60 0a0b 	vmul.f32	s1, s0, s22
 80094e2:	ee7a 4a64 	vsub.f32	s9, s20, s9
 80094e6:	ee31 6a06 	vadd.f32	s12, s2, s12
 80094ea:	ee36 9aa9 	vadd.f32	s18, s13, s19
 80094ee:	ee32 1aa1 	vadd.f32	s2, s5, s3
 80094f2:	ee76 6ae9 	vsub.f32	s13, s13, s19
 80094f6:	ee72 1ae1 	vsub.f32	s3, s5, s3
 80094fa:	ee28 8a0b 	vmul.f32	s16, s16, s22
 80094fe:	ee62 2a0b 	vmul.f32	s5, s4, s22
 8009502:	ee67 7a0b 	vmul.f32	s15, s14, s22
 8009506:	ee33 3a68 	vsub.f32	s6, s6, s17
 800950a:	ee36 0a88 	vadd.f32	s0, s13, s16
 800950e:	ee75 8a86 	vadd.f32	s17, s11, s12
 8009512:	ee36 7ac8 	vsub.f32	s14, s13, s16
 8009516:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800951a:	ee74 6ae0 	vsub.f32	s13, s9, s1
 800951e:	ee74 3aa0 	vadd.f32	s7, s9, s1
 8009522:	ee35 6ac6 	vsub.f32	s12, s11, s12
 8009526:	ee75 4a27 	vadd.f32	s9, s10, s15
 800952a:	ee71 5a49 	vsub.f32	s11, s2, s18
 800952e:	ee31 2a09 	vadd.f32	s4, s2, s18
 8009532:	ee75 7a67 	vsub.f32	s15, s10, s15
 8009536:	ee31 1aa2 	vadd.f32	s2, s3, s5
 800953a:	ee71 2ae2 	vsub.f32	s5, s3, s5
 800953e:	ee73 0a06 	vadd.f32	s1, s6, s12
 8009542:	ee75 1ac4 	vsub.f32	s3, s11, s8
 8009546:	ee36 5a87 	vadd.f32	s10, s13, s14
 800954a:	ee32 8a28 	vadd.f32	s16, s4, s17
 800954e:	ee33 6a46 	vsub.f32	s12, s6, s12
 8009552:	ee34 4a25 	vadd.f32	s8, s8, s11
 8009556:	ee33 3a80 	vadd.f32	s6, s7, s0
 800955a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800955e:	ee71 5a64 	vsub.f32	s11, s2, s9
 8009562:	ee72 6ae7 	vsub.f32	s13, s5, s15
 8009566:	ee32 2a68 	vsub.f32	s4, s4, s17
 800956a:	ee73 3ac0 	vsub.f32	s7, s7, s0
 800956e:	ee74 4a81 	vadd.f32	s9, s9, s2
 8009572:	ee77 7aa2 	vadd.f32	s15, s15, s5
 8009576:	44dc      	add	ip, fp
 8009578:	45e2      	cmp	sl, ip
 800957a:	ed87 8a00 	vstr	s16, [r7]
 800957e:	ed84 2a01 	vstr	s4, [r4, #4]
 8009582:	441f      	add	r7, r3
 8009584:	edce 0a00 	vstr	s1, [lr]
 8009588:	441c      	add	r4, r3
 800958a:	ed80 6a00 	vstr	s12, [r0]
 800958e:	edce 1a01 	vstr	s3, [lr, #4]
 8009592:	ed80 4a01 	vstr	s8, [r0, #4]
 8009596:	449e      	add	lr, r3
 8009598:	ed86 3a00 	vstr	s6, [r6]
 800959c:	4418      	add	r0, r3
 800959e:	ed41 3a01 	vstr	s7, [r1, #-4]
 80095a2:	ed02 5a01 	vstr	s10, [r2, #-4]
 80095a6:	ed85 7a00 	vstr	s14, [r5]
 80095aa:	edc6 5a01 	vstr	s11, [r6, #4]
 80095ae:	edc1 4a00 	vstr	s9, [r1]
 80095b2:	441e      	add	r6, r3
 80095b4:	edc2 6a00 	vstr	s13, [r2]
 80095b8:	4419      	add	r1, r3
 80095ba:	edc5 7a01 	vstr	s15, [r5, #4]
 80095be:	441a      	add	r2, r3
 80095c0:	441d      	add	r5, r3
 80095c2:	f63f af44 	bhi.w	800944e <arm_radix8_butterfly_f32+0x6e>
 80095c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80095c8:	2a07      	cmp	r2, #7
 80095ca:	f240 81f5 	bls.w	80099b8 <arm_radix8_butterfly_f32+0x5d8>
 80095ce:	f108 0101 	add.w	r1, r8, #1
 80095d2:	188f      	adds	r7, r1, r2
 80095d4:	eb09 0849 	add.w	r8, r9, r9, lsl #1
 80095d8:	19d6      	adds	r6, r2, r7
 80095da:	eb08 0c09 	add.w	ip, r8, r9
 80095de:	1994      	adds	r4, r2, r6
 80095e0:	eb0c 0e09 	add.w	lr, ip, r9
 80095e4:	4610      	mov	r0, r2
 80095e6:	9701      	str	r7, [sp, #4]
 80095e8:	4420      	add	r0, r4
 80095ea:	eb0e 0709 	add.w	r7, lr, r9
 80095ee:	1815      	adds	r5, r2, r0
 80095f0:	eb07 0209 	add.w	r2, r7, r9
 80095f4:	9203      	str	r2, [sp, #12]
 80095f6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80095f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80095fc:	9117      	str	r1, [sp, #92]	; 0x5c
 80095fe:	440a      	add	r2, r1
 8009600:	9900      	ldr	r1, [sp, #0]
 8009602:	3108      	adds	r1, #8
 8009604:	9100      	str	r1, [sp, #0]
 8009606:	9902      	ldr	r1, [sp, #8]
 8009608:	3108      	adds	r1, #8
 800960a:	9102      	str	r1, [sp, #8]
 800960c:	9919      	ldr	r1, [sp, #100]	; 0x64
 800960e:	00ff      	lsls	r7, r7, #3
 8009610:	9715      	str	r7, [sp, #84]	; 0x54
 8009612:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8009616:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800961a:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800961e:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 8009620:	9903      	ldr	r1, [sp, #12]
 8009622:	19d7      	adds	r7, r2, r7
 8009624:	00c9      	lsls	r1, r1, #3
 8009626:	9114      	str	r1, [sp, #80]	; 0x50
 8009628:	9710      	str	r7, [sp, #64]	; 0x40
 800962a:	9919      	ldr	r1, [sp, #100]	; 0x64
 800962c:	9f00      	ldr	r7, [sp, #0]
 800962e:	19cf      	adds	r7, r1, r7
 8009630:	970d      	str	r7, [sp, #52]	; 0x34
 8009632:	9f02      	ldr	r7, [sp, #8]
 8009634:	19cf      	adds	r7, r1, r7
 8009636:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 800963a:	970c      	str	r7, [sp, #48]	; 0x30
 800963c:	9f01      	ldr	r7, [sp, #4]
 800963e:	f8cd e058 	str.w	lr, [sp, #88]	; 0x58
 8009642:	3504      	adds	r5, #4
 8009644:	3004      	adds	r0, #4
 8009646:	eb01 0ec7 	add.w	lr, r1, r7, lsl #3
 800964a:	9508      	str	r5, [sp, #32]
 800964c:	9009      	str	r0, [sp, #36]	; 0x24
 800964e:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8009650:	981a      	ldr	r0, [sp, #104]	; 0x68
 8009652:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8009656:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 800965a:	eb01 0ec6 	add.w	lr, r1, r6, lsl #3
 800965e:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8009660:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8009664:	1945      	adds	r5, r0, r5
 8009666:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800966a:	460f      	mov	r7, r1
 800966c:	3404      	adds	r4, #4
 800966e:	4641      	mov	r1, r8
 8009670:	1841      	adds	r1, r0, r1
 8009672:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
 8009676:	940a      	str	r4, [sp, #40]	; 0x28
 8009678:	eb00 0c06 	add.w	ip, r0, r6
 800967c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8009680:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009682:	9506      	str	r5, [sp, #24]
 8009684:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8009686:	9105      	str	r1, [sp, #20]
 8009688:	4639      	mov	r1, r7
 800968a:	1905      	adds	r5, r0, r4
 800968c:	3108      	adds	r1, #8
 800968e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009690:	9507      	str	r5, [sp, #28]
 8009692:	910f      	str	r1, [sp, #60]	; 0x3c
 8009694:	ea4f 1509 	mov.w	r5, r9, lsl #4
 8009698:	2101      	movs	r1, #1
 800969a:	eb00 0e06 	add.w	lr, r0, r6
 800969e:	9518      	str	r5, [sp, #96]	; 0x60
 80096a0:	9404      	str	r4, [sp, #16]
 80096a2:	9103      	str	r1, [sp, #12]
 80096a4:	4620      	mov	r0, r4
 80096a6:	4689      	mov	r9, r1
 80096a8:	9e06      	ldr	r6, [sp, #24]
 80096aa:	ed90 fa00 	vldr	s30, [r0]
 80096ae:	edd6 7a01 	vldr	s15, [r6, #4]
 80096b2:	edd0 ba01 	vldr	s23, [r0, #4]
 80096b6:	edcd 7a00 	vstr	s15, [sp]
 80096ba:	a80d      	add	r0, sp, #52	; 0x34
 80096bc:	edde 7a01 	vldr	s15, [lr, #4]
 80096c0:	9c05      	ldr	r4, [sp, #20]
 80096c2:	9d07      	ldr	r5, [sp, #28]
 80096c4:	edd2 fa00 	vldr	s31, [r2]
 80096c8:	ed92 ca01 	vldr	s24, [r2, #4]
 80096cc:	edcd 7a01 	vstr	s15, [sp, #4]
 80096d0:	c807      	ldmia	r0, {r0, r1, r2}
 80096d2:	eddc 7a01 	vldr	s15, [ip, #4]
 80096d6:	edd4 ea00 	vldr	s29, [r4]
 80096da:	ed95 ea00 	vldr	s28, [r5]
 80096de:	edd6 da00 	vldr	s27, [r6]
 80096e2:	edd4 aa01 	vldr	s21, [r4, #4]
 80096e6:	ed95 aa01 	vldr	s20, [r5, #4]
 80096ea:	ed9e da00 	vldr	s26, [lr]
 80096ee:	eddc ca00 	vldr	s25, [ip]
 80096f2:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80096f6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80096f8:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80096fa:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80096fc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80096fe:	edcd 7a02 	vstr	s15, [sp, #8]
 8009702:	e001      	b.n	8009708 <arm_radix8_butterfly_f32+0x328>
 8009704:	3f3504f3 	.word	0x3f3504f3
 8009708:	ed16 6a01 	vldr	s12, [r6, #-4]
 800970c:	ed91 5a00 	vldr	s10, [r1]
 8009710:	ed57 9a01 	vldr	s19, [r7, #-4]
 8009714:	edd5 7a00 	vldr	s15, [r5]
 8009718:	ed18 7a01 	vldr	s14, [r8, #-4]
 800971c:	edd2 3a00 	vldr	s7, [r2]
 8009720:	ed94 3a00 	vldr	s6, [r4]
 8009724:	ed90 2a00 	vldr	s4, [r0]
 8009728:	ed92 0a01 	vldr	s0, [r2, #4]
 800972c:	ee33 8a85 	vadd.f32	s16, s7, s10
 8009730:	ee32 1a06 	vadd.f32	s2, s4, s12
 8009734:	ee33 4a29 	vadd.f32	s8, s6, s19
 8009738:	ee77 4a87 	vadd.f32	s9, s15, s14
 800973c:	ee78 1a04 	vadd.f32	s3, s16, s8
 8009740:	ee71 6a24 	vadd.f32	s13, s2, s9
 8009744:	ee32 2a46 	vsub.f32	s4, s4, s12
 8009748:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800974c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009750:	ed82 6a00 	vstr	s12, [r2]
 8009754:	edd5 8a01 	vldr	s17, [r5, #4]
 8009758:	ed90 9a01 	vldr	s18, [r0, #4]
 800975c:	edd6 2a00 	vldr	s5, [r6]
 8009760:	ed98 7a00 	vldr	s14, [r8]
 8009764:	edd4 0a01 	vldr	s1, [r4, #4]
 8009768:	ed91 6a01 	vldr	s12, [r1, #4]
 800976c:	edd7 5a00 	vldr	s11, [r7]
 8009770:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8009774:	ee33 3a69 	vsub.f32	s6, s6, s19
 8009778:	ee39 5a62 	vsub.f32	s10, s18, s5
 800977c:	ee78 9ac7 	vsub.f32	s19, s17, s14
 8009780:	ee38 4a44 	vsub.f32	s8, s16, s8
 8009784:	ee38 7a87 	vadd.f32	s14, s17, s14
 8009788:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800978c:	ee79 2a22 	vadd.f32	s5, s18, s5
 8009790:	ee75 8a69 	vsub.f32	s17, s10, s19
 8009794:	ee32 9a27 	vadd.f32	s18, s4, s15
 8009798:	ee35 5a29 	vadd.f32	s10, s10, s19
 800979c:	ee72 7a67 	vsub.f32	s15, s4, s15
 80097a0:	ee30 2a06 	vadd.f32	s4, s0, s12
 80097a4:	ee69 9a0b 	vmul.f32	s19, s18, s22
 80097a8:	ee70 5ae5 	vsub.f32	s11, s1, s11
 80097ac:	ee32 9a08 	vadd.f32	s18, s4, s16
 80097b0:	ee68 8a8b 	vmul.f32	s17, s17, s22
 80097b4:	ee32 2a48 	vsub.f32	s4, s4, s16
 80097b8:	ee71 4a64 	vsub.f32	s9, s2, s9
 80097bc:	ee25 5a0b 	vmul.f32	s10, s10, s22
 80097c0:	ee32 1a87 	vadd.f32	s2, s5, s14
 80097c4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80097c8:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80097cc:	ee30 6a46 	vsub.f32	s12, s0, s12
 80097d0:	ee73 0a29 	vadd.f32	s1, s6, s19
 80097d4:	ee36 0a28 	vadd.f32	s0, s12, s17
 80097d8:	ee33 3a69 	vsub.f32	s6, s6, s19
 80097dc:	ee32 7a64 	vsub.f32	s14, s4, s9
 80097e0:	ee73 9aa7 	vadd.f32	s19, s7, s15
 80097e4:	ee36 6a68 	vsub.f32	s12, s12, s17
 80097e8:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80097ec:	ee75 8a85 	vadd.f32	s17, s11, s10
 80097f0:	ee74 3a22 	vadd.f32	s7, s8, s5
 80097f4:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80097f8:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80097fc:	ee79 1a41 	vsub.f32	s3, s18, s2
 8009800:	ee39 8aa8 	vadd.f32	s16, s19, s17
 8009804:	ee76 5a43 	vsub.f32	s11, s12, s6
 8009808:	ee74 2a62 	vsub.f32	s5, s8, s5
 800980c:	ee74 4a82 	vadd.f32	s9, s9, s4
 8009810:	ee30 4a60 	vsub.f32	s8, s0, s1
 8009814:	ee79 8ae8 	vsub.f32	s17, s19, s17
 8009818:	ee30 0a80 	vadd.f32	s0, s1, s0
 800981c:	ee77 9a85 	vadd.f32	s19, s15, s10
 8009820:	ee33 6a06 	vadd.f32	s12, s6, s12
 8009824:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8009828:	ee2e 2a21 	vmul.f32	s4, s28, s3
 800982c:	ee2e 5a26 	vmul.f32	s10, s28, s13
 8009830:	ee6f 0a23 	vmul.f32	s1, s30, s7
 8009834:	ee2a 3a21 	vmul.f32	s6, s20, s3
 8009838:	ee39 1a01 	vadd.f32	s2, s18, s2
 800983c:	ee6a 6a26 	vmul.f32	s13, s20, s13
 8009840:	ee2b 9a87 	vmul.f32	s18, s23, s14
 8009844:	ee6b 3aa3 	vmul.f32	s7, s23, s7
 8009848:	ee2f 7a07 	vmul.f32	s14, s30, s14
 800984c:	ee6f 1a84 	vmul.f32	s3, s31, s8
 8009850:	ee35 3a03 	vadd.f32	s6, s10, s6
 8009854:	ee72 6a66 	vsub.f32	s13, s4, s13
 8009858:	ee2c 5a04 	vmul.f32	s10, s24, s8
 800985c:	ee2f 2a88 	vmul.f32	s4, s31, s16
 8009860:	ed9d 4a02 	vldr	s8, [sp, #8]
 8009864:	ed82 1a01 	vstr	s2, [r2, #4]
 8009868:	ee77 3a63 	vsub.f32	s7, s14, s7
 800986c:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8009870:	ed9d 7a01 	vldr	s14, [sp, #4]
 8009874:	ed81 3a00 	vstr	s6, [r1]
 8009878:	ee30 9a89 	vadd.f32	s18, s1, s18
 800987c:	ee32 2a05 	vadd.f32	s4, s4, s10
 8009880:	ee6d 0a22 	vmul.f32	s1, s26, s5
 8009884:	ee31 8ac8 	vsub.f32	s16, s3, s16
 8009888:	ee67 2a22 	vmul.f32	s5, s14, s5
 800988c:	ee64 1a00 	vmul.f32	s3, s8, s0
 8009890:	ee27 7a24 	vmul.f32	s14, s14, s9
 8009894:	ee2c 5aa8 	vmul.f32	s10, s25, s17
 8009898:	ee6d 4a24 	vmul.f32	s9, s26, s9
 800989c:	ee64 8a28 	vmul.f32	s17, s8, s17
 80098a0:	ed9d 4a00 	vldr	s8, [sp]
 80098a4:	edc1 6a01 	vstr	s13, [r1, #4]
 80098a8:	ee74 2ae2 	vsub.f32	s5, s9, s5
 80098ac:	ee6d 4aa9 	vmul.f32	s9, s27, s19
 80098b0:	ee64 9a29 	vmul.f32	s19, s8, s19
 80098b4:	ee24 4a25 	vmul.f32	s8, s8, s11
 80098b8:	ee30 7a87 	vadd.f32	s14, s1, s14
 80098bc:	ee74 4a84 	vadd.f32	s9, s9, s8
 80098c0:	ee6e 0aa7 	vmul.f32	s1, s29, s15
 80098c4:	ee2a 4a86 	vmul.f32	s8, s21, s12
 80098c8:	ee2c 0a80 	vmul.f32	s0, s25, s0
 80098cc:	ee6d 5aa5 	vmul.f32	s11, s27, s11
 80098d0:	ee6a 7aa7 	vmul.f32	s15, s21, s15
 80098d4:	ee2e 6a86 	vmul.f32	s12, s29, s12
 80098d8:	ee75 1a21 	vadd.f32	s3, s10, s3
 80098dc:	ee30 0a68 	vsub.f32	s0, s0, s17
 80098e0:	ee75 9ae9 	vsub.f32	s19, s11, s19
 80098e4:	ee70 0a84 	vadd.f32	s1, s1, s8
 80098e8:	ee36 6a67 	vsub.f32	s12, s12, s15
 80098ec:	44d9      	add	r9, fp
 80098ee:	45ca      	cmp	sl, r9
 80098f0:	ed84 9a00 	vstr	s18, [r4]
 80098f4:	edc4 3a01 	vstr	s7, [r4, #4]
 80098f8:	441a      	add	r2, r3
 80098fa:	ed07 7a01 	vstr	s14, [r7, #-4]
 80098fe:	edc7 2a00 	vstr	s5, [r7]
 8009902:	4419      	add	r1, r3
 8009904:	ed80 2a00 	vstr	s4, [r0]
 8009908:	ed80 8a01 	vstr	s16, [r0, #4]
 800990c:	441c      	add	r4, r3
 800990e:	ed48 1a01 	vstr	s3, [r8, #-4]
 8009912:	ed88 0a00 	vstr	s0, [r8]
 8009916:	441f      	add	r7, r3
 8009918:	ed46 4a01 	vstr	s9, [r6, #-4]
 800991c:	4418      	add	r0, r3
 800991e:	edc6 9a00 	vstr	s19, [r6]
 8009922:	4498      	add	r8, r3
 8009924:	edc5 0a00 	vstr	s1, [r5]
 8009928:	ed85 6a01 	vstr	s12, [r5, #4]
 800992c:	441e      	add	r6, r3
 800992e:	441d      	add	r5, r3
 8009930:	f63f aeea 	bhi.w	8009708 <arm_radix8_butterfly_f32+0x328>
 8009934:	9a03      	ldr	r2, [sp, #12]
 8009936:	9818      	ldr	r0, [sp, #96]	; 0x60
 8009938:	3201      	adds	r2, #1
 800993a:	4611      	mov	r1, r2
 800993c:	9203      	str	r2, [sp, #12]
 800993e:	9a04      	ldr	r2, [sp, #16]
 8009940:	4402      	add	r2, r0
 8009942:	9204      	str	r2, [sp, #16]
 8009944:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8009946:	9a05      	ldr	r2, [sp, #20]
 8009948:	4402      	add	r2, r0
 800994a:	9205      	str	r2, [sp, #20]
 800994c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800994e:	9a07      	ldr	r2, [sp, #28]
 8009950:	4402      	add	r2, r0
 8009952:	9207      	str	r2, [sp, #28]
 8009954:	9816      	ldr	r0, [sp, #88]	; 0x58
 8009956:	9a06      	ldr	r2, [sp, #24]
 8009958:	4402      	add	r2, r0
 800995a:	9206      	str	r2, [sp, #24]
 800995c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800995e:	4496      	add	lr, r2
 8009960:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009962:	4494      	add	ip, r2
 8009964:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009966:	3208      	adds	r2, #8
 8009968:	920f      	str	r2, [sp, #60]	; 0x3c
 800996a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800996c:	3208      	adds	r2, #8
 800996e:	920e      	str	r2, [sp, #56]	; 0x38
 8009970:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009972:	3208      	adds	r2, #8
 8009974:	920d      	str	r2, [sp, #52]	; 0x34
 8009976:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009978:	3208      	adds	r2, #8
 800997a:	920c      	str	r2, [sp, #48]	; 0x30
 800997c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800997e:	3208      	adds	r2, #8
 8009980:	920b      	str	r2, [sp, #44]	; 0x2c
 8009982:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009984:	3208      	adds	r2, #8
 8009986:	920a      	str	r2, [sp, #40]	; 0x28
 8009988:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800998a:	3208      	adds	r2, #8
 800998c:	9209      	str	r2, [sp, #36]	; 0x24
 800998e:	9a08      	ldr	r2, [sp, #32]
 8009990:	3208      	adds	r2, #8
 8009992:	9208      	str	r2, [sp, #32]
 8009994:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8009996:	9811      	ldr	r0, [sp, #68]	; 0x44
 8009998:	4288      	cmp	r0, r1
 800999a:	4622      	mov	r2, r4
 800999c:	d007      	beq.n	80099ae <arm_radix8_butterfly_f32+0x5ce>
 800999e:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80099a0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80099a4:	4621      	mov	r1, r4
 80099a6:	4401      	add	r1, r0
 80099a8:	9110      	str	r1, [sp, #64]	; 0x40
 80099aa:	9804      	ldr	r0, [sp, #16]
 80099ac:	e67c      	b.n	80096a8 <arm_radix8_butterfly_f32+0x2c8>
 80099ae:	4683      	mov	fp, r0
 80099b0:	f8bd 905c 	ldrh.w	r9, [sp, #92]	; 0x5c
 80099b4:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80099b6:	e524      	b.n	8009402 <arm_radix8_butterfly_f32+0x22>
 80099b8:	b01d      	add	sp, #116	; 0x74
 80099ba:	ecbd 8b10 	vpop	{d8-d15}
 80099be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099c2:	bf00      	nop

080099c4 <sqrtf>:
 80099c4:	b510      	push	{r4, lr}
 80099c6:	ed2d 8b02 	vpush	{d8}
 80099ca:	b08a      	sub	sp, #40	; 0x28
 80099cc:	eeb0 8a40 	vmov.f32	s16, s0
 80099d0:	f000 f848 	bl	8009a64 <__ieee754_sqrtf>
 80099d4:	4b21      	ldr	r3, [pc, #132]	; (8009a5c <sqrtf+0x98>)
 80099d6:	f993 4000 	ldrsb.w	r4, [r3]
 80099da:	1c63      	adds	r3, r4, #1
 80099dc:	d02c      	beq.n	8009a38 <sqrtf+0x74>
 80099de:	eeb4 8a48 	vcmp.f32	s16, s16
 80099e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099e6:	d627      	bvs.n	8009a38 <sqrtf+0x74>
 80099e8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80099ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f0:	d522      	bpl.n	8009a38 <sqrtf+0x74>
 80099f2:	2301      	movs	r3, #1
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	4b1a      	ldr	r3, [pc, #104]	; (8009a60 <sqrtf+0x9c>)
 80099f8:	9301      	str	r3, [sp, #4]
 80099fa:	ee18 0a10 	vmov	r0, s16
 80099fe:	2300      	movs	r3, #0
 8009a00:	9308      	str	r3, [sp, #32]
 8009a02:	f7f6 fdb1 	bl	8000568 <__aeabi_f2d>
 8009a06:	2200      	movs	r2, #0
 8009a08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a10:	2300      	movs	r3, #0
 8009a12:	b9ac      	cbnz	r4, 8009a40 <sqrtf+0x7c>
 8009a14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009a18:	4668      	mov	r0, sp
 8009a1a:	f000 f826 	bl	8009a6a <matherr>
 8009a1e:	b1b8      	cbz	r0, 8009a50 <sqrtf+0x8c>
 8009a20:	9b08      	ldr	r3, [sp, #32]
 8009a22:	b11b      	cbz	r3, 8009a2c <sqrtf+0x68>
 8009a24:	f000 f824 	bl	8009a70 <__errno>
 8009a28:	9b08      	ldr	r3, [sp, #32]
 8009a2a:	6003      	str	r3, [r0, #0]
 8009a2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a30:	f7f7 f804 	bl	8000a3c <__aeabi_d2f>
 8009a34:	ee00 0a10 	vmov	s0, r0
 8009a38:	b00a      	add	sp, #40	; 0x28
 8009a3a:	ecbd 8b02 	vpop	{d8}
 8009a3e:	bd10      	pop	{r4, pc}
 8009a40:	4610      	mov	r0, r2
 8009a42:	4619      	mov	r1, r3
 8009a44:	f7f6 ff12 	bl	800086c <__aeabi_ddiv>
 8009a48:	2c02      	cmp	r4, #2
 8009a4a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a4e:	d1e3      	bne.n	8009a18 <sqrtf+0x54>
 8009a50:	f000 f80e 	bl	8009a70 <__errno>
 8009a54:	2321      	movs	r3, #33	; 0x21
 8009a56:	6003      	str	r3, [r0, #0]
 8009a58:	e7e2      	b.n	8009a20 <sqrtf+0x5c>
 8009a5a:	bf00      	nop
 8009a5c:	20002108 	.word	0x20002108
 8009a60:	0800c56c 	.word	0x0800c56c

08009a64 <__ieee754_sqrtf>:
 8009a64:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8009a68:	4770      	bx	lr

08009a6a <matherr>:
 8009a6a:	2000      	movs	r0, #0
 8009a6c:	4770      	bx	lr
	...

08009a70 <__errno>:
 8009a70:	4b01      	ldr	r3, [pc, #4]	; (8009a78 <__errno+0x8>)
 8009a72:	6818      	ldr	r0, [r3, #0]
 8009a74:	4770      	bx	lr
 8009a76:	bf00      	nop
 8009a78:	2000210c 	.word	0x2000210c

08009a7c <__libc_init_array>:
 8009a7c:	b570      	push	{r4, r5, r6, lr}
 8009a7e:	4e0d      	ldr	r6, [pc, #52]	; (8009ab4 <__libc_init_array+0x38>)
 8009a80:	4c0d      	ldr	r4, [pc, #52]	; (8009ab8 <__libc_init_array+0x3c>)
 8009a82:	1ba4      	subs	r4, r4, r6
 8009a84:	10a4      	asrs	r4, r4, #2
 8009a86:	2500      	movs	r5, #0
 8009a88:	42a5      	cmp	r5, r4
 8009a8a:	d109      	bne.n	8009aa0 <__libc_init_array+0x24>
 8009a8c:	4e0b      	ldr	r6, [pc, #44]	; (8009abc <__libc_init_array+0x40>)
 8009a8e:	4c0c      	ldr	r4, [pc, #48]	; (8009ac0 <__libc_init_array+0x44>)
 8009a90:	f000 f820 	bl	8009ad4 <_init>
 8009a94:	1ba4      	subs	r4, r4, r6
 8009a96:	10a4      	asrs	r4, r4, #2
 8009a98:	2500      	movs	r5, #0
 8009a9a:	42a5      	cmp	r5, r4
 8009a9c:	d105      	bne.n	8009aaa <__libc_init_array+0x2e>
 8009a9e:	bd70      	pop	{r4, r5, r6, pc}
 8009aa0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009aa4:	4798      	blx	r3
 8009aa6:	3501      	adds	r5, #1
 8009aa8:	e7ee      	b.n	8009a88 <__libc_init_array+0xc>
 8009aaa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009aae:	4798      	blx	r3
 8009ab0:	3501      	adds	r5, #1
 8009ab2:	e7f2      	b.n	8009a9a <__libc_init_array+0x1e>
 8009ab4:	0800c5dc 	.word	0x0800c5dc
 8009ab8:	0800c5dc 	.word	0x0800c5dc
 8009abc:	0800c5dc 	.word	0x0800c5dc
 8009ac0:	0800c5e0 	.word	0x0800c5e0

08009ac4 <memset>:
 8009ac4:	4402      	add	r2, r0
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d100      	bne.n	8009ace <memset+0xa>
 8009acc:	4770      	bx	lr
 8009ace:	f803 1b01 	strb.w	r1, [r3], #1
 8009ad2:	e7f9      	b.n	8009ac8 <memset+0x4>

08009ad4 <_init>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	bf00      	nop
 8009ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ada:	bc08      	pop	{r3}
 8009adc:	469e      	mov	lr, r3
 8009ade:	4770      	bx	lr

08009ae0 <_fini>:
 8009ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae2:	bf00      	nop
 8009ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ae6:	bc08      	pop	{r3}
 8009ae8:	469e      	mov	lr, r3
 8009aea:	4770      	bx	lr
